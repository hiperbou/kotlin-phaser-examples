if (typeof kotlin === 'undefined') {
  throw new Error("Error loading module 'example1'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'example1'.");
}
var example1 = function (_, Kotlin) {
  'use strict';
  var lazy = Kotlin.kotlin.lazy_un3fny$;
  var properties_0 = Kotlin.kotlin.properties;
  var get_js = Kotlin.kotlin.js.get_js_t5ir34$;
  var Exception = Kotlin.kotlin.Exception;
  var get_lastIndex = Kotlin.kotlin.collections.get_lastIndex_a7ptmv$;
  var mutableListOf = Kotlin.kotlin.collections.mutableListOf_9mqe4v$;
  var listOf = Kotlin.kotlin.collections.listOf_9mqe4v$;
  var drop = Kotlin.kotlin.collections.drop_cwv5p1$;
  var IntCompanionObject = Kotlin.kotlin.js.internal.IntCompanionObject;
  var toMutableList = Kotlin.kotlin.collections.toMutableList_eg9ybj$;
  var downTo = Kotlin.kotlin.ranges.downTo_rksjo2$;
  var Pair = Kotlin.kotlin.Pair;
  var mapOf = Kotlin.kotlin.collections.mapOf_eoa9s7$;
  var mutableMapOf = Kotlin.kotlin.collections.mutableMapOf_eoa9s7$;
  var split = Kotlin.kotlin.text.split_l2gz7$;
  Sprite.prototype = Object.create(Phaser.Sprite.prototype);
  Sprite.prototype.constructor = Sprite;
  Panda.prototype = Object.create(Sprite.prototype);
  Panda.prototype.constructor = Panda;
  MainState.prototype = Object.create(Phaser.State.prototype);
  MainState.prototype.constructor = MainState;
  OtherState.prototype = Object.create(Phaser.State.prototype);
  OtherState.prototype.constructor = OtherState;
  ExamplesWeb$TopBar.prototype = Object.create(Phaser.State.prototype);
  ExamplesWeb$TopBar.prototype.constructor = ExamplesWeb$TopBar;
  AnimationEvents.prototype = Object.create(Phaser.State.prototype);
  AnimationEvents.prototype.constructor = AnimationEvents;
  ChangeFrame.prototype = Object.create(Phaser.State.prototype);
  ChangeFrame.prototype.constructor = ChangeFrame;
  ChangeTextureOnClick.prototype = Object.create(Phaser.State.prototype);
  ChangeTextureOnClick.prototype.constructor = ChangeTextureOnClick;
  DestroyAnimation.prototype = Object.create(Phaser.State.prototype);
  DestroyAnimation.prototype.constructor = DestroyAnimation;
  DynamicAnimation.prototype = Object.create(Phaser.State.prototype);
  DynamicAnimation.prototype.constructor = DynamicAnimation;
  FrameUpdate.prototype = Object.create(Phaser.State.prototype);
  FrameUpdate.prototype.constructor = FrameUpdate;
  GroupCreation.prototype = Object.create(Phaser.State.prototype);
  GroupCreation.prototype.constructor = GroupCreation;
  LoadTexture.prototype = Object.create(Phaser.State.prototype);
  LoadTexture.prototype.constructor = LoadTexture;
  LocalJsonObject.prototype = Object.create(Phaser.State.prototype);
  LocalJsonObject.prototype.constructor = LocalJsonObject;
  LoopedAnimation.prototype = Object.create(Phaser.State.prototype);
  LoopedAnimation.prototype.constructor = LoopedAnimation;
  MultipleAnims.prototype = Object.create(Phaser.State.prototype);
  MultipleAnims.prototype.constructor = MultipleAnims;
  SpriteSheet.prototype = Object.create(Phaser.State.prototype);
  SpriteSheet.prototype.constructor = SpriteSheet;
  StarlingAtlas.prototype = Object.create(Phaser.State.prototype);
  StarlingAtlas.prototype.constructor = StarlingAtlas;
  StopAnimation.prototype = Object.create(Phaser.State.prototype);
  StopAnimation.prototype.constructor = StopAnimation;
  TwoFrameTest.prototype = Object.create(Phaser.State.prototype);
  TwoFrameTest.prototype.constructor = TwoFrameTest;
  AccelerateToPointer.prototype = Object.create(Phaser.State.prototype);
  AccelerateToPointer.prototype.constructor = AccelerateToPointer;
  AngleBetween.prototype = Object.create(Phaser.State.prototype);
  AngleBetween.prototype.constructor = AngleBetween;
  AngleToPointer.prototype = Object.create(Phaser.State.prototype);
  AngleToPointer.prototype.constructor = AngleToPointer;
  AngularAcceleration.prototype = Object.create(Phaser.State.prototype);
  AngularAcceleration.prototype.constructor = AngularAcceleration;
  AngularVelocity.prototype = Object.create(Phaser.State.prototype);
  AngularVelocity.prototype.constructor = AngularVelocity;
  AsteroidsMovement.prototype = Object.create(Phaser.State.prototype);
  AsteroidsMovement.prototype.constructor = AsteroidsMovement;
  BodyDebug.prototype = Object.create(Phaser.State.prototype);
  BodyDebug.prototype.constructor = BodyDebug;
  BodyEnable.prototype = Object.create(Phaser.State.prototype);
  BodyEnable.prototype.constructor = BodyEnable;
  BodyScale.prototype = Object.create(Phaser.State.prototype);
  BodyScale.prototype.constructor = BodyScale;
  Bounce.prototype = Object.create(Phaser.State.prototype);
  Bounce.prototype.constructor = Bounce;
  BounceAccelerator.prototype = Object.create(Phaser.State.prototype);
  BounceAccelerator.prototype.constructor = BounceAccelerator;
  BounceKnock.prototype = Object.create(Phaser.State.prototype);
  BounceKnock.prototype.constructor = BounceKnock;
  BounceWithGravity.prototype = Object.create(Phaser.State.prototype);
  BounceWithGravity.prototype.constructor = BounceWithGravity;
  BoundingBox.prototype = Object.create(Phaser.State.prototype);
  BoundingBox.prototype.constructor = BoundingBox;
  CircleBody.prototype = Object.create(Phaser.State.prototype);
  CircleBody.prototype.constructor = CircleBody;
  DirectBodyMovement.prototype = Object.create(Phaser.State.prototype);
  DirectBodyMovement.prototype.constructor = DirectBodyMovement;
  DistanceToPointer.prototype = Object.create(Phaser.State.prototype);
  DistanceToPointer.prototype.constructor = DistanceToPointer;
  GlobalPause.prototype = Object.create(Phaser.State.prototype);
  GlobalPause.prototype.constructor = GlobalPause;
  Gravity.prototype = Object.create(Phaser.State.prototype);
  Gravity.prototype.constructor = Gravity;
  GravityAndDrag.prototype = Object.create(Phaser.State.prototype);
  GravityAndDrag.prototype.constructor = GravityAndDrag;
  GroupVsGroup.prototype = Object.create(Phaser.State.prototype);
  GroupVsGroup.prototype.constructor = GroupVsGroup;
  GroupVsSelf.prototype = Object.create(Phaser.State.prototype);
  GroupVsSelf.prototype.constructor = GroupVsSelf;
  LargerBoundingBox.prototype = Object.create(Phaser.State.prototype);
  LargerBoundingBox.prototype.constructor = LargerBoundingBox;
  Launcher.prototype = Object.create(Phaser.State.prototype);
  Launcher.prototype.constructor = Launcher;
  LauncherFollow.prototype = Object.create(Phaser.State.prototype);
  LauncherFollow.prototype.constructor = LauncherFollow;
  LauncherFollowWorld.prototype = Object.create(Phaser.State.prototype);
  LauncherFollowWorld.prototype.constructor = LauncherFollowWorld;
  MassVelocityTest.prototype = Object.create(Phaser.State.prototype);
  MassVelocityTest.prototype.constructor = MassVelocityTest;
  MoveOverDistance.prototype = Object.create(Phaser.State.prototype);
  MoveOverDistance.prototype.constructor = MoveOverDistance;
  MoveToPointer.prototype = Object.create(Phaser.State.prototype);
  MoveToPointer.prototype.constructor = MoveToPointer;
  MoveTowardsObject.prototype = Object.create(Phaser.State.prototype);
  MoveTowardsObject.prototype.constructor = MoveTowardsObject;
  MultiAngleToPointer.prototype = Object.create(Phaser.State.prototype);
  MultiAngleToPointer.prototype.constructor = MultiAngleToPointer;
  Multiball.prototype = Object.create(Phaser.State.prototype);
  Multiball.prototype.constructor = Multiball;
  NestedGroup.prototype = Object.create(Phaser.State.prototype);
  NestedGroup.prototype.constructor = NestedGroup;
  OffsetBoundingBox.prototype = Object.create(Phaser.State.prototype);
  OffsetBoundingBox.prototype.constructor = OffsetBoundingBox;
  OnCollideEvent.prototype = Object.create(Phaser.State.prototype);
  OnCollideEvent.prototype.constructor = OnCollideEvent;
  OneWayCollision.prototype = Object.create(Phaser.State.prototype);
  OneWayCollision.prototype.constructor = OneWayCollision;
  PlatformerBasics.prototype = Object.create(Phaser.State.prototype);
  PlatformerBasics.prototype.constructor = PlatformerBasics;
  PlatformerTight.prototype = Object.create(Phaser.State.prototype);
  PlatformerTight.prototype.constructor = PlatformerTight;
  ProcessCallback.prototype = Object.create(Phaser.State.prototype);
  ProcessCallback.prototype.constructor = ProcessCallback;
  QuadtreeCollisionInfos.prototype = Object.create(Phaser.State.prototype);
  QuadtreeCollisionInfos.prototype.constructor = QuadtreeCollisionInfos;
  RotateToSprite.prototype = Object.create(Phaser.State.prototype);
  RotateToSprite.prototype.constructor = RotateToSprite;
  ShipTrail.prototype = Object.create(Phaser.State.prototype);
  ShipTrail.prototype.constructor = ShipTrail;
  ShootThePointer.prototype = Object.create(Phaser.State.prototype);
  ShootThePointer.prototype.constructor = ShootThePointer;
  Snake.prototype = Object.create(Phaser.State.prototype);
  Snake.prototype.constructor = Snake;
  SortDirection.prototype = Object.create(Phaser.State.prototype);
  SortDirection.prototype.constructor = SortDirection;
  SortDirectionVertical.prototype = Object.create(Phaser.State.prototype);
  SortDirectionVertical.prototype.constructor = SortDirectionVertical;
  SpriteVsGroup.prototype = Object.create(Phaser.State.prototype);
  SpriteVsGroup.prototype.constructor = SpriteVsGroup;
  SpriteVsSprite.prototype = Object.create(Phaser.State.prototype);
  SpriteVsSprite.prototype.constructor = SpriteVsSprite;
  VerticalCollision.prototype = Object.create(Phaser.State.prototype);
  VerticalCollision.prototype.constructor = VerticalCollision;
  WorldBoundsEvent.prototype = Object.create(Phaser.State.prototype);
  WorldBoundsEvent.prototype.constructor = WorldBoundsEvent;
  AudioSpriteDuration.prototype = Object.create(Phaser.State.prototype);
  AudioSpriteDuration.prototype.constructor = AudioSpriteDuration;
  AudioSpriteExample.prototype = Object.create(Phaser.State.prototype);
  AudioSpriteExample.prototype.constructor = AudioSpriteExample;
  AudioSpriteJson.prototype = Object.create(Phaser.State.prototype);
  AudioSpriteJson.prototype.constructor = AudioSpriteJson;
  FadeIn.prototype = Object.create(Phaser.State.prototype);
  FadeIn.prototype.constructor = FadeIn;
  Ios.prototype = Object.create(Phaser.State.prototype);
  Ios.prototype.constructor = Ios;
  Loop.prototype = Object.create(Phaser.State.prototype);
  Loop.prototype.constructor = Loop;
  PauseAndResume.prototype = Object.create(Phaser.State.prototype);
  PauseAndResume.prototype.constructor = PauseAndResume;
  PauseAndResumeMarker.prototype = Object.create(Phaser.State.prototype);
  PauseAndResumeMarker.prototype.constructor = PauseAndResumeMarker;
  PlayMusic.prototype = Object.create(Phaser.State.prototype);
  PlayMusic.prototype.constructor = PlayMusic;
  RemoveSound.prototype = Object.create(Phaser.State.prototype);
  RemoveSound.prototype.constructor = RemoveSound;
  RestartSound.prototype = Object.create(Phaser.State.prototype);
  RestartSound.prototype.constructor = RestartSound;
  SoundComplete.prototype = Object.create(Phaser.State.prototype);
  SoundComplete.prototype.constructor = SoundComplete;
  E01LoadAnImage.prototype = Object.create(Phaser.State.prototype);
  E01LoadAnImage.prototype.constructor = E01LoadAnImage;
  E02ClickOnAnImage.prototype = Object.create(Phaser.State.prototype);
  E02ClickOnAnImage.prototype.constructor = E02ClickOnAnImage;
  E03MoveAnImage.prototype = Object.create(Phaser.State.prototype);
  E03MoveAnImage.prototype.constructor = E03MoveAnImage;
  E04ImageFollowInput.prototype = Object.create(Phaser.State.prototype);
  E04ImageFollowInput.prototype.constructor = E04ImageFollowInput;
  E05LoadAnAnimation.prototype = Object.create(Phaser.State.prototype);
  E05LoadAnAnimation.prototype.constructor = E05LoadAnAnimation;
  E06RenderText.prototype = Object.create(Phaser.State.prototype);
  E06RenderText.prototype.constructor = E06RenderText;
  E07TweenAnImage.prototype = Object.create(Phaser.State.prototype);
  E07TweenAnImage.prototype.constructor = E07TweenAnImage;
  E08SpriteRotation.prototype = Object.create(Phaser.State.prototype);
  E08SpriteRotation.prototype.constructor = E08SpriteRotation;
  AlphaMask.prototype = Object.create(Phaser.State.prototype);
  AlphaMask.prototype.constructor = AlphaMask;
  Atlas.prototype = Object.create(Phaser.State.prototype);
  Atlas.prototype.constructor = Atlas;
  CopyBitmapdata.prototype = Object.create(Phaser.State.prototype);
  CopyBitmapdata.prototype.constructor = CopyBitmapdata;
  CopyPixels.prototype = Object.create(Phaser.State.prototype);
  CopyPixels.prototype.constructor = CopyPixels;
  DrawAtlasFrame.prototype = Object.create(Phaser.State.prototype);
  DrawAtlasFrame.prototype.constructor = DrawAtlasFrame;
  DrawGroup.prototype = Object.create(Phaser.State.prototype);
  DrawGroup.prototype.constructor = DrawGroup;
  DrawSprite.prototype = Object.create(Phaser.State.prototype);
  DrawSprite.prototype.constructor = DrawSprite;
  GetPixel.prototype = Object.create(Phaser.State.prototype);
  GetPixel.prototype.constructor = GetPixel;
  ReplaceColor.prototype = Object.create(Phaser.State.prototype);
  ReplaceColor.prototype.constructor = ReplaceColor;
  SetHsl.prototype = Object.create(Phaser.State.prototype);
  SetHsl.prototype.constructor = SetHsl;
  SpriteTexture.prototype = Object.create(Phaser.State.prototype);
  SpriteTexture.prototype.constructor = SpriteTexture;
  TextExample.prototype = Object.create(Phaser.State.prototype);
  TextExample.prototype.constructor = TextExample;
  Tint.prototype = Object.create(Phaser.State.prototype);
  Tint.prototype.constructor = Tint;
  ActionOnClick.prototype = Object.create(Phaser.State.prototype);
  ActionOnClick.prototype.constructor = ActionOnClick;
  ButtonInAGroup.prototype = Object.create(Phaser.State.prototype);
  ButtonInAGroup.prototype.constructor = ButtonInAGroup;
  ButtonScale.prototype = Object.create(Phaser.State.prototype);
  ButtonScale.prototype.constructor = ButtonScale;
  ButtonUsingTextureAtlas.prototype = Object.create(Phaser.State.prototype);
  ButtonUsingTextureAtlas.prototype.constructor = ButtonUsingTextureAtlas;
  CancelButton.prototype = Object.create(Phaser.State.prototype);
  CancelButton.prototype.constructor = CancelButton;
  ChangingTheFrames.prototype = Object.create(Phaser.State.prototype);
  ChangingTheFrames.prototype.constructor = ChangingTheFrames;
  DisableButtonOnClick.prototype = Object.create(Phaser.State.prototype);
  DisableButtonOnClick.prototype.constructor = DisableButtonOnClick;
  RotatedButtons.prototype = Object.create(Phaser.State.prototype);
  RotatedButtons.prototype.constructor = RotatedButtons;
  BasicFollow.prototype = Object.create(Phaser.State.prototype);
  BasicFollow.prototype.constructor = BasicFollow;
  CameraCull.prototype = Object.create(Phaser.State.prototype);
  CameraCull.prototype.constructor = CameraCull;
  CameraFade.prototype = Object.create(Phaser.State.prototype);
  CameraFade.prototype.constructor = CameraFade;
  CameraFlash.prototype = Object.create(Phaser.State.prototype);
  CameraFlash.prototype.constructor = CameraFlash;
  CameraLerp.prototype = Object.create(Phaser.State.prototype);
  CameraLerp.prototype.constructor = CameraLerp;
  CameraShake.prototype = Object.create(Phaser.State.prototype);
  CameraShake.prototype.constructor = CameraShake;
  CameraView.prototype = Object.create(Phaser.State.prototype);
  CameraView.prototype.constructor = CameraView;
  Deadzone.prototype = Object.create(Phaser.State.prototype);
  Deadzone.prototype.constructor = Deadzone;
  FixedToCamera.prototype = Object.create(Phaser.State.prototype);
  FixedToCamera.prototype.constructor = FixedToCamera;
  FollowStyles.prototype = Object.create(Phaser.State.prototype);
  FollowStyles.prototype.constructor = FollowStyles;
  MassCameraCull.prototype = Object.create(Phaser.State.prototype);
  MassCameraCull.prototype.constructor = MassCameraCull;
  MovingTheCamera.prototype = Object.create(Phaser.State.prototype);
  MovingTheCamera.prototype.constructor = MovingTheCamera;
  SmoothFollow.prototype = Object.create(Phaser.State.prototype);
  SmoothFollow.prototype.constructor = SmoothFollow;
  WorldSprite.prototype = Object.create(Phaser.State.prototype);
  WorldSprite.prototype.constructor = WorldSprite;
  ZoomingTheCamera.prototype = Object.create(Phaser.State.prototype);
  ZoomingTheCamera.prototype.constructor = ZoomingTheCamera;
  GenerateSprite.prototype = Object.create(Phaser.State.prototype);
  GenerateSprite.prototype.constructor = GenerateSprite;
  MoreSprites.prototype = Object.create(Phaser.State.prototype);
  MoreSprites.prototype.constructor = MoreSprites;
  RatAttack.prototype = Object.create(Phaser.State.prototype);
  RatAttack.prototype.constructor = RatAttack;
  DebugCamera.prototype = Object.create(Phaser.State.prototype);
  DebugCamera.prototype.constructor = DebugCamera;
  DebugDisplay.prototype = Object.create(Phaser.State.prototype);
  DebugDisplay.prototype.constructor = DebugDisplay;
  DebugDraw.prototype = Object.create(Phaser.State.prototype);
  DebugDraw.prototype.constructor = DebugDraw;
  DebugInput.prototype = Object.create(Phaser.State.prototype);
  DebugInput.prototype.constructor = DebugInput;
  DebugPhysics.prototype = Object.create(Phaser.State.prototype);
  DebugPhysics.prototype.constructor = DebugPhysics;
  DebugSprite.prototype = Object.create(Phaser.State.prototype);
  DebugSprite.prototype.constructor = DebugSprite;
  AtariIntro.prototype = Object.create(Phaser.State.prototype);
  AtariIntro.prototype.constructor = AtariIntro;
  FontFromBitmapdata.prototype = Object.create(Phaser.State.prototype);
  FontFromBitmapdata.prototype.constructor = FontFromBitmapdata;
  RasterCarpet.prototype = Object.create(Phaser.State.prototype);
  RasterCarpet.prototype.constructor = RasterCarpet;
  RasterFont.prototype = Object.create(Phaser.State.prototype);
  RasterFont.prototype.constructor = RasterFont;
  Springy.prototype = Object.create(Phaser.State.prototype);
  Springy.prototype.constructor = Springy;
  Starfield.prototype = Object.create(Phaser.State.prototype);
  Starfield.prototype.constructor = Starfield;
  UnlimitedBobs.prototype = Object.create(Phaser.State.prototype);
  UnlimitedBobs.prototype.constructor = UnlimitedBobs;
  Arc.prototype = Object.create(Phaser.State.prototype);
  Arc.prototype.constructor = Arc;
  ArcadePhysicsGraphicsShape.prototype = Object.create(Phaser.State.prototype);
  ArcadePhysicsGraphicsShape.prototype.constructor = ArcadePhysicsGraphicsShape;
  ArcDetails.prototype = Object.create(Phaser.State.prototype);
  ArcDetails.prototype.constructor = ArcDetails;
  CircleExample.prototype = Object.create(Phaser.State.prototype);
  CircleExample.prototype.constructor = CircleExample;
  Ellipse.prototype = Object.create(Phaser.State.prototype);
  Ellipse.prototype.constructor = Ellipse;
  ExtractMask.prototype = Object.create(Phaser.State.prototype);
  ExtractMask.prototype.constructor = ExtractMask;
  Fullscreen.prototype = Object.create(Phaser.State.prototype);
  Fullscreen.prototype.constructor = Fullscreen;
  FullscreenButtons.prototype = Object.create(Phaser.State.prototype);
  FullscreenButtons.prototype.constructor = FullscreenButtons;
  GameBackgroundColor.prototype = Object.create(Phaser.State.prototype);
  GameBackgroundColor.prototype.constructor = GameBackgroundColor;
  GenerateTextureFromGraphics.prototype = Object.create(Phaser.State.prototype);
  GenerateTextureFromGraphics.prototype.constructor = GenerateTextureFromGraphics;
  Gradient.prototype = Object.create(Phaser.State.prototype);
  Gradient.prototype.constructor = Gradient;
  Graphics2.prototype = Object.create(Phaser.State.prototype);
  Graphics2.prototype.constructor = Graphics2;
  GraphicsChild.prototype = Object.create(Phaser.State.prototype);
  GraphicsChild.prototype.constructor = GraphicsChild;
  GraphicsExample.prototype = Object.create(Phaser.State.prototype);
  GraphicsExample.prototype.constructor = GraphicsExample;
  GraphicsInputEvents.prototype = Object.create(Phaser.State.prototype);
  GraphicsInputEvents.prototype.constructor = GraphicsInputEvents;
  GraphicsPerf.prototype = Object.create(Phaser.State.prototype);
  GraphicsPerf.prototype.constructor = GraphicsPerf;
  HsvColorWheel.prototype = Object.create(Phaser.State.prototype);
  HsvColorWheel.prototype.constructor = HsvColorWheel;
  PixiRenderTexture.prototype = Object.create(Phaser.State.prototype);
  PixiRenderTexture.prototype.constructor = PixiRenderTexture;
  RenderCrisp.prototype = Object.create(Phaser.State.prototype);
  RenderCrisp.prototype.constructor = RenderCrisp;
  RenderTextureImage.prototype = Object.create(Phaser.State.prototype);
  RenderTextureImage.prototype.constructor = RenderTextureImage;
  RenderTextureMirror.prototype = Object.create(Phaser.State.prototype);
  RenderTextureMirror.prototype.constructor = RenderTextureMirror;
  RenderTextureRotation.prototype = Object.create(Phaser.State.prototype);
  RenderTextureRotation.prototype.constructor = RenderTextureRotation;
  RenderTextureTilemap.prototype = Object.create(Phaser.State.prototype);
  RenderTextureTilemap.prototype.constructor = RenderTextureTilemap;
  RenderTextureToTilesprite.prototype = Object.create(Phaser.State.prototype);
  RenderTextureToTilesprite.prototype.constructor = RenderTextureToTilesprite;
  RenderTextureTrail.prototype = Object.create(Phaser.State.prototype);
  RenderTextureTrail.prototype.constructor = RenderTextureTrail;
  RoundPixels.prototype = Object.create(Phaser.State.prototype);
  RoundPixels.prototype.constructor = RoundPixels;
  SpriteShadow.prototype = Object.create(Phaser.State.prototype);
  SpriteShadow.prototype.constructor = SpriteShadow;
  SpritesheetFromGraphics.prototype = Object.create(Phaser.State.prototype);
  SpritesheetFromGraphics.prototype.constructor = SpritesheetFromGraphics;
  TintSprite.prototype = Object.create(Phaser.State.prototype);
  TintSprite.prototype.constructor = TintSprite;
  TintSpriteFrame.prototype = Object.create(Phaser.State.prototype);
  TintSpriteFrame.prototype.constructor = TintSpriteFrame;
  Viewport.prototype = Object.create(Phaser.State.prototype);
  Viewport.prototype.constructor = Viewport;
  Bacteria.prototype = Object.create(Phaser.State.prototype);
  Bacteria.prototype.constructor = Bacteria;
  Basic.prototype = Object.create(Phaser.State.prototype);
  Basic.prototype.constructor = Basic;
  BlueDots.prototype = Object.create(Phaser.State.prototype);
  BlueDots.prototype.constructor = BlueDots;
  Blur.prototype = Object.create(Phaser.State.prototype);
  Blur.prototype.constructor = Blur;
  CheckerWave.prototype = Object.create(Phaser.State.prototype);
  CheckerWave.prototype.constructor = CheckerWave;
  Dalek.prototype = Object.create(Phaser.State.prototype);
  Dalek.prototype.constructor = Dalek;
  Dotwave.prototype = Object.create(Phaser.State.prototype);
  Dotwave.prototype.constructor = Dotwave;
  Dotwave2.prototype = Object.create(Phaser.State.prototype);
  Dotwave2.prototype.constructor = Dotwave2;
  Fire.prototype = Object.create(Phaser.State.prototype);
  Fire.prototype.constructor = Fire;
  Fireball.prototype = Object.create(Phaser.State.prototype);
  Fireball.prototype.constructor = Fireball;
  Gray.prototype = Object.create(Phaser.State.prototype);
  Gray.prototype.constructor = Gray;
  Kaleidoscope.prototype = Object.create(Phaser.State.prototype);
  Kaleidoscope.prototype.constructor = Kaleidoscope;
  Lightbeams.prototype = Object.create(Phaser.State.prototype);
  Lightbeams.prototype.constructor = Lightbeams;
  Lightwave.prototype = Object.create(Phaser.State.prototype);
  Lightwave.prototype.constructor = Lightwave;
  Marble.prototype = Object.create(Phaser.State.prototype);
  Marble.prototype.constructor = Marble;
  MouseRay.prototype = Object.create(Phaser.State.prototype);
  MouseRay.prototype.constructor = MouseRay;
  MouseWave.prototype = Object.create(Phaser.State.prototype);
  MouseWave.prototype.constructor = MouseWave;
  MultipleShaders.prototype = Object.create(Phaser.State.prototype);
  MultipleShaders.prototype.constructor = MultipleShaders;
  Pixelate.prototype = Object.create(Phaser.State.prototype);
  Pixelate.prototype.constructor = Pixelate;
  PixiFilter.prototype = Object.create(Phaser.State.prototype);
  PixiFilter.prototype.constructor = PixiFilter;
  PlaneDeformation.prototype = Object.create(Phaser.State.prototype);
  PlaneDeformation.prototype.constructor = PlaneDeformation;
  Plasma.prototype = Object.create(Phaser.State.prototype);
  Plasma.prototype.constructor = Plasma;
  RainbowBars.prototype = Object.create(Phaser.State.prototype);
  RainbowBars.prototype.constructor = RainbowBars;
  RetroPlasma.prototype = Object.create(Phaser.State.prototype);
  RetroPlasma.prototype.constructor = RetroPlasma;
  Rotozoomer.prototype = Object.create(Phaser.State.prototype);
  Rotozoomer.prototype.constructor = Rotozoomer;
  Seascape.prototype = Object.create(Phaser.State.prototype);
  Seascape.prototype.constructor = Seascape;
  Sinewave.prototype = Object.create(Phaser.State.prototype);
  Sinewave.prototype.constructor = Sinewave;
  SinewaveFixedBase.prototype = Object.create(Phaser.State.prototype);
  SinewaveFixedBase.prototype.constructor = SinewaveFixedBase;
  SphereTracer.prototype = Object.create(Phaser.State.prototype);
  SphereTracer.prototype.constructor = SphereTracer;
  SpiralGalaxy.prototype = Object.create(Phaser.State.prototype);
  SpiralGalaxy.prototype.constructor = SpiralGalaxy;
  StarfieldFilterExample.prototype = Object.create(Phaser.State.prototype);
  StarfieldFilterExample.prototype.constructor = StarfieldFilterExample;
  Starlight.prototype = Object.create(Phaser.State.prototype);
  Starlight.prototype.constructor = Starlight;
  Tunnel.prototype = Object.create(Phaser.State.prototype);
  Tunnel.prototype.constructor = Tunnel;
  Undersea.prototype = Object.create(Phaser.State.prototype);
  Undersea.prototype.constructor = Undersea;
  VduNoise.prototype = Object.create(Phaser.State.prototype);
  VduNoise.prototype.constructor = VduNoise;
  VerticalBars.prototype = Object.create(Phaser.State.prototype);
  VerticalBars.prototype.constructor = VerticalBars;
  Vortex.prototype = Object.create(Phaser.State.prototype);
  Vortex.prototype.constructor = Vortex;
  WorldFilter.prototype = Object.create(Phaser.State.prototype);
  WorldFilter.prototype.constructor = WorldFilter;
  Breakout.prototype = Object.create(Phaser.State.prototype);
  Breakout.prototype.constructor = Breakout;
  Defender.prototype = Object.create(Phaser.State.prototype);
  Defender.prototype.constructor = Defender;
  Gemmatch.prototype = Object.create(Phaser.State.prototype);
  Gemmatch.prototype.constructor = Gemmatch;
  Invaders.prototype = Object.create(Phaser.State.prototype);
  Invaders.prototype.constructor = Invaders;
  MatchingPairs.prototype = Object.create(Phaser.State.prototype);
  MatchingPairs.prototype.constructor = MatchingPairs;
  Simon.prototype = Object.create(Phaser.State.prototype);
  Simon.prototype.constructor = Simon;
  SlidingPuzzle.prototype = Object.create(Phaser.State.prototype);
  SlidingPuzzle.prototype.constructor = SlidingPuzzle;
  Starstruck.prototype = Object.create(Phaser.State.prototype);
  Starstruck.prototype.constructor = Starstruck;
  Tanks.prototype = Object.create(Phaser.State.prototype);
  Tanks.prototype.constructor = Tanks;
  Yahtzee.prototype = Object.create(Phaser.State.prototype);
  Yahtzee.prototype.constructor = Yahtzee;
  CenterLine.prototype = Object.create(Phaser.State.prototype);
  CenterLine.prototype.constructor = CenterLine;
  Centroid.prototype = Object.create(Phaser.State.prototype);
  Centroid.prototype.constructor = Centroid;
  CircleExample_0.prototype = Object.create(Phaser.State.prototype);
  CircleExample_0.prototype.constructor = CircleExample_0;
  CircleRandomPoint.prototype = Object.create(Phaser.State.prototype);
  CircleRandomPoint.prototype.constructor = CircleRandomPoint;
  EllipseRandomPoint.prototype = Object.create(Phaser.State.prototype);
  EllipseRandomPoint.prototype.constructor = EllipseRandomPoint;
  LineBounds.prototype = Object.create(Phaser.State.prototype);
  LineBounds.prototype.constructor = LineBounds;
  LineExample.prototype = Object.create(Phaser.State.prototype);
  LineExample.prototype.constructor = LineExample;
  LineIntersection.prototype = Object.create(Phaser.State.prototype);
  LineIntersection.prototype.constructor = LineIntersection;
  LineMidpoint.prototype = Object.create(Phaser.State.prototype);
  LineMidpoint.prototype.constructor = LineMidpoint;
  LineRandomPoint.prototype = Object.create(Phaser.State.prototype);
  LineRandomPoint.prototype.constructor = LineRandomPoint;
  LineReflection.prototype = Object.create(Phaser.State.prototype);
  LineReflection.prototype.constructor = LineReflection;
  PlayingWithPoints.prototype = Object.create(Phaser.State.prototype);
  PlayingWithPoints.prototype.constructor = PlayingWithPoints;
  PolygonContains.prototype = Object.create(Phaser.State.prototype);
  PolygonContains.prototype.constructor = PolygonContains;
  PolygonExample.prototype = Object.create(Phaser.State.prototype);
  PolygonExample.prototype.constructor = PolygonExample;
  QuadtreeExample.prototype = Object.create(Phaser.State.prototype);
  QuadtreeExample.prototype.constructor = QuadtreeExample;
  RectangleExample.prototype = Object.create(Phaser.State.prototype);
  RectangleExample.prototype.constructor = RectangleExample;
  RectangleGetPoint.prototype = Object.create(Phaser.State.prototype);
  RectangleGetPoint.prototype.constructor = RectangleGetPoint;
  RectangleIntersects.prototype = Object.create(Phaser.State.prototype);
  RectangleIntersects.prototype.constructor = RectangleIntersects;
  RectangleRandomPoint.prototype = Object.create(Phaser.State.prototype);
  RectangleRandomPoint.prototype.constructor = RectangleRandomPoint;
  RotateLine.prototype = Object.create(Phaser.State.prototype);
  RotateLine.prototype.constructor = RotateLine;
  RotatePoint.prototype = Object.create(Phaser.State.prototype);
  RotatePoint.prototype.constructor = RotatePoint;
  AddASpriteToGroup.prototype = Object.create(Phaser.State.prototype);
  AddASpriteToGroup.prototype.constructor = AddASpriteToGroup;
  AlignFramesToGrid.prototype = Object.create(Phaser.State.prototype);
  AlignFramesToGrid.prototype.constructor = AlignFramesToGrid;
  AlignSpritesToGrid.prototype = Object.create(Phaser.State.prototype);
  AlignSpritesToGrid.prototype.constructor = AlignSpritesToGrid;
  BringAGroupToTop.prototype = Object.create(Phaser.State.prototype);
  BringAGroupToTop.prototype.constructor = BringAGroupToTop;
  CallAll.prototype = Object.create(Phaser.State.prototype);
  CallAll.prototype.constructor = CallAll;
  CallAllAnimations.prototype = Object.create(Phaser.State.prototype);
  CallAllAnimations.prototype.constructor = CallAllAnimations;
  CallAllInput.prototype = Object.create(Phaser.State.prototype);
  CallAllInput.prototype.constructor = CallAllInput;
  CreateGroup.prototype = Object.create(Phaser.State.prototype);
  CreateGroup.prototype.constructor = CreateGroup;
  CreateIfNull.prototype = Object.create(Phaser.State.prototype);
  CreateIfNull.prototype.constructor = CreateIfNull;
  CreateSpriteInAGroup.prototype = Object.create(Phaser.State.prototype);
  CreateSpriteInAGroup.prototype.constructor = CreateSpriteInAGroup;
  CreateThumbnail.prototype = Object.create(Phaser.State.prototype);
  CreateThumbnail.prototype.constructor = CreateThumbnail;
  DepthSort.prototype = Object.create(Phaser.State.prototype);
  DepthSort.prototype.constructor = DepthSort;
  DisplayOrder.prototype = Object.create(Phaser.State.prototype);
  DisplayOrder.prototype.constructor = DisplayOrder;
  FilterByProperty.prototype = Object.create(Phaser.State.prototype);
  FilterByProperty.prototype.constructor = FilterByProperty;
  ForEach.prototype = Object.create(Phaser.State.prototype);
  ForEach.prototype.constructor = ForEach;
  GetFirst.prototype = Object.create(Phaser.State.prototype);
  GetFirst.prototype.constructor = GetFirst;
  GetFirstDead.prototype = Object.create(Phaser.State.prototype);
  GetFirstDead.prototype.constructor = GetFirstDead;
  GroupAsLayer.prototype = Object.create(Phaser.State.prototype);
  GroupAsLayer.prototype.constructor = GroupAsLayer;
  GroupBounds.prototype = Object.create(Phaser.State.prototype);
  GroupBounds.prototype.constructor = GroupBounds;
  GroupScale.prototype = Object.create(Phaser.State.prototype);
  GroupScale.prototype.constructor = GroupScale;
  GroupTransform.prototype = Object.create(Phaser.State.prototype);
  GroupTransform.prototype.constructor = GroupTransform;
  GroupTransformRotate.prototype = Object.create(Phaser.State.prototype);
  GroupTransformRotate.prototype.constructor = GroupTransformRotate;
  GroupTransformTween.prototype = Object.create(Phaser.State.prototype);
  GroupTransformTween.prototype.constructor = GroupTransformTween;
  HasProperty.prototype = Object.create(Phaser.State.prototype);
  HasProperty.prototype.constructor = HasProperty;
  MoveToAnotherGroup.prototype = Object.create(Phaser.State.prototype);
  MoveToAnotherGroup.prototype.constructor = MoveToAnotherGroup;
  NestedGroups.prototype = Object.create(Phaser.State.prototype);
  NestedGroups.prototype.constructor = NestedGroups;
  Recycling.prototype = Object.create(Phaser.State.prototype);
  Recycling.prototype.constructor = Recycling;
  Remove.prototype = Object.create(Phaser.State.prototype);
  Remove.prototype.constructor = Remove;
  RemoveBetween.prototype = Object.create(Phaser.State.prototype);
  RemoveBetween.prototype.constructor = RemoveBetween;
  RemoveCheck.prototype = Object.create(Phaser.State.prototype);
  RemoveCheck.prototype.constructor = RemoveCheck;
  Replace.prototype = Object.create(Phaser.State.prototype);
  Replace.prototype.constructor = Replace;
  SetAll.prototype = Object.create(Phaser.State.prototype);
  SetAll.prototype.constructor = SetAll;
  Sort.prototype = Object.create(Phaser.State.prototype);
  Sort.prototype.constructor = Sort;
  SubGroupsGroupLength.prototype = Object.create(Phaser.State.prototype);
  SubGroupsGroupLength.prototype.constructor = SubGroupsGroupLength;
  SwapChildrenInAGroup.prototype = Object.create(Phaser.State.prototype);
  SwapChildrenInAGroup.prototype.constructor = SwapChildrenInAGroup;
  BoundsRect.prototype = Object.create(Phaser.State.prototype);
  BoundsRect.prototype.constructor = BoundsRect;
  BoundsSprite.prototype = Object.create(Phaser.State.prototype);
  BoundsSprite.prototype.constructor = BoundsSprite;
  BringAChildToTop.prototype = Object.create(Phaser.State.prototype);
  BringAChildToTop.prototype.constructor = BringAChildToTop;
  ButtonDestroy.prototype = Object.create(Phaser.State.prototype);
  ButtonDestroy.prototype.constructor = ButtonDestroy;
  ButtonOpenPopup.prototype = Object.create(Phaser.State.prototype);
  ButtonOpenPopup.prototype.constructor = ButtonOpenPopup;
  CursorKeyMovement.prototype = Object.create(Phaser.State.prototype);
  CursorKeyMovement.prototype.constructor = CursorKeyMovement;
  DownDuration.prototype = Object.create(Phaser.State.prototype);
  DownDuration.prototype.constructor = DownDuration;
  Drag.prototype = Object.create(Phaser.State.prototype);
  Drag.prototype.constructor = Drag;
  DragEventParameters.prototype = Object.create(Phaser.State.prototype);
  DragEventParameters.prototype.constructor = DragEventParameters;
  DragScaledGroup.prototype = Object.create(Phaser.State.prototype);
  DragScaledGroup.prototype.constructor = DragScaledGroup;
  DragSeveralSprites.prototype = Object.create(Phaser.State.prototype);
  DragSeveralSprites.prototype.constructor = DragSeveralSprites;
  DragUpdate.prototype = Object.create(Phaser.State.prototype);
  DragUpdate.prototype.constructor = DragUpdate;
  DragUpdateMultiple.prototype = Object.create(Phaser.State.prototype);
  DragUpdateMultiple.prototype.constructor = DragUpdateMultiple;
  DropLimitation.prototype = Object.create(Phaser.State.prototype);
  DropLimitation.prototype.constructor = DropLimitation;
  FollowMouse.prototype = Object.create(Phaser.State.prototype);
  FollowMouse.prototype.constructor = FollowMouse;
  Gamepad.prototype = Object.create(Phaser.State.prototype);
  Gamepad.prototype.constructor = Gamepad;
  GamepadAnalogButton.prototype = Object.create(Phaser.State.prototype);
  GamepadAnalogButton.prototype.constructor = GamepadAnalogButton;
  GamepadButtons.prototype = Object.create(Phaser.State.prototype);
  GamepadButtons.prototype.constructor = GamepadButtons;
  GamepadMultiplePads.prototype = Object.create(Phaser.State.prototype);
  GamepadMultiplePads.prototype.constructor = GamepadMultiplePads;
  GameScale.prototype = Object.create(Phaser.State.prototype);
  GameScale.prototype.constructor = GameScale;
  GroupInputEvents.prototype = Object.create(Phaser.State.prototype);
  GroupInputEvents.prototype.constructor = GroupInputEvents;
  IgnoreChildInput.prototype = Object.create(Phaser.State.prototype);
  IgnoreChildInput.prototype.constructor = IgnoreChildInput;
  InputChildPriority.prototype = Object.create(Phaser.State.prototype);
  InputChildPriority.prototype.constructor = InputChildPriority;
  InputEnableGroup.prototype = Object.create(Phaser.State.prototype);
  InputEnableGroup.prototype.constructor = InputEnableGroup;
  InputOrder.prototype = Object.create(Phaser.State.prototype);
  InputOrder.prototype.constructor = InputOrder;
  InputPriority.prototype = Object.create(Phaser.State.prototype);
  InputPriority.prototype.constructor = InputPriority;
  Keyboard.prototype = Object.create(Phaser.State.prototype);
  Keyboard.prototype.constructor = Keyboard;
  KeyboardHotkeys.prototype = Object.create(Phaser.State.prototype);
  KeyboardHotkeys.prototype.constructor = KeyboardHotkeys;
  KeyboardJustpressed.prototype = Object.create(Phaser.State.prototype);
  KeyboardJustpressed.prototype.constructor = KeyboardJustpressed;
  KeyExample.prototype = Object.create(Phaser.State.prototype);
  KeyExample.prototype.constructor = KeyExample;
  MotionLockHorizontal.prototype = Object.create(Phaser.State.prototype);
  MotionLockHorizontal.prototype.constructor = MotionLockHorizontal;
  MotionLockVertical.prototype = Object.create(Phaser.State.prototype);
  MotionLockVertical.prototype.constructor = MotionLockVertical;
  MouseButtons.prototype = Object.create(Phaser.State.prototype);
  MouseButtons.prototype.constructor = MouseButtons;
  MultiTouch.prototype = Object.create(Phaser.State.prototype);
  MultiTouch.prototype.constructor = MultiTouch;
  OnTap.prototype = Object.create(Phaser.State.prototype);
  OnTap.prototype.constructor = OnTap;
  OutOfGame.prototype = Object.create(Phaser.State.prototype);
  OutOfGame.prototype.constructor = OutOfGame;
  OutOfGameMouseUp.prototype = Object.create(Phaser.State.prototype);
  OutOfGameMouseUp.prototype.constructor = OutOfGameMouseUp;
  OverrideDefaultControls.prototype = Object.create(Phaser.State.prototype);
  OverrideDefaultControls.prototype.constructor = OverrideDefaultControls;
  PixelPerfectClickDetection.prototype = Object.create(Phaser.State.prototype);
  PixelPerfectClickDetection.prototype.constructor = PixelPerfectClickDetection;
  PixelpickAtlas.prototype = Object.create(Phaser.State.prototype);
  PixelpickAtlas.prototype.constructor = PixelpickAtlas;
  PixelpickAtlasScaled.prototype = Object.create(Phaser.State.prototype);
  PixelpickAtlasScaled.prototype.constructor = PixelpickAtlasScaled;
  PixelpickScrollingEffect.prototype = Object.create(Phaser.State.prototype);
  PixelpickScrollingEffect.prototype.constructor = PixelpickScrollingEffect;
  PixelpickSpritesheet.prototype = Object.create(Phaser.State.prototype);
  PixelpickSpritesheet.prototype.constructor = PixelpickSpritesheet;
  PointerOver.prototype = Object.create(Phaser.State.prototype);
  PointerOver.prototype.constructor = PointerOver;
  SnapOnDrag.prototype = Object.create(Phaser.State.prototype);
  SnapOnDrag.prototype.constructor = SnapOnDrag;
  TouchEvents.prototype = Object.create(Phaser.State.prototype);
  TouchEvents.prototype.constructor = TouchEvents;
  WordInput.prototype = Object.create(Phaser.State.prototype);
  WordInput.prototype.constructor = WordInput;
  AssetPack.prototype = Object.create(Phaser.State.prototype);
  AssetPack.prototype.constructor = AssetPack;
  CheckCache.prototype = Object.create(Phaser.State.prototype);
  CheckCache.prototype.constructor = CheckCache;
  LoadAudio.prototype = Object.create(Phaser.State.prototype);
  LoadAudio.prototype.constructor = LoadAudio;
  LoadBitmapFont.prototype = Object.create(Phaser.State.prototype);
  LoadBitmapFont.prototype.constructor = LoadBitmapFont;
  LoadImage.prototype = Object.create(Phaser.State.prototype);
  LoadImage.prototype.constructor = LoadImage;
  LoadJsonFile.prototype = Object.create(Phaser.State.prototype);
  LoadJsonFile.prototype.constructor = LoadJsonFile;
  LoadSpritesheet.prototype = Object.create(Phaser.State.prototype);
  LoadSpritesheet.prototype.constructor = LoadSpritesheet;
  LoadStarlingAtlas.prototype = Object.create(Phaser.State.prototype);
  LoadStarlingAtlas.prototype.constructor = LoadStarlingAtlas;
  LoadTextFile.prototype = Object.create(Phaser.State.prototype);
  LoadTextFile.prototype.constructor = LoadTextFile;
  LoadTextureAtlas.prototype = Object.create(Phaser.State.prototype);
  LoadTextureAtlas.prototype.constructor = LoadTextureAtlas;
  LoadTilemapJson.prototype = Object.create(Phaser.State.prototype);
  LoadTilemapJson.prototype.constructor = LoadTilemapJson;
  LoadVideo.prototype = Object.create(Phaser.State.prototype);
  LoadVideo.prototype.constructor = LoadVideo;
  LoadXmlFile.prototype = Object.create(Phaser.State.prototype);
  LoadXmlFile.prototype.constructor = LoadXmlFile;
  PickImagesFromCache.prototype = Object.create(Phaser.State.prototype);
  PickImagesFromCache.prototype.constructor = PickImagesFromCache;
  AntialiasGame.prototype = Object.create(Phaser.State.prototype);
  AntialiasGame.prototype.constructor = AntialiasGame;
  Device.prototype = Object.create(Phaser.State.prototype);
  Device.prototype.constructor = Device;
  GameConfig_0.prototype = Object.create(Phaser.State.prototype);
  GameConfig_0.prototype.constructor = GameConfig_0;
  Net.prototype = Object.create(Phaser.State.prototype);
  Net.prototype.constructor = Net;
  PauseMenu.prototype = Object.create(Phaser.State.prototype);
  PauseMenu.prototype.constructor = PauseMenu;
  RandomGenerators.prototype = Object.create(Phaser.State.prototype);
  RandomGenerators.prototype.constructor = RandomGenerators;
  RepeatableRandomNumbers.prototype = Object.create(Phaser.State.prototype);
  RepeatableRandomNumbers.prototype.constructor = RepeatableRandomNumbers;
  Template.prototype = Object.create(Phaser.State.prototype);
  Template.prototype.constructor = Template;
  WeightedPick.prototype = Object.create(Phaser.State.prototype);
  WeightedPick.prototype.constructor = WeightedPick;
  Aabb.prototype = Object.create(Phaser.State.prototype);
  Aabb.prototype.constructor = Aabb;
  AccelerateToObject.prototype = Object.create(Phaser.State.prototype);
  AccelerateToObject.prototype.constructor = AccelerateToObject;
  BasicMovement.prototype = Object.create(Phaser.State.prototype);
  BasicMovement.prototype.constructor = BasicMovement;
  BodyClick.prototype = Object.create(Phaser.State.prototype);
  BodyClick.prototype.constructor = BodyClick;
  BodyDebug_0.prototype = Object.create(Phaser.State.prototype);
  BodyDebug_0.prototype.constructor = BodyDebug_0;
  CollideWorldBounds.prototype = Object.create(Phaser.State.prototype);
  CollideWorldBounds.prototype.constructor = CollideWorldBounds;
  CollisionGroups.prototype = Object.create(Phaser.State.prototype);
  CollisionGroups.prototype.constructor = CollisionGroups;
  ContactEvents.prototype = Object.create(Phaser.State.prototype);
  ContactEvents.prototype.constructor = ContactEvents;
  ContactMaterial.prototype = Object.create(Phaser.State.prototype);
  ContactMaterial.prototype.constructor = ContactMaterial;
  DistanceConstraint.prototype = Object.create(Phaser.State.prototype);
  DistanceConstraint.prototype.constructor = DistanceConstraint;
  GearConstraint.prototype = Object.create(Phaser.State.prototype);
  GearConstraint.prototype.constructor = GearConstraint;
  Gravity_0.prototype = Object.create(Phaser.State.prototype);
  Gravity_0.prototype.constructor = Gravity_0;
  GravityScale.prototype = Object.create(Phaser.State.prototype);
  GravityScale.prototype.constructor = GravityScale;
  ImpactEvents.prototype = Object.create(Phaser.State.prototype);
  ImpactEvents.prototype.constructor = ImpactEvents;
  KillAndRevive.prototype = Object.create(Phaser.State.prototype);
  KillAndRevive.prototype.constructor = KillAndRevive;
  KinematicBody.prototype = Object.create(Phaser.State.prototype);
  KinematicBody.prototype.constructor = KinematicBody;
  LoadPolygon1.prototype = Object.create(Phaser.State.prototype);
  LoadPolygon1.prototype.constructor = LoadPolygon1;
  LoadPolygon2.prototype = Object.create(Phaser.State.prototype);
  LoadPolygon2.prototype.constructor = LoadPolygon2;
  LoadPolygon3.prototype = Object.create(Phaser.State.prototype);
  LoadPolygon3.prototype.constructor = LoadPolygon3;
  LockConstraint.prototype = Object.create(Phaser.State.prototype);
  LockConstraint.prototype.constructor = LockConstraint;
  MouseSpring.prototype = Object.create(Phaser.State.prototype);
  MouseSpring.prototype.constructor = MouseSpring;
  MovementConstraint.prototype = Object.create(Phaser.State.prototype);
  MovementConstraint.prototype.constructor = MovementConstraint;
  PhysicsGroup.prototype = Object.create(Phaser.State.prototype);
  PhysicsGroup.prototype.constructor = PhysicsGroup;
  PickUpObject.prototype = Object.create(Phaser.State.prototype);
  PickUpObject.prototype.constructor = PickUpObject;
  PlatformerMaterial.prototype = Object.create(Phaser.State.prototype);
  PlatformerMaterial.prototype.constructor = PlatformerMaterial;
  PostbroadphaseCallback.prototype = Object.create(Phaser.State.prototype);
  PostbroadphaseCallback.prototype.constructor = PostbroadphaseCallback;
  PrismaticConstraint.prototype = Object.create(Phaser.State.prototype);
  PrismaticConstraint.prototype.constructor = PrismaticConstraint;
  RemoveSpring.prototype = Object.create(Phaser.State.prototype);
  RemoveSpring.prototype.constructor = RemoveSpring;
  RevoluteConstraintExample.prototype = Object.create(Phaser.State.prototype);
  RevoluteConstraintExample.prototype.constructor = RevoluteConstraintExample;
  Springs.prototype = Object.create(Phaser.State.prototype);
  Springs.prototype.constructor = Springs;
  StaticBody.prototype = Object.create(Phaser.State.prototype);
  StaticBody.prototype.constructor = StaticBody;
  Thrust.prototype = Object.create(Phaser.State.prototype);
  Thrust.prototype.constructor = Thrust;
  ThrustLeftRight.prototype = Object.create(Phaser.State.prototype);
  ThrustLeftRight.prototype.constructor = ThrustLeftRight;
  TilemapExample.prototype = Object.create(Phaser.State.prototype);
  TilemapExample.prototype.constructor = TilemapExample;
  TilemapGravity.prototype = Object.create(Phaser.State.prototype);
  TilemapGravity.prototype.constructor = TilemapGravity;
  TilespriteExample.prototype = Object.create(Phaser.State.prototype);
  TilespriteExample.prototype.constructor = TilespriteExample;
  WorldBoundary.prototype = Object.create(Phaser.State.prototype);
  WorldBoundary.prototype.constructor = WorldBoundary;
  WorldMove.prototype = Object.create(Phaser.State.prototype);
  WorldMove.prototype.constructor = WorldMove;
  AutoScale.prototype = Object.create(Phaser.State.prototype);
  AutoScale.prototype.constructor = AutoScale;
  ClickBurst.prototype = Object.create(Phaser.State.prototype);
  ClickBurst.prototype.constructor = ClickBurst;
  Collision.prototype = Object.create(Phaser.State.prototype);
  Collision.prototype.constructor = Collision;
  DestroyEmitter.prototype = Object.create(Phaser.State.prototype);
  DestroyEmitter.prototype.constructor = DestroyEmitter;
  DiamondBurst.prototype = Object.create(Phaser.State.prototype);
  DiamondBurst.prototype.constructor = DiamondBurst;
  EmitterWidth.prototype = Object.create(Phaser.State.prototype);
  EmitterWidth.prototype.constructor = EmitterWidth;
  Firestarter.prototype = Object.create(Phaser.State.prototype);
  Firestarter.prototype.constructor = Firestarter;
  Flow.prototype = Object.create(Phaser.State.prototype);
  Flow.prototype.constructor = Flow;
  Glass.prototype = Object.create(Phaser.State.prototype);
  Glass.prototype.constructor = Glass;
  NoRotation.prototype = Object.create(Phaser.State.prototype);
  NoRotation.prototype.constructor = NoRotation;
  ParticleAlpha.prototype = Object.create(Phaser.State.prototype);
  ParticleAlpha.prototype.constructor = ParticleAlpha;
  ParticleScale.prototype = Object.create(Phaser.State.prototype);
  ParticleScale.prototype.constructor = ParticleScale;
  ParticlesVsPlatforms.prototype = Object.create(Phaser.State.prototype);
  ParticlesVsPlatforms.prototype.constructor = ParticlesVsPlatforms;
  Rain.prototype = Object.create(Phaser.State.prototype);
  Rain.prototype.constructor = Rain;
  RandomSprite.prototype = Object.create(Phaser.State.prototype);
  RandomSprite.prototype.constructor = RandomSprite;
  SmokeTrail.prototype = Object.create(Phaser.State.prototype);
  SmokeTrail.prototype.constructor = SmokeTrail;
  Snow.prototype = Object.create(Phaser.State.prototype);
  Snow.prototype.constructor = Snow;
  TweenedEmitter.prototype = Object.create(Phaser.State.prototype);
  TweenedEmitter.prototype.constructor = TweenedEmitter;
  WhenParticlesCollide.prototype = Object.create(Phaser.State.prototype);
  WhenParticlesCollide.prototype.constructor = WhenParticlesCollide;
  WorldParticles.prototype = Object.create(Phaser.State.prototype);
  WorldParticles.prototype.constructor = WorldParticles;
  ZeroGravity.prototype = Object.create(Phaser.State.prototype);
  ZeroGravity.prototype.constructor = ZeroGravity;
  AddAnImage.prototype = Object.create(Phaser.State.prototype);
  AddAnImage.prototype.constructor = AddAnImage;
  AddASprite.prototype = Object.create(Phaser.State.prototype);
  AddASprite.prototype.constructor = AddASprite;
  AddSeveralSprites.prototype = Object.create(Phaser.State.prototype);
  AddSeveralSprites.prototype.constructor = AddSeveralSprites;
  AlignInRectangle.prototype = Object.create(Phaser.State.prototype);
  AlignInRectangle.prototype.constructor = AlignInRectangle;
  AlignMultipleSprites.prototype = Object.create(Phaser.State.prototype);
  AlignMultipleSprites.prototype.constructor = AlignMultipleSprites;
  AlignTextToSprite.prototype = Object.create(Phaser.State.prototype);
  AlignTextToSprite.prototype.constructor = AlignTextToSprite;
  AlignToRectangle.prototype = Object.create(Phaser.State.prototype);
  AlignToRectangle.prototype.constructor = AlignToRectangle;
  AlignToSprite.prototype = Object.create(Phaser.State.prototype);
  AlignToSprite.prototype.constructor = AlignToSprite;
  AlignWithinSprite.prototype = Object.create(Phaser.State.prototype);
  AlignWithinSprite.prototype.constructor = AlignWithinSprite;
  Anchor.prototype = Object.create(Phaser.State.prototype);
  Anchor.prototype.constructor = Anchor;
  ChildSprites.prototype = Object.create(Phaser.State.prototype);
  ChildSprites.prototype.constructor = ChildSprites;
  CollideWorldBounds_0.prototype = Object.create(Phaser.State.prototype);
  CollideWorldBounds_0.prototype.constructor = CollideWorldBounds_0;
  Destroy.prototype = Object.create(Phaser.State.prototype);
  Destroy.prototype.constructor = Destroy;
  DestroyTexture.prototype = Object.create(Phaser.State.prototype);
  DestroyTexture.prototype.constructor = DestroyTexture;
  DynamicCrop.prototype = Object.create(Phaser.State.prototype);
  DynamicCrop.prototype.constructor = DynamicCrop;
  FixedScale.prototype = Object.create(Phaser.State.prototype);
  FixedScale.prototype.constructor = FixedScale;
  HorizontalCrop.prototype = Object.create(Phaser.State.prototype);
  HorizontalCrop.prototype.constructor = HorizontalCrop;
  Mask.prototype = Object.create(Phaser.State.prototype);
  Mask.prototype.constructor = Mask;
  MoveASprite.prototype = Object.create(Phaser.State.prototype);
  MoveASprite.prototype.constructor = MoveASprite;
  MovementMask.prototype = Object.create(Phaser.State.prototype);
  MovementMask.prototype.constructor = MovementMask;
  OutOfBounds.prototype = Object.create(Phaser.State.prototype);
  OutOfBounds.prototype.constructor = OutOfBounds;
  OverlapTweenWithoutPhysics.prototype = Object.create(Phaser.State.prototype);
  OverlapTweenWithoutPhysics.prototype.constructor = OverlapTweenWithoutPhysics;
  OverlapWithoutPhysics.prototype = Object.create(Phaser.State.prototype);
  OverlapWithoutPhysics.prototype.constructor = OverlapWithoutPhysics;
  Pivot.prototype = Object.create(Phaser.State.prototype);
  Pivot.prototype.constructor = Pivot;
  Rope.prototype = Object.create(Phaser.State.prototype);
  Rope.prototype.constructor = Rope;
  RotateAndScale.prototype = Object.create(Phaser.State.prototype);
  RotateAndScale.prototype.constructor = RotateAndScale;
  RotatedAtlasFrameSupport.prototype = Object.create(Phaser.State.prototype);
  RotatedAtlasFrameSupport.prototype.constructor = RotatedAtlasFrameSupport;
  RotateSpriteAroundPoint.prototype = Object.create(Phaser.State.prototype);
  RotateSpriteAroundPoint.prototype.constructor = RotateSpriteAroundPoint;
  ScaleASprite.prototype = Object.create(Phaser.State.prototype);
  ScaleASprite.prototype.constructor = ScaleASprite;
  SharedSpriteTextures.prototype = Object.create(Phaser.State.prototype);
  SharedSpriteTextures.prototype.constructor = SharedSpriteTextures;
  SpriteBounds.prototype = Object.create(Phaser.State.prototype);
  SpriteBounds.prototype.constructor = SpriteBounds;
  SpriteDimensions.prototype = Object.create(Phaser.State.prototype);
  SpriteDimensions.prototype.constructor = SpriteDimensions;
  SpriteFromBitmapdata.prototype = Object.create(Phaser.State.prototype);
  SpriteFromBitmapdata.prototype.constructor = SpriteFromBitmapdata;
  SpriteGroupMask.prototype = Object.create(Phaser.State.prototype);
  SpriteGroupMask.prototype.constructor = SpriteGroupMask;
  SpriteRotation.prototype = Object.create(Phaser.State.prototype);
  SpriteRotation.prototype.constructor = SpriteRotation;
  Spritesheet.prototype = Object.create(Phaser.State.prototype);
  Spritesheet.prototype.constructor = Spritesheet;
  SpriteTint.prototype = Object.create(Phaser.State.prototype);
  SpriteTint.prototype.constructor = SpriteTint;
  VerticalCrop.prototype = Object.create(Phaser.State.prototype);
  VerticalCrop.prototype.constructor = VerticalCrop;
  BitmapFontCacheAsBitmap.prototype = Object.create(Phaser.State.prototype);
  BitmapFontCacheAsBitmap.prototype.constructor = BitmapFontCacheAsBitmap;
  BitmapfontDrag.prototype = Object.create(Phaser.State.prototype);
  BitmapfontDrag.prototype.constructor = BitmapfontDrag;
  BitmapFontFromTextureAtlas.prototype = Object.create(Phaser.State.prototype);
  BitmapFontFromTextureAtlas.prototype.constructor = BitmapFontFromTextureAtlas;
  BitmapFonts.prototype = Object.create(Phaser.State.prototype);
  BitmapFonts.prototype.constructor = BitmapFonts;
  BitmaptextAnchorX.prototype = Object.create(Phaser.State.prototype);
  BitmaptextAnchorX.prototype.constructor = BitmaptextAnchorX;
  BitmaptextAnchorY.prototype = Object.create(Phaser.State.prototype);
  BitmaptextAnchorY.prototype.constructor = BitmaptextAnchorY;
  BitmaptextMaxWidth.prototype = Object.create(Phaser.State.prototype);
  BitmaptextMaxWidth.prototype.constructor = BitmaptextMaxWidth;
  BitmaptextPurgeGlyphs.prototype = Object.create(Phaser.State.prototype);
  BitmaptextPurgeGlyphs.prototype.constructor = BitmaptextPurgeGlyphs;
  BitmaptextWithPhysics.prototype = Object.create(Phaser.State.prototype);
  BitmaptextWithPhysics.prototype.constructor = BitmaptextWithPhysics;
  BitmaptextWithPhysicsUpdating.prototype = Object.create(Phaser.State.prototype);
  BitmaptextWithPhysicsUpdating.prototype.constructor = BitmaptextWithPhysicsUpdating;
  CenterText.prototype = Object.create(Phaser.State.prototype);
  CenterText.prototype.constructor = CenterText;
  CenterTextOnSprite.prototype = Object.create(Phaser.State.prototype);
  CenterTextOnSprite.prototype.constructor = CenterTextOnSprite;
  CleanText.prototype = Object.create(Phaser.State.prototype);
  CleanText.prototype.constructor = CleanText;
  ColoredCharacters.prototype = Object.create(Phaser.State.prototype);
  ColoredCharacters.prototype.constructor = ColoredCharacters;
  DisplayTextWordByWord.prototype = Object.create(Phaser.State.prototype);
  DisplayTextWordByWord.prototype.constructor = DisplayTextWordByWord;
  DynamicTextShadow.prototype = Object.create(Phaser.State.prototype);
  DynamicTextShadow.prototype.constructor = DynamicTextShadow;
  HelloArial.prototype = Object.create(Phaser.State.prototype);
  HelloArial.prototype.constructor = HelloArial;
  KernOfDuty.prototype = Object.create(Phaser.State.prototype);
  KernOfDuty.prototype.constructor = KernOfDuty;
  Littera.prototype = Object.create(Phaser.State.prototype);
  Littera.prototype.constructor = Littera;
  RemoveText.prototype = Object.create(Phaser.State.prototype);
  RemoveText.prototype.constructor = RemoveText;
  RetroFont1.prototype = Object.create(Phaser.State.prototype);
  RetroFont1.prototype.constructor = RetroFont1;
  RetroFont2.prototype = Object.create(Phaser.State.prototype);
  RetroFont2.prototype.constructor = RetroFont2;
  SetPropertiesAfterCreation.prototype = Object.create(Phaser.State.prototype);
  SetPropertiesAfterCreation.prototype.constructor = SetPropertiesAfterCreation;
  TextBounds.prototype = Object.create(Phaser.State.prototype);
  TextBounds.prototype.constructor = TextBounds;
  TextEvents.prototype = Object.create(Phaser.State.prototype);
  TextEvents.prototype.constructor = TextEvents;
  TextGradient.prototype = Object.create(Phaser.State.prototype);
  TextGradient.prototype.constructor = TextGradient;
  TextLineSpacing.prototype = Object.create(Phaser.State.prototype);
  TextLineSpacing.prototype.constructor = TextLineSpacing;
  TextReflect.prototype = Object.create(Phaser.State.prototype);
  TextReflect.prototype.constructor = TextReflect;
  TextShadowStroke.prototype = Object.create(Phaser.State.prototype);
  TextShadowStroke.prototype.constructor = TextShadowStroke;
  TextStroke.prototype = Object.create(Phaser.State.prototype);
  TextStroke.prototype.constructor = TextStroke;
  TextStrokeWithColor.prototype = Object.create(Phaser.State.prototype);
  TextStrokeWithColor.prototype.constructor = TextStrokeWithColor;
  TextTabs.prototype = Object.create(Phaser.State.prototype);
  TextTabs.prototype.constructor = TextTabs;
  TextTabsFromArray.prototype = Object.create(Phaser.State.prototype);
  TextTabsFromArray.prototype.constructor = TextTabsFromArray;
  TextTint.prototype = Object.create(Phaser.State.prototype);
  TextTint.prototype.constructor = TextTint;
  TextWithPhysics.prototype = Object.create(Phaser.State.prototype);
  TextWithPhysics.prototype.constructor = TextWithPhysics;
  UpdateText.prototype = Object.create(Phaser.State.prototype);
  UpdateText.prototype.constructor = UpdateText;
  WordWrap.prototype = Object.create(Phaser.State.prototype);
  WordWrap.prototype.constructor = WordWrap;
  CreateFromArray.prototype = Object.create(Phaser.State.prototype);
  CreateFromArray.prototype.constructor = CreateFromArray;
  CreateFromObjects.prototype = Object.create(Phaser.State.prototype);
  CreateFromObjects.prototype.constructor = CreateFromObjects;
  CsvMap.prototype = Object.create(Phaser.State.prototype);
  CsvMap.prototype.constructor = CsvMap;
  CsvMapCollide.prototype = Object.create(Phaser.State.prototype);
  CsvMapCollide.prototype.constructor = CsvMapCollide;
  CsvMapWithP2.prototype = Object.create(Phaser.State.prototype);
  CsvMapWithP2.prototype.constructor = CsvMapWithP2;
  DualView.prototype = Object.create(Phaser.State.prototype);
  DualView.prototype.constructor = DualView;
  FeaturesTest.prototype = Object.create(Phaser.State.prototype);
  FeaturesTest.prototype.constructor = FeaturesTest;
  FillTiles.prototype = Object.create(Phaser.State.prototype);
  FillTiles.prototype.constructor = FillTiles;
  FlippedTiles.prototype = Object.create(Phaser.State.prototype);
  FlippedTiles.prototype.constructor = FlippedTiles;
  MapBounce.prototype = Object.create(Phaser.State.prototype);
  MapBounce.prototype.constructor = MapBounce;
  MapCollide.prototype = Object.create(Phaser.State.prototype);
  MapCollide.prototype.constructor = MapCollide;
  Mario.prototype = Object.create(Phaser.State.prototype);
  Mario.prototype.constructor = Mario;
  MultiLayer.prototype = Object.create(Phaser.State.prototype);
  MultiLayer.prototype.constructor = MultiLayer;
  MultiLayerMultiTileset.prototype = Object.create(Phaser.State.prototype);
  MultiLayerMultiTileset.prototype.constructor = MultiLayerMultiTileset;
  MultiMapCollide.prototype = Object.create(Phaser.State.prototype);
  MultiMapCollide.prototype.constructor = MultiMapCollide;
  MultiTileset.prototype = Object.create(Phaser.State.prototype);
  MultiTileset.prototype.constructor = MultiTileset;
  PaintTiles.prototype = Object.create(Phaser.State.prototype);
  PaintTiles.prototype.constructor = PaintTiles;
  RandomiseTiles.prototype = Object.create(Phaser.State.prototype);
  RandomiseTiles.prototype.constructor = RandomiseTiles;
  ReplaceTiles.prototype = Object.create(Phaser.State.prototype);
  ReplaceTiles.prototype.constructor = ReplaceTiles;
  ResizeMap.prototype = Object.create(Phaser.State.prototype);
  ResizeMap.prototype.constructor = ResizeMap;
  SciFly.prototype = Object.create(Phaser.State.prototype);
  SciFly.prototype.constructor = SciFly;
  ShuffleTiles.prototype = Object.create(Phaser.State.prototype);
  ShuffleTiles.prototype.constructor = ShuffleTiles;
  SwapTiles.prototype = Object.create(Phaser.State.prototype);
  SwapTiles.prototype.constructor = SwapTiles;
  TileCallbacks.prototype = Object.create(Phaser.State.prototype);
  TileCallbacks.prototype.constructor = TileCallbacks;
  TilemapRayCast.prototype = Object.create(Phaser.State.prototype);
  TilemapRayCast.prototype.constructor = TilemapRayCast;
  TileProperties.prototype = Object.create(Phaser.State.prototype);
  TileProperties.prototype.constructor = TileProperties;
  VerticalMap.prototype = Object.create(Phaser.State.prototype);
  VerticalMap.prototype.constructor = VerticalMap;
  AnimatedTilingSprite.prototype = Object.create(Phaser.State.prototype);
  AnimatedTilingSprite.prototype.constructor = AnimatedTilingSprite;
  CollidingWithTilingSprite.prototype = Object.create(Phaser.State.prototype);
  CollidingWithTilingSprite.prototype.constructor = CollidingWithTilingSprite;
  SpriteSheetTilingSprite.prototype = Object.create(Phaser.State.prototype);
  SpriteSheetTilingSprite.prototype.constructor = SpriteSheetTilingSprite;
  TileSpriteFromAnimatedSprite.prototype = Object.create(Phaser.State.prototype);
  TileSpriteFromAnimatedSprite.prototype.constructor = TileSpriteFromAnimatedSprite;
  TilingAtlasTrim.prototype = Object.create(Phaser.State.prototype);
  TilingAtlasTrim.prototype.constructor = TilingAtlasTrim;
  TilingSprite.prototype = Object.create(Phaser.State.prototype);
  TilingSprite.prototype.constructor = TilingSprite;
  TilingSpriteAtlas.prototype = Object.create(Phaser.State.prototype);
  TilingSpriteAtlas.prototype.constructor = TilingSpriteAtlas;
  TilingSpriteAtlas32x32.prototype = Object.create(Phaser.State.prototype);
  TilingSpriteAtlas32x32.prototype.constructor = TilingSpriteAtlas32x32;
  BasicLoopedEvent.prototype = Object.create(Phaser.State.prototype);
  BasicLoopedEvent.prototype.constructor = BasicLoopedEvent;
  BasicRepeatEvent.prototype = Object.create(Phaser.State.prototype);
  BasicRepeatEvent.prototype.constructor = BasicRepeatEvent;
  BasicTimedEvent.prototype = Object.create(Phaser.State.prototype);
  BasicTimedEvent.prototype.constructor = BasicTimedEvent;
  CustomTimer.prototype = Object.create(Phaser.State.prototype);
  CustomTimer.prototype.constructor = CustomTimer;
  ElapsedSeconds.prototype = Object.create(Phaser.State.prototype);
  ElapsedSeconds.prototype.constructor = ElapsedSeconds;
  MultipleTimers.prototype = Object.create(Phaser.State.prototype);
  MultipleTimers.prototype.constructor = MultipleTimers;
  RemoveEvent.prototype = Object.create(Phaser.State.prototype);
  RemoveEvent.prototype.constructor = RemoveEvent;
  TimedSlideshow.prototype = Object.create(Phaser.State.prototype);
  TimedSlideshow.prototype.constructor = TimedSlideshow;
  AlphaText.prototype = Object.create(Phaser.State.prototype);
  AlphaText.prototype.constructor = AlphaText;
  Bounce_0.prototype = Object.create(Phaser.State.prototype);
  Bounce_0.prototype.constructor = Bounce_0;
  Bubbles.prototype = Object.create(Phaser.State.prototype);
  Bubbles.prototype.constructor = Bubbles;
  ChainedTweens.prototype = Object.create(Phaser.State.prototype);
  ChainedTweens.prototype.constructor = ChainedTweens;
  CombinedTweens.prototype = Object.create(Phaser.State.prototype);
  CombinedTweens.prototype.constructor = CombinedTweens;
  Earthquake.prototype = Object.create(Phaser.State.prototype);
  Earthquake.prototype.constructor = Earthquake;
  Easing.prototype = Object.create(Phaser.State.prototype);
  Easing.prototype.constructor = Easing;
  EasingSpritesheets.prototype = Object.create(Phaser.State.prototype);
  EasingSpritesheets.prototype.constructor = EasingSpritesheets;
  FadingInASprite.prototype = Object.create(Phaser.State.prototype);
  FadingInASprite.prototype.constructor = FadingInASprite;
  GenerateData.prototype = Object.create(Phaser.State.prototype);
  GenerateData.prototype.constructor = GenerateData;
  Interpolation.prototype = Object.create(Phaser.State.prototype);
  Interpolation.prototype.constructor = Interpolation;
  PauseTween.prototype = Object.create(Phaser.State.prototype);
  PauseTween.prototype.constructor = PauseTween;
  Repeat.prototype = Object.create(Phaser.State.prototype);
  Repeat.prototype.constructor = Repeat;
  SingleTweenReuse.prototype = Object.create(Phaser.State.prototype);
  SingleTweenReuse.prototype.constructor = SingleTweenReuse;
  TweenArray.prototype = Object.create(Phaser.State.prototype);
  TweenArray.prototype.constructor = TweenArray;
  TweenDelay.prototype = Object.create(Phaser.State.prototype);
  TweenDelay.prototype.constructor = TweenDelay;
  TweenFrom.prototype = Object.create(Phaser.State.prototype);
  TweenFrom.prototype.constructor = TweenFrom;
  TweenLoopEvent.prototype = Object.create(Phaser.State.prototype);
  TweenLoopEvent.prototype.constructor = TweenLoopEvent;
  TweenRelative.prototype = Object.create(Phaser.State.prototype);
  TweenRelative.prototype.constructor = TweenRelative;
  TweenReuse.prototype = Object.create(Phaser.State.prototype);
  TweenReuse.prototype.constructor = TweenReuse;
  TweenRotation.prototype = Object.create(Phaser.State.prototype);
  TweenRotation.prototype.constructor = TweenRotation;
  TweenSeveralProperties.prototype = Object.create(Phaser.State.prototype);
  TweenSeveralProperties.prototype.constructor = TweenSeveralProperties;
  TweenTo.prototype = Object.create(Phaser.State.prototype);
  TweenTo.prototype.constructor = TweenTo;
  Yoyo.prototype = Object.create(Phaser.State.prototype);
  Yoyo.prototype.constructor = Yoyo;
  AlphaWebm.prototype = Object.create(Phaser.State.prototype);
  AlphaWebm.prototype.constructor = AlphaWebm;
  ChangeSource.prototype = Object.create(Phaser.State.prototype);
  ChangeSource.prototype.constructor = ChangeSource;
  DolbyDigitalPlus.prototype = Object.create(Phaser.State.prototype);
  DolbyDigitalPlus.prototype.constructor = DolbyDigitalPlus;
  LoadAsBlob.prototype = Object.create(Phaser.State.prototype);
  LoadAsBlob.prototype.constructor = LoadAsBlob;
  MultipleVideos.prototype = Object.create(Phaser.State.prototype);
  MultipleVideos.prototype.constructor = MultipleVideos;
  PlayVideo.prototype = Object.create(Phaser.State.prototype);
  PlayVideo.prototype.constructor = PlayVideo;
  SnapshotBlendMode.prototype = Object.create(Phaser.State.prototype);
  SnapshotBlendMode.prototype.constructor = SnapshotBlendMode;
  SpritesSharingVideo.prototype = Object.create(Phaser.State.prototype);
  SpritesSharingVideo.prototype.constructor = SpritesSharingVideo;
  TakeSnapshotFromStream.prototype = Object.create(Phaser.State.prototype);
  TakeSnapshotFromStream.prototype.constructor = TakeSnapshotFromStream;
  VideoStream.prototype = Object.create(Phaser.State.prototype);
  VideoStream.prototype.constructor = VideoStream;
  Asteroids.prototype = Object.create(Phaser.State.prototype);
  Asteroids.prototype.constructor = Asteroids;
  AsteroidsBulletWrap.prototype = Object.create(Phaser.State.prototype);
  AsteroidsBulletWrap.prototype.constructor = AsteroidsBulletWrap;
  Autofire.prototype = Object.create(Phaser.State.prototype);
  Autofire.prototype.constructor = Autofire;
  BulletAngleVariance.prototype = Object.create(Phaser.State.prototype);
  BulletAngleVariance.prototype.constructor = BulletAngleVariance;
  BulletFrameCycle.prototype = Object.create(Phaser.State.prototype);
  BulletFrameCycle.prototype.constructor = BulletFrameCycle;
  BulletSpeedVariance.prototype = Object.create(Phaser.State.prototype);
  BulletSpeedVariance.prototype.constructor = BulletSpeedVariance;
  FireMany.prototype = Object.create(Phaser.State.prototype);
  FireMany.prototype.constructor = FireMany;
  FireManyFromTrackedSprite.prototype = Object.create(Phaser.State.prototype);
  FireManyFromTrackedSprite.prototype.constructor = FireManyFromTrackedSprite;
  FireManyWithVariance.prototype = Object.create(Phaser.State.prototype);
  FireManyWithVariance.prototype.constructor = FireManyWithVariance;
  FireOffsetPosition.prototype = Object.create(Phaser.State.prototype);
  FireOffsetPosition.prototype.constructor = FireOffsetPosition;
  FireRate.prototype = Object.create(Phaser.State.prototype);
  FireRate.prototype.constructor = FireRate;
  MultipleBullets.prototype = Object.create(Phaser.State.prototype);
  MultipleBullets.prototype.constructor = MultipleBullets;
  SingleBullet.prototype = Object.create(Phaser.State.prototype);
  SingleBullet.prototype.constructor = SingleBullet;
  FixedToCamera_0.prototype = Object.create(Phaser.State.prototype);
  FixedToCamera_0.prototype.constructor = FixedToCamera_0;
  MoveAroundWorld.prototype = Object.create(Phaser.State.prototype);
  MoveAroundWorld.prototype.constructor = MoveAroundWorld;
  WorldWrap.prototype = Object.create(Phaser.State.prototype);
  WorldWrap.prototype.constructor = WorldWrap;
  var Math_0;
  function main(args) {
    new ExamplesWeb(new ExamplesConfig());
  }
  function gameMain() {
    var game = initKoala(GameConfig(void 0, gameProperties_getInstance().screenWidth, gameProperties_getInstance().screenHeight, Phaser.AUTO, 'gameDiv', void 0, void 0, void 0, void 0, new MainState()));
  }
  function gameProperties() {
    gameProperties_instance = this;
    this.screenWidth = 800.0;
    this.screenHeight = 600.0;
  }
  gameProperties.$metadata$ = {
    type: Kotlin.TYPE.OBJECT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'gameProperties',
    baseClasses: []
  };
  var gameProperties_instance = null;
  function gameProperties_getInstance() {
    if (gameProperties_instance === null) {
      gameProperties_instance = new gameProperties();
    }
    return gameProperties_instance;
  }
  function Assets() {
    Assets_instance = this;
    this.panda = new Asset('koala', 'assets/panda.png');
  }
  Assets.$metadata$ = {
    type: Kotlin.TYPE.OBJECT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Assets',
    baseClasses: []
  };
  var Assets_instance = null;
  function Assets_getInstance() {
    if (Assets_instance === null) {
      Assets_instance = new Assets();
    }
    return Assets_instance;
  }
  function Panda(x, y) {
    Sprite.call(this, x, y, Assets_getInstance().panda);
    this.anchor.set(0.5, 0.5);
  }
  Panda.prototype.update = function () {
    this.angle = this.angle + 5;
  };
  Panda.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Panda',
    baseClasses: [Sprite]
  };
  function MainState() {
    Phaser.State.call(this);
    this.key_left$delegate = lazy(MainState$key_left$lambda(this));
    this.key_right$delegate = lazy(MainState$key_right$lambda(this));
    this.key_thrust$delegate = lazy(MainState$key_thrust$lambda(this));
  }
  Object.defineProperty(MainState.prototype, 'keyboard', {
    get: function () {
      return this.game.input.keyboard;
    }
  });
  Object.defineProperty(MainState.prototype, 'key_left', {
    get: function () {
      var $receiver = this.key_left$delegate;
      new Kotlin.PropertyMetadata('key_left');
      return $receiver.value;
    }
  });
  Object.defineProperty(MainState.prototype, 'key_right', {
    get: function () {
      var $receiver = this.key_right$delegate;
      new Kotlin.PropertyMetadata('key_right');
      return $receiver.value;
    }
  });
  Object.defineProperty(MainState.prototype, 'key_thrust', {
    get: function () {
      var $receiver = this.key_thrust$delegate;
      new Kotlin.PropertyMetadata('key_thrust');
      return $receiver.value;
    }
  });
  MainState.prototype.preload = function () {
    image(this.load, Assets_getInstance().panda);
    this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
    this.game.scale.pageAlignHorizontally = true;
    this.game.scale.pageAlignVertically = true;
    this.game.scale.refresh();
  };
  MainState.prototype.create = function () {
    this.game.add.text(10, 10, 'Hello World!', TextStyle('40px Arial', void 0, void 0, void 0, void 0, void 0, 'red'));
    this.layer1 = this.game.add.group();
    this.layer2 = this.game.add.group();
    this.layer2.scale.set(2, 2);
    for (var i = 1; i <= 10; i++) {
      this.layer1.addChild(new Panda(Math_0.random() * gameProperties_getInstance().screenWidth, Math_0.random() * gameProperties_getInstance().screenHeight));
    }
    for (var i_0 = 1; i_0 <= 10; i_0++) {
      var tmp$ = this.layer2;
      var $receiver = new Panda(Math_0.random() * gameProperties_getInstance().screenWidth, Math_0.random() * gameProperties_getInstance().screenHeight);
      $receiver.tint = 65280;
      tmp$.addChild($receiver);
    }
    var $receiver_0 = new Panda(Math_0.random() * gameProperties_getInstance().screenWidth, Math_0.random() * gameProperties_getInstance().screenHeight);
    $receiver_0.tint = 255;
    var p = $receiver_0;
  };
  MainState.prototype.update = function () {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.layer1;
    tmp$_0 = tmp$.x, tmp$_1 = tmp$_0, tmp$.x = tmp$_0 + 1, tmp$_1;
    this.layer2.x = this.layer2.x + 2;
    if (this.layer1.x > 100) {
      start(this.game.state, new OtherState(), void 0, void 0, []);
    }
  };
  function MainState$key_left$lambda(this$MainState) {
    return function () {
      return this$MainState.keyboard.addKey(Phaser.Keyboard.LEFT);
    };
  }
  function MainState$key_right$lambda(this$MainState) {
    return function () {
      return this$MainState.keyboard.addKey(Phaser.Keyboard.RIGHT);
    };
  }
  function MainState$key_thrust$lambda(this$MainState) {
    return function () {
      return this$MainState.keyboard.addKey(Phaser.Keyboard.UP);
    };
  }
  MainState.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MainState',
    baseClasses: []
  };
  function OtherState() {
    Phaser.State.call(this);
    this.key_left$delegate = lazy(OtherState$key_left$lambda(this));
    this.key_right$delegate = lazy(OtherState$key_right$lambda(this));
    this.key_thrust$delegate = lazy(OtherState$key_thrust$lambda(this));
  }
  Object.defineProperty(OtherState.prototype, 'keyboard', {
    get: function () {
      return this.game.input.keyboard;
    }
  });
  Object.defineProperty(OtherState.prototype, 'key_left', {
    get: function () {
      var $receiver = this.key_left$delegate;
      new Kotlin.PropertyMetadata('key_left');
      return $receiver.value;
    }
  });
  Object.defineProperty(OtherState.prototype, 'key_right', {
    get: function () {
      var $receiver = this.key_right$delegate;
      new Kotlin.PropertyMetadata('key_right');
      return $receiver.value;
    }
  });
  Object.defineProperty(OtherState.prototype, 'key_thrust', {
    get: function () {
      var $receiver = this.key_thrust$delegate;
      new Kotlin.PropertyMetadata('key_thrust');
      return $receiver.value;
    }
  });
  OtherState.prototype.preload = function () {
    image(this.load, Assets_getInstance().panda);
  };
  OtherState.prototype.create = function () {
    this.game.add.text(10, 10, 'Hello World!', TextStyle('40px Arial', void 0, void 0, void 0, void 0, void 0, 'red'));
    var $receiver = new Panda(Math_0.random() * gameProperties_getInstance().screenWidth, Math_0.random() * gameProperties_getInstance().screenHeight);
    $receiver.tint = 255;
    $receiver.scale.set(4, 4);
    var p = $receiver;
    this.game.add.existing(p);
  };
  function OtherState$key_left$lambda(this$OtherState) {
    return function () {
      return this$OtherState.keyboard.addKey(Phaser.Keyboard.LEFT);
    };
  }
  function OtherState$key_right$lambda(this$OtherState) {
    return function () {
      return this$OtherState.keyboard.addKey(Phaser.Keyboard.RIGHT);
    };
  }
  function OtherState$key_thrust$lambda(this$OtherState) {
    return function () {
      return this$OtherState.keyboard.addKey(Phaser.Keyboard.UP);
    };
  }
  OtherState.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'OtherState',
    baseClasses: []
  };
  function exampleProperties() {
    exampleProperties_instance = this;
    this.screenWidth = 800.0;
    this.screenHeight = 600.0;
  }
  exampleProperties.$metadata$ = {
    type: Kotlin.TYPE.OBJECT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'exampleProperties',
    baseClasses: []
  };
  var exampleProperties_instance = null;
  function exampleProperties_getInstance() {
    if (exampleProperties_instance === null) {
      exampleProperties_instance = new exampleProperties();
    }
    return exampleProperties_instance;
  }
  function runExample(state) {
    return initKoala(GameConfig(void 0, exampleProperties_getInstance().screenWidth, exampleProperties_getInstance().screenHeight, Phaser.AUTO, 'gameDiv', void 0, void 0, void 0, void 0, state));
  }
  var phaserGame;
  function get_phaserGame() {
    return phaserGame.getValue_dsk1ci$(this, new Kotlin.PropertyMetadata('phaserGame'));
  }
  function set_phaserGame(phaserGame_0) {
    phaserGame.setValue_w32e13$(this, new Kotlin.PropertyMetadata('phaserGame'), phaserGame_0);
  }
  function Sprite(x, y, key) {
    Phaser.Sprite.call(this, get_phaserGame(), x, y, key.name);
  }
  Sprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Sprite',
    baseClasses: []
  };
  function initKoala(config) {
    set_phaserGame(new Phaser.Game(config.width, config.height, config.renderer, config.parent, config.state, config.transparent, config.antialias, config.physicsConfig));
    return get_phaserGame();
  }
  function T$2() {
  }
  T$2.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'T$2',
    baseClasses: []
  };
  function RGBColor() {
  }
  RGBColor.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RGBColor',
    baseClasses: []
  };
  function ColorComponents() {
  }
  ColorComponents.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ColorComponents',
    baseClasses: [RGBColor]
  };
  function CursorKeys() {
  }
  CursorKeys.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CursorKeys',
    baseClasses: []
  };
  function SinCosGenerator() {
  }
  SinCosGenerator.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SinCosGenerator',
    baseClasses: []
  };
  function WheelEventProxy() {
  }
  WheelEventProxy.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'WheelEventProxy',
    baseClasses: []
  };
  function T$9() {
  }
  T$9.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'T$9',
    baseClasses: []
  };
  function T$10() {
  }
  T$10.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'T$10',
    baseClasses: []
  };
  function T$11() {
  }
  T$11.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'T$11',
    baseClasses: []
  };
  function T$12() {
  }
  T$12.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'T$12',
    baseClasses: []
  };
  function PhaserTextStyle() {
  }
  PhaserTextStyle.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PhaserTextStyle',
    baseClasses: []
  };
  function T$13() {
  }
  T$13.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'T$13',
    baseClasses: []
  };
  function T$14() {
  }
  T$14.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'T$14',
    baseClasses: []
  };
  function T$15() {
  }
  T$15.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'T$15',
    baseClasses: []
  };
  var kPI2;
  var kPI;
  function sin($receiver, value) {
    return Math.sin(value);
  }
  function cos($receiver, value) {
    return Math.cos(value);
  }
  function get_PI2($receiver) {
    return kPI2;
  }
  function get_PI($receiver) {
    return kPI;
  }
  function round($receiver, value) {
    return Math.round(value);
  }
  function floor($receiver, value) {
    return Math.floor(value);
  }
  function atan2($receiver, x, y) {
    return Math.atan2(x, y);
  }
  function sqrt($receiver, value) {
    return Math.sqrt(value);
  }
  function abs($receiver, value) {
    return Math.abs(value);
  }
  function random($receiver) {
    return Math.random();
  }
  function crop($receiver, rect, copy) {
    if (copy === void 0)
      copy = null;
    $receiver.crop(rect, copy);
  }
  function destroy($receiver, destroyChildren, unknown) {
    if (destroyChildren === void 0)
      destroyChildren = null;
    if (unknown === void 0)
      unknown = null;
    $receiver.destroy(destroyChildren, unknown);
  }
  function revive($receiver, health) {
    if (health === void 0)
      health = 100;
    return $receiver.revive(health);
  }
  function reset($receiver, x, y, health) {
    if (x === void 0)
      x = null;
    if (y === void 0)
      y = null;
    if (health === void 0)
      health = null;
    return $receiver.reset(x, y, health);
  }
  function setScaleMinMax($receiver, minX, minY, maxX, maxY) {
    if (minX === void 0)
      minX = null;
    if (minY === void 0)
      minY = null;
    if (maxX === void 0)
      maxX = null;
    if (maxY === void 0)
      maxY = null;
    $receiver.setScaleMinMax(minX, minY, maxX, maxY);
  }
  function setTexture($receiver, texture) {
    $receiver.setTexture(texture, undefined);
  }
  function setTexture_0($receiver, texture) {
    $receiver.setTexture(texture, undefined);
  }
  function setTexture_1($receiver, texture, destroyBase) {
    $receiver.setTexture(texture, destroyBase);
  }
  function setTexture_2($receiver, texture, destroyBase) {
    $receiver.setTexture(texture, destroyBase);
  }
  function getBounds($receiver) {
    return $receiver.getBounds(null);
  }
  function getBounds_0($receiver, targetCoordinateSpace) {
    return $receiver.getBounds(targetCoordinateSpace);
  }
  function getBounds_1($receiver, targetCoordinateSpace) {
    return $receiver.getBounds(targetCoordinateSpace);
  }
  function alignTo($receiver, container, position, offsetX, offsetY) {
    if (position === void 0)
      position = null;
    if (offsetX === void 0)
      offsetX = null;
    if (offsetY === void 0)
      offsetY = null;
    return $receiver.alignTo(container, position, offsetX, offsetY);
  }
  function enable($receiver, spr, children) {
    if (children === void 0)
      children = undefined;
    $receiver.enable(spr, children);
  }
  function enable_0($receiver, array, children) {
    if (children === void 0)
      children = undefined;
    $receiver.enable(array, children);
  }
  function enable_1($receiver, spr, children) {
    if (children === void 0)
      children = undefined;
    $receiver.enable(spr, children);
  }
  function enable_2($receiver, array, children) {
    if (children === void 0)
      children = undefined;
    $receiver.enable(array, children);
  }
  function enable_3($receiver, spr, children) {
    if (children === void 0)
      children = undefined;
    $receiver.enable(spr, children);
  }
  function enable_4($receiver, array, children) {
    if (children === void 0)
      children = undefined;
    $receiver.enable(array, children);
  }
  function enable_5($receiver, group, children) {
    if (children === void 0)
      children = undefined;
    $receiver.enable(group, children);
  }
  function enable_6($receiver, array, children) {
    if (children === void 0)
      children = undefined;
    $receiver.enable(array, children);
  }
  function enable_7($receiver, spr, children) {
    if (children === void 0)
      children = undefined;
    $receiver.enable(spr, children);
  }
  function enable_8($receiver, array, children) {
    if (children === void 0)
      children = undefined;
    $receiver.enable(array, children);
  }
  function Asset(name, url) {
    this.name = name;
    this.url = url;
  }
  Asset.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Asset',
    baseClasses: []
  };
  Asset.prototype.component1 = function () {
    return this.name;
  };
  Asset.prototype.component2 = function () {
    return this.url;
  };
  Asset.prototype.copy_puj7f4$ = function (name, url) {
    return new Asset(name === void 0 ? this.name : name, url === void 0 ? this.url : url);
  };
  Asset.prototype.toString = function () {
    return 'Asset(name=' + Kotlin.toString(this.name) + (', url=' + Kotlin.toString(this.url)) + ')';
  };
  Asset.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.url) | 0;
    return result;
  };
  Asset.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.name, other.name) && Kotlin.equals(this.url, other.url)))));
  };
  function start($receiver, state, clearWorld, clearCache, args) {
    if (clearWorld === void 0)
      clearWorld = null;
    if (clearCache === void 0)
      clearCache = null;
    var stateID = get_js(Kotlin.getKClassFromExpression(state)).name;
    $receiver.add(stateID, state, false);
    $receiver.start(stateID);
  }
  function GameStateType(name) {
    var tmp$;
    return Kotlin.isType(tmp$ = name, Object) ? tmp$ : Kotlin.throwCCE();
  }
  function GameState(game) {
  }
  GameState.prototype.preload = function () {
  };
  GameState.prototype.create = function () {
  };
  GameState.prototype.update = function () {
  };
  GameState.prototype.render = function () {
  };
  GameState.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GameState',
    baseClasses: []
  };
  function TextStyle(font, fontStyle, fontVariant, fontWeight, fontSize, backgroundColor, fill, align, boundsAlignH, boundsAlignV, stroke, strokeThickness, wordWrap, wordWrapWidth, tabs) {
    if (font === void 0)
      font = null;
    if (fontStyle === void 0)
      fontStyle = null;
    if (fontVariant === void 0)
      fontVariant = null;
    if (fontWeight === void 0)
      fontWeight = null;
    if (fontSize === void 0)
      fontSize = null;
    if (backgroundColor === void 0)
      backgroundColor = null;
    if (fill === void 0)
      fill = null;
    if (align === void 0)
      align = null;
    if (boundsAlignH === void 0)
      boundsAlignH = null;
    if (boundsAlignV === void 0)
      boundsAlignV = null;
    if (stroke === void 0)
      stroke = null;
    if (strokeThickness === void 0)
      strokeThickness = null;
    if (wordWrap === void 0)
      wordWrap = null;
    if (wordWrapWidth === void 0)
      wordWrapWidth = null;
    if (tabs === void 0)
      tabs = null;
    var out = {};
    if (font != null)
      out.font = font;
    if (fontStyle != null)
      out.fontStyle = fontStyle;
    if (fontVariant != null)
      out.fontVariant = fontVariant;
    if (fontWeight != null)
      out.fontWeight = fontWeight;
    if (fontSize != null)
      out.fontSize = fontSize;
    if (backgroundColor != null)
      out.backgroundColor = backgroundColor;
    if (fill != null)
      out.fill = fill;
    if (align != null)
      out.align = align;
    if (boundsAlignH != null)
      out.boundsAlignH = boundsAlignH;
    if (boundsAlignV != null)
      out.boundsAlignV = boundsAlignV;
    if (stroke != null)
      out.stroke = stroke;
    if (strokeThickness != null)
      out.strokeThickness = strokeThickness;
    if (wordWrap != null)
      out.wordWrap = wordWrap;
    if (wordWrapWidth != null)
      out.wordWrapWidth = wordWrapWidth;
    if (tabs != null)
      out.tabs = tabs;
    return out;
  }
  function GameConfig(enableDebug, width, height, renderer, parent, transparent, antialias, resolution, physicsConfig, state) {
    if (enableDebug === void 0)
      enableDebug = null;
    if (width === void 0)
      width = null;
    if (height === void 0)
      height = null;
    if (renderer === void 0)
      renderer = null;
    if (parent === void 0)
      parent = null;
    if (transparent === void 0)
      transparent = null;
    if (antialias === void 0)
      antialias = null;
    if (resolution === void 0)
      resolution = null;
    if (physicsConfig === void 0)
      physicsConfig = null;
    if (state === void 0)
      state = null;
    var out = {};
    if (enableDebug != null)
      out.enableDebug = enableDebug;
    if (width != null)
      out.width = width;
    if (height != null)
      out.height = height;
    if (renderer != null)
      out.renderer = renderer;
    if (parent != null)
      out.parent = parent;
    if (transparent != null)
      out.transparent = transparent;
    if (antialias != null)
      out.antialias = antialias;
    if (resolution != null)
      out.resolution = resolution;
    if (physicsConfig != null)
      out.physicsConfig = physicsConfig;
    if (state != null)
      out.state = state;
    return out;
  }
  function IGameConfig() {
  }
  IGameConfig.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'IGameConfig',
    baseClasses: []
  };
  function ContactMaterialOptions(friction, restitution, stiffness, relaxation, frictionStiffness, frictionRelaxation, surfaceVelocity) {
    if (friction === void 0)
      friction = null;
    if (restitution === void 0)
      restitution = null;
    if (stiffness === void 0)
      stiffness = null;
    if (relaxation === void 0)
      relaxation = null;
    if (frictionStiffness === void 0)
      frictionStiffness = null;
    if (frictionRelaxation === void 0)
      frictionRelaxation = null;
    if (surfaceVelocity === void 0)
      surfaceVelocity = null;
    var out = {};
    if (friction != null)
      out.friction = friction;
    if (restitution != null)
      out.restitution = restitution;
    if (stiffness != null)
      out.stiffness = stiffness;
    if (relaxation != null)
      out.relaxation = relaxation;
    if (frictionStiffness != null)
      out.frictionStiffness = frictionStiffness;
    if (frictionRelaxation != null)
      out.frictionRelaxation = frictionRelaxation;
    if (surfaceVelocity != null)
      out.surfaceVelocity = surfaceVelocity;
    return out;
  }
  function IContactMaterialOptions() {
  }
  IContactMaterialOptions.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'IContactMaterialOptions',
    baseClasses: []
  };
  function image($receiver, asset) {
    return $receiver.image(asset.name, asset.url);
  }
  function images($receiver, assets) {
    var tmp$;
    for (tmp$ = 0; tmp$ !== assets.length; ++tmp$) {
      var element = assets[tmp$];
      $receiver.image(element.name, element.url);
    }
  }
  function images_0($receiver, assets) {
    var tmp$;
    tmp$ = assets.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      $receiver.image(element.name, element.url);
    }
  }
  function sound($receiver, asset) {
    return $receiver.audio(asset.name, asset.url);
  }
  function sounds($receiver, assets) {
    var tmp$;
    for (tmp$ = 0; tmp$ !== assets.length; ++tmp$) {
      var element = assets[tmp$];
      $receiver.audio(element.name, element.url);
    }
  }
  function sounds_0($receiver, assets) {
    var tmp$;
    tmp$ = assets.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      $receiver.audio(element.name, element.url);
    }
  }
  function DirectionObj() {
  }
  DirectionObj.$metadata$ = {
    type: Kotlin.TYPE.TRAIT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DirectionObj',
    baseClasses: []
  };
  function ExamplesConfig(minExample, maxExample) {
    if (minExample === void 0)
      minExample = 0;
    if (maxExample === void 0)
      maxExample = 568;
    this.minExample = minExample;
    this.maxExample = maxExample;
  }
  ExamplesConfig.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ExamplesConfig',
    baseClasses: []
  };
  ExamplesConfig.prototype.component1 = function () {
    return this.minExample;
  };
  ExamplesConfig.prototype.component2 = function () {
    return this.maxExample;
  };
  ExamplesConfig.prototype.copy_vux9f0$ = function (minExample, maxExample) {
    return new ExamplesConfig(minExample === void 0 ? this.minExample : minExample, maxExample === void 0 ? this.maxExample : maxExample);
  };
  ExamplesConfig.prototype.toString = function () {
    return 'ExamplesConfig(minExample=' + Kotlin.toString(this.minExample) + (', maxExample=' + Kotlin.toString(this.maxExample)) + ')';
  };
  ExamplesConfig.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.minExample) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxExample) | 0;
    return result;
  };
  ExamplesConfig.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.minExample, other.minExample) && Kotlin.equals(this.maxExample, other.maxExample)))));
  };
  function getExampleState(exampleToRun) {
    if (exampleToRun === 0)
      return new AnimationEvents();
    else if (exampleToRun === 1)
      return new ChangeFrame();
    else if (exampleToRun === 2)
      return new ChangeTextureOnClick();
    else if (exampleToRun === 3)
      return new DestroyAnimation();
    else if (exampleToRun === 4)
      return new DynamicAnimation();
    else if (exampleToRun === 5)
      return new FrameUpdate();
    else if (exampleToRun === 6)
      return new GroupCreation();
    else if (exampleToRun === 7)
      return new LoadTexture();
    else if (exampleToRun === 8)
      return new LocalJsonObject();
    else if (exampleToRun === 9)
      return new LoopedAnimation();
    else if (exampleToRun === 10)
      return new MultipleAnims();
    else if (exampleToRun === 11)
      return new SpriteSheet();
    else if (exampleToRun === 12)
      return new StarlingAtlas();
    else if (exampleToRun === 13)
      return new StopAnimation();
    else if (exampleToRun === 14)
      return new TwoFrameTest();
    else if (exampleToRun === 15)
      return new AccelerateToPointer();
    else if (exampleToRun === 16)
      return new AngleBetween();
    else if (exampleToRun === 17)
      return new AngleToPointer();
    else if (exampleToRun === 18)
      return new AngularAcceleration();
    else if (exampleToRun === 19)
      return new AngularVelocity();
    else if (exampleToRun === 20)
      return new AsteroidsMovement();
    else if (exampleToRun === 21)
      return new BodyDebug();
    else if (exampleToRun === 22)
      return new BodyEnable();
    else if (exampleToRun === 23)
      return new BodyScale();
    else if (exampleToRun === 24)
      return new Bounce();
    else if (exampleToRun === 25)
      return new BounceAccelerator();
    else if (exampleToRun === 26)
      return new BounceKnock();
    else if (exampleToRun === 27)
      return new BounceWithGravity();
    else if (exampleToRun === 28)
      return new BoundingBox();
    else if (exampleToRun === 29)
      return new CircleBody();
    else if (exampleToRun === 30)
      return new DirectBodyMovement();
    else if (exampleToRun === 31)
      return new DistanceToPointer();
    else if (exampleToRun === 32)
      return new GlobalPause();
    else if (exampleToRun === 33)
      return new Gravity();
    else if (exampleToRun === 34)
      return new GravityAndDrag();
    else if (exampleToRun === 35)
      return new GroupVsGroup();
    else if (exampleToRun === 36)
      return new GroupVsSelf();
    else if (exampleToRun === 37)
      return new LargerBoundingBox();
    else if (exampleToRun === 38)
      return new Launcher();
    else if (exampleToRun === 39)
      return new LauncherFollow();
    else if (exampleToRun === 40)
      return new LauncherFollowWorld();
    else if (exampleToRun === 41)
      return new MassVelocityTest();
    else if (exampleToRun === 42)
      return new MoveOverDistance();
    else if (exampleToRun === 43)
      return new MoveToPointer();
    else if (exampleToRun === 44)
      return new MoveTowardsObject();
    else if (exampleToRun === 45)
      return new MultiAngleToPointer();
    else if (exampleToRun === 46)
      return new Multiball();
    else if (exampleToRun === 47)
      return new NestedGroup();
    else if (exampleToRun === 48)
      return new OffsetBoundingBox();
    else if (exampleToRun === 49)
      return new OnCollideEvent();
    else if (exampleToRun === 50)
      return new OneWayCollision();
    else if (exampleToRun === 51)
      return new PlatformerBasics();
    else if (exampleToRun === 52)
      return new PlatformerTight();
    else if (exampleToRun === 53)
      return new ProcessCallback();
    else if (exampleToRun === 54)
      return new QuadtreeCollisionInfos();
    else if (exampleToRun === 55)
      return new RotateToSprite();
    else if (exampleToRun === 56)
      return new ShipTrail();
    else if (exampleToRun === 57)
      return new ShootThePointer();
    else if (exampleToRun === 58)
      return new Snake();
    else if (exampleToRun === 59)
      return new SortDirection();
    else if (exampleToRun === 60)
      return new SortDirectionVertical();
    else if (exampleToRun === 61)
      return new SpriteVsGroup();
    else if (exampleToRun === 62)
      return new SpriteVsSprite();
    else if (exampleToRun === 63)
      return new VerticalCollision();
    else if (exampleToRun === 64)
      return new WorldBoundsEvent();
    else if (exampleToRun === 65)
      return new AudioSpriteDuration();
    else if (exampleToRun === 66)
      return new AudioSpriteExample();
    else if (exampleToRun === 67)
      return new AudioSpriteJson();
    else if (exampleToRun === 68)
      return new FadeIn();
    else if (exampleToRun === 69)
      return new Ios();
    else if (exampleToRun === 70)
      return new Loop();
    else if (exampleToRun === 71)
      return new PauseAndResume();
    else if (exampleToRun === 72)
      return new PauseAndResumeMarker();
    else if (exampleToRun === 73)
      return new PlayMusic();
    else if (exampleToRun === 74)
      return new RemoveSound();
    else if (exampleToRun === 75)
      return new RestartSound();
    else if (exampleToRun === 76)
      return new SoundComplete();
    else if (exampleToRun === 77)
      return new E01LoadAnImage();
    else if (exampleToRun === 78)
      return new E02ClickOnAnImage();
    else if (exampleToRun === 79)
      return new E03MoveAnImage();
    else if (exampleToRun === 80)
      return new E04ImageFollowInput();
    else if (exampleToRun === 81)
      return new E05LoadAnAnimation();
    else if (exampleToRun === 82)
      return new E06RenderText();
    else if (exampleToRun === 83)
      return new E07TweenAnImage();
    else if (exampleToRun === 84)
      return new E08SpriteRotation();
    else if (exampleToRun === 85)
      return new AlphaMask();
    else if (exampleToRun === 86)
      return new Atlas();
    else if (exampleToRun === 87)
      return new CopyBitmapdata();
    else if (exampleToRun === 88)
      return new CopyPixels();
    else if (exampleToRun === 89)
      return new DrawAtlasFrame();
    else if (exampleToRun === 90)
      return new DrawGroup();
    else if (exampleToRun === 91)
      return new DrawSprite();
    else if (exampleToRun === 92)
      return new GetPixel();
    else if (exampleToRun === 93)
      return new ReplaceColor();
    else if (exampleToRun === 94)
      return new SetHsl();
    else if (exampleToRun === 95)
      return new SpriteTexture();
    else if (exampleToRun === 96)
      return new TextExample();
    else if (exampleToRun === 97)
      return new Tint();
    else if (exampleToRun === 98)
      return new ActionOnClick();
    else if (exampleToRun === 99)
      return new ButtonInAGroup();
    else if (exampleToRun === 100)
      return new ButtonScale();
    else if (exampleToRun === 101)
      return new ButtonUsingTextureAtlas();
    else if (exampleToRun === 102)
      return new CancelButton();
    else if (exampleToRun === 103)
      return new ChangingTheFrames();
    else if (exampleToRun === 104)
      return new DisableButtonOnClick();
    else if (exampleToRun === 105)
      return new RotatedButtons();
    else if (exampleToRun === 106)
      return new BasicFollow();
    else if (exampleToRun === 107)
      return new CameraCull();
    else if (exampleToRun === 108)
      return new CameraFade();
    else if (exampleToRun === 109)
      return new CameraFlash();
    else if (exampleToRun === 110)
      return new CameraLerp();
    else if (exampleToRun === 111)
      return new CameraShake();
    else if (exampleToRun === 112)
      return new CameraView();
    else if (exampleToRun === 113)
      return new Deadzone();
    else if (exampleToRun === 114)
      return new FixedToCamera();
    else if (exampleToRun === 115)
      return new FollowStyles();
    else if (exampleToRun === 116)
      return new MassCameraCull();
    else if (exampleToRun === 117)
      return new MovingTheCamera();
    else if (exampleToRun === 118)
      return new SmoothFollow();
    else if (exampleToRun === 119)
      return new WorldSprite();
    else if (exampleToRun === 120)
      return new ZoomingTheCamera();
    else if (exampleToRun === 121)
      return new GenerateSprite();
    else if (exampleToRun === 122)
      return new MoreSprites();
    else if (exampleToRun === 123)
      return new RatAttack();
    else if (exampleToRun === 124)
      return new DebugCamera();
    else if (exampleToRun === 125)
      return new DebugDisplay();
    else if (exampleToRun === 126)
      return new DebugDraw();
    else if (exampleToRun === 127)
      return new DebugInput();
    else if (exampleToRun === 128)
      return new DebugPhysics();
    else if (exampleToRun === 129)
      return new DebugSprite();
    else if (exampleToRun === 130)
      return new AtariIntro();
    else if (exampleToRun === 131)
      return new FontFromBitmapdata();
    else if (exampleToRun === 132)
      return new RasterCarpet();
    else if (exampleToRun === 133)
      return new RasterFont();
    else if (exampleToRun === 134)
      return new Springy();
    else if (exampleToRun === 135)
      return new Starfield();
    else if (exampleToRun === 136)
      return new UnlimitedBobs();
    else if (exampleToRun === 137)
      return new Arc();
    else if (exampleToRun === 138)
      return new ArcadePhysicsGraphicsShape();
    else if (exampleToRun === 139)
      return new ArcDetails();
    else if (exampleToRun === 140)
      return new CircleExample();
    else if (exampleToRun === 141)
      return new Ellipse();
    else if (exampleToRun === 142)
      return new ExtractMask();
    else if (exampleToRun === 143)
      return new Fullscreen();
    else if (exampleToRun === 144)
      return new FullscreenButtons();
    else if (exampleToRun === 145)
      return new GameBackgroundColor();
    else if (exampleToRun === 146)
      return new GenerateTextureFromGraphics();
    else if (exampleToRun === 147)
      return new Gradient();
    else if (exampleToRun === 148)
      return new Graphics2();
    else if (exampleToRun === 149)
      return new GraphicsChild();
    else if (exampleToRun === 150)
      return new GraphicsExample();
    else if (exampleToRun === 151)
      return new GraphicsInputEvents();
    else if (exampleToRun === 152)
      return new GraphicsPerf();
    else if (exampleToRun === 153)
      return new HsvColorWheel();
    else if (exampleToRun === 154)
      return new PixiRenderTexture();
    else if (exampleToRun === 155)
      return new RenderCrisp();
    else if (exampleToRun === 156)
      return new RenderTextureImage();
    else if (exampleToRun === 157)
      return new RenderTextureMirror();
    else if (exampleToRun === 158)
      return new RenderTextureRotation();
    else if (exampleToRun === 159)
      return new RenderTextureTilemap();
    else if (exampleToRun === 160)
      return new RenderTextureToTilesprite();
    else if (exampleToRun === 161)
      return new RenderTextureTrail();
    else if (exampleToRun === 162)
      return new RoundPixels();
    else if (exampleToRun === 163)
      return new SpriteShadow();
    else if (exampleToRun === 164)
      return new SpritesheetFromGraphics();
    else if (exampleToRun === 165)
      return new TintSprite();
    else if (exampleToRun === 166)
      return new TintSpriteFrame();
    else if (exampleToRun === 167)
      return new Viewport();
    else if (exampleToRun === 168)
      return new Bacteria();
    else if (exampleToRun === 169)
      return new Basic();
    else if (exampleToRun === 170)
      return new BlueDots();
    else if (exampleToRun === 171)
      return new Blur();
    else if (exampleToRun === 172)
      return new CheckerWave();
    else if (exampleToRun === 173)
      return new Dalek();
    else if (exampleToRun === 174)
      return new Dotwave();
    else if (exampleToRun === 175)
      return new Dotwave2();
    else if (exampleToRun === 176)
      return new Fire();
    else if (exampleToRun === 177)
      return new Fireball();
    else if (exampleToRun === 178)
      return new Gray();
    else if (exampleToRun === 179)
      return new Kaleidoscope();
    else if (exampleToRun === 180)
      return new Lightbeams();
    else if (exampleToRun === 181)
      return new Lightwave();
    else if (exampleToRun === 182)
      return new Marble();
    else if (exampleToRun === 183)
      return new MouseRay();
    else if (exampleToRun === 184)
      return new MouseWave();
    else if (exampleToRun === 185)
      return new MultipleShaders();
    else if (exampleToRun === 186)
      return new Pixelate();
    else if (exampleToRun === 187)
      return new PixiFilter();
    else if (exampleToRun === 188)
      return new PlaneDeformation();
    else if (exampleToRun === 189)
      return new Plasma();
    else if (exampleToRun === 190)
      return new RainbowBars();
    else if (exampleToRun === 191)
      return new RetroPlasma();
    else if (exampleToRun === 192)
      return new Rotozoomer();
    else if (exampleToRun === 193)
      return new Seascape();
    else if (exampleToRun === 194)
      return new Sinewave();
    else if (exampleToRun === 195)
      return new SinewaveFixedBase();
    else if (exampleToRun === 196)
      return new SphereTracer();
    else if (exampleToRun === 197)
      return new SpiralGalaxy();
    else if (exampleToRun === 198)
      return new StarfieldFilterExample();
    else if (exampleToRun === 199)
      return new Starlight();
    else if (exampleToRun === 200)
      return new Tunnel();
    else if (exampleToRun === 201)
      return new Undersea();
    else if (exampleToRun === 202)
      return new VduNoise();
    else if (exampleToRun === 203)
      return new VerticalBars();
    else if (exampleToRun === 204)
      return new Vortex();
    else if (exampleToRun === 205)
      return new WorldFilter();
    else if (exampleToRun === 206)
      return new Breakout();
    else if (exampleToRun === 207)
      return new Defender();
    else if (exampleToRun === 208)
      return new Gemmatch();
    else if (exampleToRun === 209)
      return new Invaders();
    else if (exampleToRun === 210)
      return new MatchingPairs();
    else if (exampleToRun === 211)
      return new Simon();
    else if (exampleToRun === 212)
      return new SlidingPuzzle();
    else if (exampleToRun === 213)
      return new Starstruck();
    else if (exampleToRun === 214)
      return new Tanks();
    else if (exampleToRun === 215)
      return new Yahtzee();
    else if (exampleToRun === 216)
      return new CenterLine();
    else if (exampleToRun === 217)
      return new Centroid();
    else if (exampleToRun === 218)
      return new CircleExample_0();
    else if (exampleToRun === 219)
      return new CircleRandomPoint();
    else if (exampleToRun === 220)
      return new EllipseRandomPoint();
    else if (exampleToRun === 221)
      return new LineBounds();
    else if (exampleToRun === 222)
      return new LineExample();
    else if (exampleToRun === 223)
      return new LineIntersection();
    else if (exampleToRun === 224)
      return new LineMidpoint();
    else if (exampleToRun === 225)
      return new LineRandomPoint();
    else if (exampleToRun === 226)
      return new LineReflection();
    else if (exampleToRun === 227)
      return new PlayingWithPoints();
    else if (exampleToRun === 228)
      return new PolygonContains();
    else if (exampleToRun === 229)
      return new PolygonExample();
    else if (exampleToRun === 230)
      return new QuadtreeExample();
    else if (exampleToRun === 231)
      return new RectangleExample();
    else if (exampleToRun === 232)
      return new RectangleGetPoint();
    else if (exampleToRun === 233)
      return new RectangleIntersects();
    else if (exampleToRun === 234)
      return new RectangleRandomPoint();
    else if (exampleToRun === 235)
      return new RotateLine();
    else if (exampleToRun === 236)
      return new RotatePoint();
    else if (exampleToRun === 237)
      return new AddASpriteToGroup();
    else if (exampleToRun === 238)
      return new AlignFramesToGrid();
    else if (exampleToRun === 239)
      return new AlignSpritesToGrid();
    else if (exampleToRun === 240)
      return new BringAGroupToTop();
    else if (exampleToRun === 241)
      return new CallAll();
    else if (exampleToRun === 242)
      return new CallAllAnimations();
    else if (exampleToRun === 243)
      return new CallAllInput();
    else if (exampleToRun === 244)
      return new CreateGroup();
    else if (exampleToRun === 245)
      return new CreateIfNull();
    else if (exampleToRun === 246)
      return new CreateSpriteInAGroup();
    else if (exampleToRun === 247)
      return new CreateThumbnail();
    else if (exampleToRun === 248)
      return new DepthSort();
    else if (exampleToRun === 249)
      return new DisplayOrder();
    else if (exampleToRun === 250)
      return new FilterByProperty();
    else if (exampleToRun === 251)
      return new ForEach();
    else if (exampleToRun === 252)
      return new GetFirst();
    else if (exampleToRun === 253)
      return new GetFirstDead();
    else if (exampleToRun === 254)
      return new GroupAsLayer();
    else if (exampleToRun === 255)
      return new GroupBounds();
    else if (exampleToRun === 256)
      return new GroupScale();
    else if (exampleToRun === 257)
      return new GroupTransform();
    else if (exampleToRun === 258)
      return new GroupTransformRotate();
    else if (exampleToRun === 259)
      return new GroupTransformTween();
    else if (exampleToRun === 260)
      return new HasProperty();
    else if (exampleToRun === 261)
      return new MoveToAnotherGroup();
    else if (exampleToRun === 262)
      return new NestedGroups();
    else if (exampleToRun === 263)
      return new Recycling();
    else if (exampleToRun === 264)
      return new Remove();
    else if (exampleToRun === 265)
      return new RemoveBetween();
    else if (exampleToRun === 266)
      return new RemoveCheck();
    else if (exampleToRun === 267)
      return new Replace();
    else if (exampleToRun === 268)
      return new SetAll();
    else if (exampleToRun === 269)
      return new Sort();
    else if (exampleToRun === 270)
      return new SubGroupsGroupLength();
    else if (exampleToRun === 271)
      return new SwapChildrenInAGroup();
    else if (exampleToRun === 272)
      return new BoundsRect();
    else if (exampleToRun === 273)
      return new BoundsSprite();
    else if (exampleToRun === 274)
      return new BringAChildToTop();
    else if (exampleToRun === 275)
      return new ButtonDestroy();
    else if (exampleToRun === 276)
      return new ButtonOpenPopup();
    else if (exampleToRun === 277)
      return new CursorKeyMovement();
    else if (exampleToRun === 278)
      return new DownDuration();
    else if (exampleToRun === 279)
      return new Drag();
    else if (exampleToRun === 280)
      return new DragEventParameters();
    else if (exampleToRun === 281)
      return new DragScaledGroup();
    else if (exampleToRun === 282)
      return new DragSeveralSprites();
    else if (exampleToRun === 283)
      return new DragUpdate();
    else if (exampleToRun === 284)
      return new DragUpdateMultiple();
    else if (exampleToRun === 285)
      return new DropLimitation();
    else if (exampleToRun === 286)
      return new FollowMouse();
    else if (exampleToRun === 287)
      return new Gamepad();
    else if (exampleToRun === 288)
      return new GamepadAnalogButton();
    else if (exampleToRun === 289)
      return new GamepadButtons();
    else if (exampleToRun === 290)
      return new GamepadMultiplePads();
    else if (exampleToRun === 291)
      return new GameScale();
    else if (exampleToRun === 292)
      return new GroupInputEvents();
    else if (exampleToRun === 293)
      return new IgnoreChildInput();
    else if (exampleToRun === 294)
      return new InputChildPriority();
    else if (exampleToRun === 295)
      return new InputEnableGroup();
    else if (exampleToRun === 296)
      return new InputOrder();
    else if (exampleToRun === 297)
      return new InputPriority();
    else if (exampleToRun === 298)
      return new Keyboard();
    else if (exampleToRun === 299)
      return new KeyboardHotkeys();
    else if (exampleToRun === 300)
      return new KeyboardJustpressed();
    else if (exampleToRun === 301)
      return new KeyExample();
    else if (exampleToRun === 302)
      return new MotionLockHorizontal();
    else if (exampleToRun === 303)
      return new MotionLockVertical();
    else if (exampleToRun === 304)
      return new MouseButtons();
    else if (exampleToRun === 305)
      return new MultiTouch();
    else if (exampleToRun === 306)
      return new OnTap();
    else if (exampleToRun === 307)
      return new OutOfGame();
    else if (exampleToRun === 308)
      return new OutOfGameMouseUp();
    else if (exampleToRun === 309)
      return new OverrideDefaultControls();
    else if (exampleToRun === 310)
      return new PixelPerfectClickDetection();
    else if (exampleToRun === 311)
      return new PixelpickAtlas();
    else if (exampleToRun === 312)
      return new PixelpickAtlasScaled();
    else if (exampleToRun === 313)
      return new PixelpickScrollingEffect();
    else if (exampleToRun === 314)
      return new PixelpickSpritesheet();
    else if (exampleToRun === 315)
      return new PointerOver();
    else if (exampleToRun === 316)
      return new SnapOnDrag();
    else if (exampleToRun === 317)
      return new TouchEvents();
    else if (exampleToRun === 318)
      return new WordInput();
    else if (exampleToRun === 319)
      return new AssetPack();
    else if (exampleToRun === 320)
      return new CheckCache();
    else if (exampleToRun === 321)
      return new LoadAudio();
    else if (exampleToRun === 322)
      return new LoadBitmapFont();
    else if (exampleToRun === 323)
      return new LoadImage();
    else if (exampleToRun === 324)
      return new LoadJsonFile();
    else if (exampleToRun === 325)
      return new LoadSpritesheet();
    else if (exampleToRun === 326)
      return new LoadStarlingAtlas();
    else if (exampleToRun === 327)
      return new LoadTextFile();
    else if (exampleToRun === 328)
      return new LoadTextureAtlas();
    else if (exampleToRun === 329)
      return new LoadTilemapJson();
    else if (exampleToRun === 330)
      return new LoadVideo();
    else if (exampleToRun === 331)
      return new LoadXmlFile();
    else if (exampleToRun === 332)
      return new PickImagesFromCache();
    else if (exampleToRun === 333)
      return new AntialiasGame();
    else if (exampleToRun === 334)
      return new Device();
    else if (exampleToRun === 335)
      return new GameConfig_0();
    else if (exampleToRun === 336)
      return new Net();
    else if (exampleToRun === 337)
      return new PauseMenu();
    else if (exampleToRun === 338)
      return new RandomGenerators();
    else if (exampleToRun === 339)
      return new RepeatableRandomNumbers();
    else if (exampleToRun === 340)
      return new Template();
    else if (exampleToRun === 341)
      return new WeightedPick();
    else if (exampleToRun === 342)
      return new Aabb();
    else if (exampleToRun === 343)
      return new AccelerateToObject();
    else if (exampleToRun === 344)
      return new BasicMovement();
    else if (exampleToRun === 345)
      return new BodyClick();
    else if (exampleToRun === 346)
      return new BodyDebug_0();
    else if (exampleToRun === 347)
      return new CollideWorldBounds();
    else if (exampleToRun === 348)
      return new CollisionGroups();
    else if (exampleToRun === 349)
      return new ContactEvents();
    else if (exampleToRun === 350)
      return new ContactMaterial();
    else if (exampleToRun === 351)
      return new DistanceConstraint();
    else if (exampleToRun === 352)
      return new GearConstraint();
    else if (exampleToRun === 353)
      return new Gravity_0();
    else if (exampleToRun === 354)
      return new GravityScale();
    else if (exampleToRun === 355)
      return new ImpactEvents();
    else if (exampleToRun === 356)
      return new KillAndRevive();
    else if (exampleToRun === 357)
      return new KinematicBody();
    else if (exampleToRun === 358)
      return new LoadPolygon1();
    else if (exampleToRun === 359)
      return new LoadPolygon2();
    else if (exampleToRun === 360)
      return new LoadPolygon3();
    else if (exampleToRun === 361)
      return new LockConstraint();
    else if (exampleToRun === 362)
      return new MouseSpring();
    else if (exampleToRun === 363)
      return new MovementConstraint();
    else if (exampleToRun === 364)
      return new PhysicsGroup();
    else if (exampleToRun === 365)
      return new PickUpObject();
    else if (exampleToRun === 366)
      return new PlatformerMaterial();
    else if (exampleToRun === 367)
      return new PostbroadphaseCallback();
    else if (exampleToRun === 368)
      return new PrismaticConstraint();
    else if (exampleToRun === 369)
      return new RemoveSpring();
    else if (exampleToRun === 370)
      return new RevoluteConstraintExample();
    else if (exampleToRun === 371)
      return new Springs();
    else if (exampleToRun === 372)
      return new StaticBody();
    else if (exampleToRun === 373)
      return new Thrust();
    else if (exampleToRun === 374)
      return new ThrustLeftRight();
    else if (exampleToRun === 375)
      return new TilemapExample();
    else if (exampleToRun === 376)
      return new TilemapGravity();
    else if (exampleToRun === 377)
      return new TilespriteExample();
    else if (exampleToRun === 378)
      return new WorldBoundary();
    else if (exampleToRun === 379)
      return new WorldMove();
    else if (exampleToRun === 380)
      return new AutoScale();
    else if (exampleToRun === 381)
      return new ClickBurst();
    else if (exampleToRun === 382)
      return new Collision();
    else if (exampleToRun === 383)
      return new DestroyEmitter();
    else if (exampleToRun === 384)
      return new DiamondBurst();
    else if (exampleToRun === 385)
      return new EmitterWidth();
    else if (exampleToRun === 386)
      return new Firestarter();
    else if (exampleToRun === 387)
      return new Flow();
    else if (exampleToRun === 388)
      return new Glass();
    else if (exampleToRun === 389)
      return new NoRotation();
    else if (exampleToRun === 390)
      return new ParticleAlpha();
    else if (exampleToRun === 391)
      return new ParticleScale();
    else if (exampleToRun === 392)
      return new ParticlesVsPlatforms();
    else if (exampleToRun === 393)
      return new Rain();
    else if (exampleToRun === 394)
      return new RandomSprite();
    else if (exampleToRun === 395)
      return new SmokeTrail();
    else if (exampleToRun === 396)
      return new Snow();
    else if (exampleToRun === 397)
      return new TweenedEmitter();
    else if (exampleToRun === 398)
      return new WhenParticlesCollide();
    else if (exampleToRun === 399)
      return new WorldParticles();
    else if (exampleToRun === 400)
      return new ZeroGravity();
    else if (exampleToRun === 401)
      return new AddAnImage();
    else if (exampleToRun === 402)
      return new AddASprite();
    else if (exampleToRun === 403)
      return new AddSeveralSprites();
    else if (exampleToRun === 404)
      return new AlignInRectangle();
    else if (exampleToRun === 405)
      return new AlignMultipleSprites();
    else if (exampleToRun === 406)
      return new AlignTextToSprite();
    else if (exampleToRun === 407)
      return new AlignToRectangle();
    else if (exampleToRun === 408)
      return new AlignToSprite();
    else if (exampleToRun === 409)
      return new AlignWithinSprite();
    else if (exampleToRun === 410)
      return new Anchor();
    else if (exampleToRun === 411)
      return new ChildSprites();
    else if (exampleToRun === 412)
      return new CollideWorldBounds_0();
    else if (exampleToRun === 413)
      return new Destroy();
    else if (exampleToRun === 414)
      return new DestroyTexture();
    else if (exampleToRun === 415)
      return new DynamicCrop();
    else if (exampleToRun === 416)
      return new FixedScale();
    else if (exampleToRun === 417)
      return new HorizontalCrop();
    else if (exampleToRun === 418)
      return new Mask();
    else if (exampleToRun === 419)
      return new MoveASprite();
    else if (exampleToRun === 420)
      return new MovementMask();
    else if (exampleToRun === 421)
      return new OutOfBounds();
    else if (exampleToRun === 422)
      return new OverlapTweenWithoutPhysics();
    else if (exampleToRun === 423)
      return new OverlapWithoutPhysics();
    else if (exampleToRun === 424)
      return new Pivot();
    else if (exampleToRun === 425)
      return new Rope();
    else if (exampleToRun === 426)
      return new RotateAndScale();
    else if (exampleToRun === 427)
      return new RotatedAtlasFrameSupport();
    else if (exampleToRun === 428)
      return new RotateSpriteAroundPoint();
    else if (exampleToRun === 429)
      return new ScaleASprite();
    else if (exampleToRun === 430)
      return new SharedSpriteTextures();
    else if (exampleToRun === 431)
      return new SpriteBounds();
    else if (exampleToRun === 432)
      return new SpriteDimensions();
    else if (exampleToRun === 433)
      return new SpriteFromBitmapdata();
    else if (exampleToRun === 434)
      return new SpriteGroupMask();
    else if (exampleToRun === 435)
      return new SpriteRotation();
    else if (exampleToRun === 436)
      return new Spritesheet();
    else if (exampleToRun === 437)
      return new SpriteTint();
    else if (exampleToRun === 438)
      return new VerticalCrop();
    else if (exampleToRun === 439)
      return new BitmapFontCacheAsBitmap();
    else if (exampleToRun === 440)
      return new BitmapfontDrag();
    else if (exampleToRun === 441)
      return new BitmapFontFromTextureAtlas();
    else if (exampleToRun === 442)
      return new BitmapFonts();
    else if (exampleToRun === 443)
      return new BitmaptextAnchorX();
    else if (exampleToRun === 444)
      return new BitmaptextAnchorY();
    else if (exampleToRun === 445)
      return new BitmaptextMaxWidth();
    else if (exampleToRun === 446)
      return new BitmaptextPurgeGlyphs();
    else if (exampleToRun === 447)
      return new BitmaptextWithPhysics();
    else if (exampleToRun === 448)
      return new BitmaptextWithPhysicsUpdating();
    else if (exampleToRun === 449)
      return new CenterText();
    else if (exampleToRun === 450)
      return new CenterTextOnSprite();
    else if (exampleToRun === 451)
      return new CleanText();
    else if (exampleToRun === 452)
      return new ColoredCharacters();
    else if (exampleToRun === 453)
      return new DisplayTextWordByWord();
    else if (exampleToRun === 454)
      return new DynamicTextShadow();
    else if (exampleToRun === 455)
      return new HelloArial();
    else if (exampleToRun === 456)
      return new KernOfDuty();
    else if (exampleToRun === 457)
      return new Littera();
    else if (exampleToRun === 458)
      return new RemoveText();
    else if (exampleToRun === 459)
      return new RetroFont1();
    else if (exampleToRun === 460)
      return new RetroFont2();
    else if (exampleToRun === 461)
      return new SetPropertiesAfterCreation();
    else if (exampleToRun === 462)
      return new TextBounds();
    else if (exampleToRun === 463)
      return new TextEvents();
    else if (exampleToRun === 464)
      return new TextGradient();
    else if (exampleToRun === 465)
      return new TextLineSpacing();
    else if (exampleToRun === 466)
      return new TextReflect();
    else if (exampleToRun === 467)
      return new TextShadowStroke();
    else if (exampleToRun === 468)
      return new TextStroke();
    else if (exampleToRun === 469)
      return new TextStrokeWithColor();
    else if (exampleToRun === 470)
      return new TextTabs();
    else if (exampleToRun === 471)
      return new TextTabsFromArray();
    else if (exampleToRun === 472)
      return new TextTint();
    else if (exampleToRun === 473)
      return new TextWithPhysics();
    else if (exampleToRun === 474)
      return new UpdateText();
    else if (exampleToRun === 475)
      return new WordWrap();
    else if (exampleToRun === 476)
      return new CreateFromArray();
    else if (exampleToRun === 477)
      return new CreateFromObjects();
    else if (exampleToRun === 478)
      return new CsvMap();
    else if (exampleToRun === 479)
      return new CsvMapCollide();
    else if (exampleToRun === 480)
      return new CsvMapWithP2();
    else if (exampleToRun === 481)
      return new DualView();
    else if (exampleToRun === 482)
      return new FeaturesTest();
    else if (exampleToRun === 483)
      return new FillTiles();
    else if (exampleToRun === 484)
      return new FlippedTiles();
    else if (exampleToRun === 485)
      return new MapBounce();
    else if (exampleToRun === 486)
      return new MapCollide();
    else if (exampleToRun === 487)
      return new Mario();
    else if (exampleToRun === 488)
      return new MultiLayer();
    else if (exampleToRun === 489)
      return new MultiLayerMultiTileset();
    else if (exampleToRun === 490)
      return new MultiMapCollide();
    else if (exampleToRun === 491)
      return new MultiTileset();
    else if (exampleToRun === 492)
      return new PaintTiles();
    else if (exampleToRun === 493)
      return new RandomiseTiles();
    else if (exampleToRun === 494)
      return new ReplaceTiles();
    else if (exampleToRun === 495)
      return new ResizeMap();
    else if (exampleToRun === 496)
      return new SciFly();
    else if (exampleToRun === 497)
      return new ShuffleTiles();
    else if (exampleToRun === 498)
      return new SwapTiles();
    else if (exampleToRun === 499)
      return new TileCallbacks();
    else if (exampleToRun === 500)
      return new TilemapRayCast();
    else if (exampleToRun === 501)
      return new TileProperties();
    else if (exampleToRun === 502)
      return new VerticalMap();
    else if (exampleToRun === 503)
      return new AnimatedTilingSprite();
    else if (exampleToRun === 504)
      return new CollidingWithTilingSprite();
    else if (exampleToRun === 505)
      return new SpriteSheetTilingSprite();
    else if (exampleToRun === 506)
      return new TileSpriteFromAnimatedSprite();
    else if (exampleToRun === 507)
      return new TilingAtlasTrim();
    else if (exampleToRun === 508)
      return new TilingSprite();
    else if (exampleToRun === 509)
      return new TilingSpriteAtlas();
    else if (exampleToRun === 510)
      return new TilingSpriteAtlas32x32();
    else if (exampleToRun === 511)
      return new BasicLoopedEvent();
    else if (exampleToRun === 512)
      return new BasicRepeatEvent();
    else if (exampleToRun === 513)
      return new BasicTimedEvent();
    else if (exampleToRun === 514)
      return new CustomTimer();
    else if (exampleToRun === 515)
      return new ElapsedSeconds();
    else if (exampleToRun === 516)
      return new MultipleTimers();
    else if (exampleToRun === 517)
      return new RemoveEvent();
    else if (exampleToRun === 518)
      return new TimedSlideshow();
    else if (exampleToRun === 519)
      return new AlphaText();
    else if (exampleToRun === 520)
      return new Bounce_0();
    else if (exampleToRun === 521)
      return new Bubbles();
    else if (exampleToRun === 522)
      return new ChainedTweens();
    else if (exampleToRun === 523)
      return new CombinedTweens();
    else if (exampleToRun === 524)
      return new Earthquake();
    else if (exampleToRun === 525)
      return new Easing();
    else if (exampleToRun === 526)
      return new EasingSpritesheets();
    else if (exampleToRun === 527)
      return new FadingInASprite();
    else if (exampleToRun === 528)
      return new GenerateData();
    else if (exampleToRun === 529)
      return new Interpolation();
    else if (exampleToRun === 530)
      return new PauseTween();
    else if (exampleToRun === 531)
      return new Repeat();
    else if (exampleToRun === 532)
      return new SingleTweenReuse();
    else if (exampleToRun === 533)
      return new TweenArray();
    else if (exampleToRun === 534)
      return new TweenDelay();
    else if (exampleToRun === 535)
      return new TweenFrom();
    else if (exampleToRun === 536)
      return new TweenLoopEvent();
    else if (exampleToRun === 537)
      return new TweenRelative();
    else if (exampleToRun === 538)
      return new TweenReuse();
    else if (exampleToRun === 539)
      return new TweenRotation();
    else if (exampleToRun === 540)
      return new TweenSeveralProperties();
    else if (exampleToRun === 541)
      return new TweenTo();
    else if (exampleToRun === 542)
      return new Yoyo();
    else if (exampleToRun === 543)
      return new AlphaWebm();
    else if (exampleToRun === 544)
      return new ChangeSource();
    else if (exampleToRun === 545)
      return new DolbyDigitalPlus();
    else if (exampleToRun === 546)
      return new LoadAsBlob();
    else if (exampleToRun === 547)
      return new MultipleVideos();
    else if (exampleToRun === 548)
      return new PlayVideo();
    else if (exampleToRun === 549)
      return new SnapshotBlendMode();
    else if (exampleToRun === 550)
      return new SpritesSharingVideo();
    else if (exampleToRun === 551)
      return new TakeSnapshotFromStream();
    else if (exampleToRun === 552)
      return new VideoStream();
    else if (exampleToRun === 553)
      return new Asteroids();
    else if (exampleToRun === 554)
      return new AsteroidsBulletWrap();
    else if (exampleToRun === 555)
      return new Autofire();
    else if (exampleToRun === 556)
      return new BulletAngleVariance();
    else if (exampleToRun === 557)
      return new BulletFrameCycle();
    else if (exampleToRun === 558)
      return new BulletSpeedVariance();
    else if (exampleToRun === 559)
      return new FireMany();
    else if (exampleToRun === 560)
      return new FireManyFromTrackedSprite();
    else if (exampleToRun === 561)
      return new FireManyWithVariance();
    else if (exampleToRun === 562)
      return new FireOffsetPosition();
    else if (exampleToRun === 563)
      return new FireRate();
    else if (exampleToRun === 564)
      return new MultipleBullets();
    else if (exampleToRun === 565)
      return new SingleBullet();
    else if (exampleToRun === 566)
      return new FixedToCamera_0();
    else if (exampleToRun === 567)
      return new MoveAroundWorld();
    else if (exampleToRun === 568)
      return new WorldWrap();
    else
      return new E01LoadAnImage();
  }
  function getExampleRenderer(exampleToRun) {
    if (exampleToRun === 0)
      return Phaser.AUTO;
    else if (exampleToRun === 1)
      return Phaser.AUTO;
    else if (exampleToRun === 2)
      return Phaser.CANVAS;
    else if (exampleToRun === 3)
      return Phaser.CANVAS;
    else if (exampleToRun === 4)
      return Phaser.AUTO;
    else if (exampleToRun === 5)
      return Phaser.CANVAS;
    else if (exampleToRun === 6)
      return Phaser.AUTO;
    else if (exampleToRun === 7)
      return Phaser.CANVAS;
    else if (exampleToRun === 8)
      return Phaser.AUTO;
    else if (exampleToRun === 9)
      return Phaser.AUTO;
    else if (exampleToRun === 10)
      return Phaser.AUTO;
    else if (exampleToRun === 11)
      return Phaser.CANVAS;
    else if (exampleToRun === 12)
      return Phaser.AUTO;
    else if (exampleToRun === 13)
      return Phaser.AUTO;
    else if (exampleToRun === 14)
      return Phaser.CANVAS;
    else if (exampleToRun === 15)
      return Phaser.AUTO;
    else if (exampleToRun === 16)
      return Phaser.CANVAS;
    else if (exampleToRun === 17)
      return Phaser.CANVAS;
    else if (exampleToRun === 18)
      return Phaser.CANVAS;
    else if (exampleToRun === 19)
      return Phaser.CANVAS;
    else if (exampleToRun === 20)
      return Phaser.CANVAS;
    else if (exampleToRun === 21)
      return Phaser.AUTO;
    else if (exampleToRun === 22)
      return Phaser.CANVAS;
    else if (exampleToRun === 23)
      return Phaser.CANVAS;
    else if (exampleToRun === 24)
      return Phaser.CANVAS;
    else if (exampleToRun === 25)
      return Phaser.CANVAS;
    else if (exampleToRun === 26)
      return Phaser.CANVAS;
    else if (exampleToRun === 27)
      return Phaser.CANVAS;
    else if (exampleToRun === 28)
      return Phaser.CANVAS;
    else if (exampleToRun === 29)
      return Phaser.CANVAS;
    else if (exampleToRun === 30)
      return Phaser.CANVAS;
    else if (exampleToRun === 31)
      return Phaser.CANVAS;
    else if (exampleToRun === 32)
      return Phaser.CANVAS;
    else if (exampleToRun === 33)
      return Phaser.AUTO;
    else if (exampleToRun === 34)
      return Phaser.AUTO;
    else if (exampleToRun === 35)
      return Phaser.CANVAS;
    else if (exampleToRun === 36)
      return Phaser.AUTO;
    else if (exampleToRun === 37)
      return Phaser.CANVAS;
    else if (exampleToRun === 38)
      return Phaser.CANVAS;
    else if (exampleToRun === 39)
      return Phaser.CANVAS;
    else if (exampleToRun === 40)
      return Phaser.CANVAS;
    else if (exampleToRun === 41)
      return Phaser.CANVAS;
    else if (exampleToRun === 42)
      return Phaser.CANVAS;
    else if (exampleToRun === 43)
      return Phaser.CANVAS;
    else if (exampleToRun === 44)
      return Phaser.AUTO;
    else if (exampleToRun === 45)
      return Phaser.CANVAS;
    else if (exampleToRun === 46)
      return Phaser.AUTO;
    else if (exampleToRun === 47)
      return Phaser.AUTO;
    else if (exampleToRun === 48)
      return Phaser.CANVAS;
    else if (exampleToRun === 49)
      return Phaser.AUTO;
    else if (exampleToRun === 50)
      return Phaser.CANVAS;
    else if (exampleToRun === 51)
      return Phaser.CANVAS;
    else if (exampleToRun === 52)
      return Phaser.CANVAS;
    else if (exampleToRun === 53)
      return Phaser.CANVAS;
    else if (exampleToRun === 54)
      return Phaser.CANVAS;
    else if (exampleToRun === 55)
      return Phaser.CANVAS;
    else if (exampleToRun === 56)
      return Phaser.CANVAS;
    else if (exampleToRun === 57)
      return Phaser.CANVAS;
    else if (exampleToRun === 58)
      return Phaser.CANVAS;
    else if (exampleToRun === 59)
      return Phaser.AUTO;
    else if (exampleToRun === 60)
      return Phaser.AUTO;
    else if (exampleToRun === 61)
      return Phaser.AUTO;
    else if (exampleToRun === 62)
      return Phaser.CANVAS;
    else if (exampleToRun === 63)
      return Phaser.AUTO;
    else if (exampleToRun === 64)
      return Phaser.AUTO;
    else if (exampleToRun === 65)
      return Phaser.CANVAS;
    else if (exampleToRun === 66)
      return Phaser.CANVAS;
    else if (exampleToRun === 67)
      return Phaser.CANVAS;
    else if (exampleToRun === 68)
      return Phaser.CANVAS;
    else if (exampleToRun === 69)
      return Phaser.CANVAS;
    else if (exampleToRun === 70)
      return Phaser.AUTO;
    else if (exampleToRun === 71)
      return Phaser.CANVAS;
    else if (exampleToRun === 72)
      return Phaser.CANVAS;
    else if (exampleToRun === 73)
      return Phaser.CANVAS;
    else if (exampleToRun === 74)
      return Phaser.CANVAS;
    else if (exampleToRun === 75)
      return Phaser.CANVAS;
    else if (exampleToRun === 76)
      return Phaser.AUTO;
    else if (exampleToRun === 77)
      return Phaser.AUTO;
    else if (exampleToRun === 78)
      return Phaser.AUTO;
    else if (exampleToRun === 79)
      return Phaser.AUTO;
    else if (exampleToRun === 80)
      return Phaser.AUTO;
    else if (exampleToRun === 81)
      return Phaser.AUTO;
    else if (exampleToRun === 82)
      return Phaser.CANVAS;
    else if (exampleToRun === 83)
      return Phaser.CANVAS;
    else if (exampleToRun === 84)
      return Phaser.CANVAS;
    else if (exampleToRun === 85)
      return Phaser.AUTO;
    else if (exampleToRun === 86)
      return Phaser.CANVAS;
    else if (exampleToRun === 87)
      return Phaser.CANVAS;
    else if (exampleToRun === 88)
      return Phaser.CANVAS;
    else if (exampleToRun === 89)
      return Phaser.CANVAS;
    else if (exampleToRun === 90)
      return Phaser.CANVAS;
    else if (exampleToRun === 91)
      return Phaser.CANVAS;
    else if (exampleToRun === 92)
      return Phaser.AUTO;
    else if (exampleToRun === 93)
      return Phaser.AUTO;
    else if (exampleToRun === 94)
      return Phaser.CANVAS;
    else if (exampleToRun === 95)
      return Phaser.CANVAS;
    else if (exampleToRun === 96)
      return Phaser.CANVAS;
    else if (exampleToRun === 97)
      return Phaser.AUTO;
    else if (exampleToRun === 98)
      return Phaser.AUTO;
    else if (exampleToRun === 99)
      return Phaser.AUTO;
    else if (exampleToRun === 100)
      return Phaser.CANVAS;
    else if (exampleToRun === 101)
      return Phaser.AUTO;
    else if (exampleToRun === 102)
      return Phaser.AUTO;
    else if (exampleToRun === 103)
      return Phaser.AUTO;
    else if (exampleToRun === 104)
      return Phaser.AUTO;
    else if (exampleToRun === 105)
      return Phaser.AUTO;
    else if (exampleToRun === 106)
      return Phaser.CANVAS;
    else if (exampleToRun === 107)
      return Phaser.AUTO;
    else if (exampleToRun === 108)
      return Phaser.CANVAS;
    else if (exampleToRun === 109)
      return Phaser.CANVAS;
    else if (exampleToRun === 110)
      return Phaser.CANVAS;
    else if (exampleToRun === 111)
      return Phaser.CANVAS;
    else if (exampleToRun === 112)
      return Phaser.CANVAS;
    else if (exampleToRun === 113)
      return Phaser.CANVAS;
    else if (exampleToRun === 114)
      return Phaser.CANVAS;
    else if (exampleToRun === 115)
      return Phaser.CANVAS;
    else if (exampleToRun === 116)
      return Phaser.AUTO;
    else if (exampleToRun === 117)
      return Phaser.CANVAS;
    else if (exampleToRun === 118)
      return Phaser.CANVAS;
    else if (exampleToRun === 119)
      return Phaser.CANVAS;
    else if (exampleToRun === 120)
      return Phaser.CANVAS;
    else if (exampleToRun === 121)
      return Phaser.CANVAS;
    else if (exampleToRun === 122)
      return Phaser.CANVAS;
    else if (exampleToRun === 123)
      return Phaser.CANVAS;
    else if (exampleToRun === 124)
      return Phaser.CANVAS;
    else if (exampleToRun === 125)
      return Phaser.CANVAS;
    else if (exampleToRun === 126)
      return Phaser.CANVAS;
    else if (exampleToRun === 127)
      return Phaser.CANVAS;
    else if (exampleToRun === 128)
      return Phaser.CANVAS;
    else if (exampleToRun === 129)
      return Phaser.CANVAS;
    else if (exampleToRun === 130)
      return Phaser.AUTO;
    else if (exampleToRun === 131)
      return Phaser.CANVAS;
    else if (exampleToRun === 132)
      return Phaser.CANVAS;
    else if (exampleToRun === 133)
      return Phaser.CANVAS;
    else if (exampleToRun === 134)
      return Phaser.CANVAS;
    else if (exampleToRun === 135)
      return Phaser.AUTO;
    else if (exampleToRun === 136)
      return Phaser.CANVAS;
    else if (exampleToRun === 137)
      return Phaser.CANVAS;
    else if (exampleToRun === 138)
      return Phaser.AUTO;
    else if (exampleToRun === 139)
      return Phaser.AUTO;
    else if (exampleToRun === 140)
      return Phaser.AUTO;
    else if (exampleToRun === 141)
      return Phaser.AUTO;
    else if (exampleToRun === 142)
      return Phaser.CANVAS;
    else if (exampleToRun === 143)
      return Phaser.CANVAS;
    else if (exampleToRun === 144)
      return Phaser.CANVAS;
    else if (exampleToRun === 145)
      return Phaser.CANVAS;
    else if (exampleToRun === 146)
      return Phaser.CANVAS;
    else if (exampleToRun === 147)
      return Phaser.CANVAS;
    else if (exampleToRun === 148)
      return Phaser.AUTO;
    else if (exampleToRun === 149)
      return Phaser.AUTO;
    else if (exampleToRun === 150)
      return Phaser.AUTO;
    else if (exampleToRun === 151)
      return Phaser.AUTO;
    else if (exampleToRun === 152)
      return Phaser.CANVAS;
    else if (exampleToRun === 153)
      return Phaser.CANVAS;
    else if (exampleToRun === 154)
      return Phaser.CANVAS;
    else if (exampleToRun === 155)
      return Phaser.AUTO;
    else if (exampleToRun === 156)
      return Phaser.AUTO;
    else if (exampleToRun === 157)
      return Phaser.AUTO;
    else if (exampleToRun === 158)
      return Phaser.CANVAS;
    else if (exampleToRun === 159)
      return Phaser.WEBGL;
    else if (exampleToRun === 160)
      return Phaser.CANVAS;
    else if (exampleToRun === 161)
      return Phaser.CANVAS;
    else if (exampleToRun === 162)
      return Phaser.AUTO;
    else if (exampleToRun === 163)
      return Phaser.AUTO;
    else if (exampleToRun === 164)
      return Phaser.CANVAS;
    else if (exampleToRun === 165)
      return Phaser.AUTO;
    else if (exampleToRun === 166)
      return Phaser.CANVAS;
    else if (exampleToRun === 167)
      return Phaser.CANVAS;
    else if (exampleToRun === 168)
      return Phaser.AUTO;
    else if (exampleToRun === 169)
      return Phaser.AUTO;
    else if (exampleToRun === 170)
      return Phaser.AUTO;
    else if (exampleToRun === 171)
      return Phaser.WEBGL;
    else if (exampleToRun === 172)
      return Phaser.WEBGL;
    else if (exampleToRun === 173)
      return Phaser.AUTO;
    else if (exampleToRun === 174)
      return Phaser.AUTO;
    else if (exampleToRun === 175)
      return Phaser.AUTO;
    else if (exampleToRun === 176)
      return Phaser.WEBGL;
    else if (exampleToRun === 177)
      return Phaser.AUTO;
    else if (exampleToRun === 178)
      return Phaser.WEBGL;
    else if (exampleToRun === 179)
      return Phaser.AUTO;
    else if (exampleToRun === 180)
      return Phaser.WEBGL;
    else if (exampleToRun === 181)
      return Phaser.AUTO;
    else if (exampleToRun === 182)
      return Phaser.WEBGL;
    else if (exampleToRun === 183)
      return Phaser.AUTO;
    else if (exampleToRun === 184)
      return Phaser.AUTO;
    else if (exampleToRun === 185)
      return Phaser.AUTO;
    else if (exampleToRun === 186)
      return Phaser.WEBGL;
    else if (exampleToRun === 187)
      return Phaser.WEBGL;
    else if (exampleToRun === 188)
      return Phaser.AUTO;
    else if (exampleToRun === 189)
      return Phaser.AUTO;
    else if (exampleToRun === 190)
      return Phaser.AUTO;
    else if (exampleToRun === 191)
      return Phaser.AUTO;
    else if (exampleToRun === 192)
      return Phaser.AUTO;
    else if (exampleToRun === 193)
      return Phaser.AUTO;
    else if (exampleToRun === 194)
      return Phaser.AUTO;
    else if (exampleToRun === 195)
      return Phaser.AUTO;
    else if (exampleToRun === 196)
      return Phaser.AUTO;
    else if (exampleToRun === 197)
      return Phaser.AUTO;
    else if (exampleToRun === 198)
      return Phaser.AUTO;
    else if (exampleToRun === 199)
      return Phaser.AUTO;
    else if (exampleToRun === 200)
      return Phaser.WEBGL;
    else if (exampleToRun === 201)
      return Phaser.AUTO;
    else if (exampleToRun === 202)
      return Phaser.AUTO;
    else if (exampleToRun === 203)
      return Phaser.AUTO;
    else if (exampleToRun === 204)
      return Phaser.AUTO;
    else if (exampleToRun === 205)
      return Phaser.WEBGL;
    else if (exampleToRun === 206)
      return Phaser.AUTO;
    else if (exampleToRun === 207)
      return Phaser.CANVAS;
    else if (exampleToRun === 208)
      return Phaser.CANVAS;
    else if (exampleToRun === 209)
      return Phaser.AUTO;
    else if (exampleToRun === 210)
      return Phaser.CANVAS;
    else if (exampleToRun === 211)
      return Phaser.CANVAS;
    else if (exampleToRun === 212)
      return Phaser.CANVAS;
    else if (exampleToRun === 213)
      return Phaser.CANVAS;
    else if (exampleToRun === 214)
      return Phaser.AUTO;
    else if (exampleToRun === 215)
      return Phaser.AUTO;
    else if (exampleToRun === 216)
      return Phaser.CANVAS;
    else if (exampleToRun === 217)
      return Phaser.CANVAS;
    else if (exampleToRun === 218)
      return Phaser.CANVAS;
    else if (exampleToRun === 219)
      return Phaser.CANVAS;
    else if (exampleToRun === 220)
      return Phaser.CANVAS;
    else if (exampleToRun === 221)
      return Phaser.AUTO;
    else if (exampleToRun === 222)
      return Phaser.CANVAS;
    else if (exampleToRun === 223)
      return Phaser.CANVAS;
    else if (exampleToRun === 224)
      return Phaser.CANVAS;
    else if (exampleToRun === 225)
      return Phaser.CANVAS;
    else if (exampleToRun === 226)
      return Phaser.CANVAS;
    else if (exampleToRun === 227)
      return Phaser.CANVAS;
    else if (exampleToRun === 228)
      return Phaser.CANVAS;
    else if (exampleToRun === 229)
      return Phaser.CANVAS;
    else if (exampleToRun === 230)
      return Phaser.CANVAS;
    else if (exampleToRun === 231)
      return Phaser.CANVAS;
    else if (exampleToRun === 232)
      return Phaser.CANVAS;
    else if (exampleToRun === 233)
      return Phaser.CANVAS;
    else if (exampleToRun === 234)
      return Phaser.CANVAS;
    else if (exampleToRun === 235)
      return Phaser.CANVAS;
    else if (exampleToRun === 236)
      return Phaser.CANVAS;
    else if (exampleToRun === 237)
      return Phaser.CANVAS;
    else if (exampleToRun === 238)
      return Phaser.CANVAS;
    else if (exampleToRun === 239)
      return Phaser.CANVAS;
    else if (exampleToRun === 240)
      return Phaser.CANVAS;
    else if (exampleToRun === 241)
      return Phaser.CANVAS;
    else if (exampleToRun === 242)
      return Phaser.CANVAS;
    else if (exampleToRun === 243)
      return Phaser.CANVAS;
    else if (exampleToRun === 244)
      return Phaser.AUTO;
    else if (exampleToRun === 245)
      return Phaser.CANVAS;
    else if (exampleToRun === 246)
      return Phaser.CANVAS;
    else if (exampleToRun === 247)
      return Phaser.CANVAS;
    else if (exampleToRun === 248)
      return Phaser.CANVAS;
    else if (exampleToRun === 249)
      return Phaser.AUTO;
    else if (exampleToRun === 250)
      return Phaser.AUTO;
    else if (exampleToRun === 251)
      return Phaser.CANVAS;
    else if (exampleToRun === 252)
      return Phaser.CANVAS;
    else if (exampleToRun === 253)
      return Phaser.CANVAS;
    else if (exampleToRun === 254)
      return Phaser.CANVAS;
    else if (exampleToRun === 255)
      return Phaser.CANVAS;
    else if (exampleToRun === 256)
      return Phaser.CANVAS;
    else if (exampleToRun === 257)
      return Phaser.CANVAS;
    else if (exampleToRun === 258)
      return Phaser.CANVAS;
    else if (exampleToRun === 259)
      return Phaser.CANVAS;
    else if (exampleToRun === 260)
      return Phaser.CANVAS;
    else if (exampleToRun === 261)
      return Phaser.CANVAS;
    else if (exampleToRun === 262)
      return Phaser.AUTO;
    else if (exampleToRun === 263)
      return Phaser.CANVAS;
    else if (exampleToRun === 264)
      return Phaser.CANVAS;
    else if (exampleToRun === 265)
      return Phaser.CANVAS;
    else if (exampleToRun === 266)
      return Phaser.CANVAS;
    else if (exampleToRun === 267)
      return Phaser.CANVAS;
    else if (exampleToRun === 268)
      return Phaser.CANVAS;
    else if (exampleToRun === 269)
      return Phaser.CANVAS;
    else if (exampleToRun === 270)
      return Phaser.CANVAS;
    else if (exampleToRun === 271)
      return Phaser.CANVAS;
    else if (exampleToRun === 272)
      return Phaser.AUTO;
    else if (exampleToRun === 273)
      return Phaser.AUTO;
    else if (exampleToRun === 274)
      return Phaser.CANVAS;
    else if (exampleToRun === 275)
      return Phaser.CANVAS;
    else if (exampleToRun === 276)
      return Phaser.CANVAS;
    else if (exampleToRun === 277)
      return Phaser.CANVAS;
    else if (exampleToRun === 278)
      return Phaser.CANVAS;
    else if (exampleToRun === 279)
      return Phaser.AUTO;
    else if (exampleToRun === 280)
      return Phaser.AUTO;
    else if (exampleToRun === 281)
      return Phaser.AUTO;
    else if (exampleToRun === 282)
      return Phaser.CANVAS;
    else if (exampleToRun === 283)
      return Phaser.CANVAS;
    else if (exampleToRun === 284)
      return Phaser.CANVAS;
    else if (exampleToRun === 285)
      return Phaser.CANVAS;
    else if (exampleToRun === 286)
      return Phaser.AUTO;
    else if (exampleToRun === 287)
      return Phaser.AUTO;
    else if (exampleToRun === 288)
      return Phaser.AUTO;
    else if (exampleToRun === 289)
      return Phaser.AUTO;
    else if (exampleToRun === 290)
      return Phaser.AUTO;
    else if (exampleToRun === 291)
      return Phaser.CANVAS;
    else if (exampleToRun === 292)
      return Phaser.CANVAS;
    else if (exampleToRun === 293)
      return Phaser.CANVAS;
    else if (exampleToRun === 294)
      return Phaser.CANVAS;
    else if (exampleToRun === 295)
      return Phaser.CANVAS;
    else if (exampleToRun === 296)
      return Phaser.CANVAS;
    else if (exampleToRun === 297)
      return Phaser.CANVAS;
    else if (exampleToRun === 298)
      return Phaser.CANVAS;
    else if (exampleToRun === 299)
      return Phaser.AUTO;
    else if (exampleToRun === 300)
      return Phaser.AUTO;
    else if (exampleToRun === 301)
      return Phaser.AUTO;
    else if (exampleToRun === 302)
      return Phaser.CANVAS;
    else if (exampleToRun === 303)
      return Phaser.CANVAS;
    else if (exampleToRun === 304)
      return Phaser.CANVAS;
    else if (exampleToRun === 305)
      return Phaser.CANVAS;
    else if (exampleToRun === 306)
      return Phaser.CANVAS;
    else if (exampleToRun === 307)
      return Phaser.AUTO;
    else if (exampleToRun === 308)
      return Phaser.CANVAS;
    else if (exampleToRun === 309)
      return Phaser.CANVAS;
    else if (exampleToRun === 310)
      return Phaser.CANVAS;
    else if (exampleToRun === 311)
      return Phaser.CANVAS;
    else if (exampleToRun === 312)
      return Phaser.CANVAS;
    else if (exampleToRun === 313)
      return Phaser.CANVAS;
    else if (exampleToRun === 314)
      return Phaser.CANVAS;
    else if (exampleToRun === 315)
      return Phaser.CANVAS;
    else if (exampleToRun === 316)
      return Phaser.AUTO;
    else if (exampleToRun === 317)
      return Phaser.CANVAS;
    else if (exampleToRun === 318)
      return Phaser.CANVAS;
    else if (exampleToRun === 319)
      return Phaser.CANVAS;
    else if (exampleToRun === 320)
      return Phaser.AUTO;
    else if (exampleToRun === 321)
      return Phaser.CANVAS;
    else if (exampleToRun === 322)
      return Phaser.AUTO;
    else if (exampleToRun === 323)
      return Phaser.AUTO;
    else if (exampleToRun === 324)
      return Phaser.CANVAS;
    else if (exampleToRun === 325)
      return Phaser.AUTO;
    else if (exampleToRun === 326)
      return Phaser.AUTO;
    else if (exampleToRun === 327)
      return Phaser.CANVAS;
    else if (exampleToRun === 328)
      return Phaser.AUTO;
    else if (exampleToRun === 329)
      return Phaser.AUTO;
    else if (exampleToRun === 330)
      return Phaser.CANVAS;
    else if (exampleToRun === 331)
      return Phaser.CANVAS;
    else if (exampleToRun === 332)
      return Phaser.CANVAS;
    else if (exampleToRun === 333)
      return Phaser.AUTO;
    else if (exampleToRun === 334)
      return Phaser.CANVAS;
    else if (exampleToRun === 335)
      return Phaser.AUTO;
    else if (exampleToRun === 336)
      return Phaser.CANVAS;
    else if (exampleToRun === 337)
      return Phaser.AUTO;
    else if (exampleToRun === 338)
      return Phaser.AUTO;
    else if (exampleToRun === 339)
      return Phaser.CANVAS;
    else if (exampleToRun === 340)
      return Phaser.AUTO;
    else if (exampleToRun === 341)
      return Phaser.AUTO;
    else if (exampleToRun === 342)
      return Phaser.CANVAS;
    else if (exampleToRun === 343)
      return Phaser.AUTO;
    else if (exampleToRun === 344)
      return Phaser.CANVAS;
    else if (exampleToRun === 345)
      return Phaser.CANVAS;
    else if (exampleToRun === 346)
      return Phaser.CANVAS;
    else if (exampleToRun === 347)
      return Phaser.AUTO;
    else if (exampleToRun === 348)
      return Phaser.AUTO;
    else if (exampleToRun === 349)
      return Phaser.CANVAS;
    else if (exampleToRun === 350)
      return Phaser.CANVAS;
    else if (exampleToRun === 351)
      return Phaser.CANVAS;
    else if (exampleToRun === 352)
      return Phaser.CANVAS;
    else if (exampleToRun === 353)
      return Phaser.CANVAS;
    else if (exampleToRun === 354)
      return Phaser.CANVAS;
    else if (exampleToRun === 355)
      return Phaser.AUTO;
    else if (exampleToRun === 356)
      return Phaser.CANVAS;
    else if (exampleToRun === 357)
      return Phaser.CANVAS;
    else if (exampleToRun === 358)
      return Phaser.CANVAS;
    else if (exampleToRun === 359)
      return Phaser.CANVAS;
    else if (exampleToRun === 360)
      return Phaser.CANVAS;
    else if (exampleToRun === 361)
      return Phaser.CANVAS;
    else if (exampleToRun === 362)
      return Phaser.CANVAS;
    else if (exampleToRun === 363)
      return Phaser.CANVAS;
    else if (exampleToRun === 364)
      return Phaser.CANVAS;
    else if (exampleToRun === 365)
      return Phaser.CANVAS;
    else if (exampleToRun === 366)
      return Phaser.CANVAS;
    else if (exampleToRun === 367)
      return Phaser.AUTO;
    else if (exampleToRun === 368)
      return Phaser.CANVAS;
    else if (exampleToRun === 369)
      return Phaser.CANVAS;
    else if (exampleToRun === 370)
      return Phaser.CANVAS;
    else if (exampleToRun === 371)
      return Phaser.CANVAS;
    else if (exampleToRun === 372)
      return Phaser.CANVAS;
    else if (exampleToRun === 373)
      return Phaser.AUTO;
    else if (exampleToRun === 374)
      return Phaser.AUTO;
    else if (exampleToRun === 375)
      return Phaser.AUTO;
    else if (exampleToRun === 376)
      return Phaser.AUTO;
    else if (exampleToRun === 377)
      return Phaser.CANVAS;
    else if (exampleToRun === 378)
      return Phaser.AUTO;
    else if (exampleToRun === 379)
      return Phaser.AUTO;
    else if (exampleToRun === 380)
      return Phaser.CANVAS;
    else if (exampleToRun === 381)
      return Phaser.AUTO;
    else if (exampleToRun === 382)
      return Phaser.AUTO;
    else if (exampleToRun === 383)
      return Phaser.CANVAS;
    else if (exampleToRun === 384)
      return Phaser.AUTO;
    else if (exampleToRun === 385)
      return Phaser.CANVAS;
    else if (exampleToRun === 386)
      return Phaser.AUTO;
    else if (exampleToRun === 387)
      return Phaser.AUTO;
    else if (exampleToRun === 388)
      return Phaser.CANVAS;
    else if (exampleToRun === 389)
      return Phaser.AUTO;
    else if (exampleToRun === 390)
      return Phaser.CANVAS;
    else if (exampleToRun === 391)
      return Phaser.CANVAS;
    else if (exampleToRun === 392)
      return Phaser.AUTO;
    else if (exampleToRun === 393)
      return Phaser.AUTO;
    else if (exampleToRun === 394)
      return Phaser.AUTO;
    else if (exampleToRun === 395)
      return Phaser.CANVAS;
    else if (exampleToRun === 396)
      return Phaser.AUTO;
    else if (exampleToRun === 397)
      return Phaser.AUTO;
    else if (exampleToRun === 398)
      return Phaser.AUTO;
    else if (exampleToRun === 399)
      return Phaser.CANVAS;
    else if (exampleToRun === 400)
      return Phaser.AUTO;
    else if (exampleToRun === 401)
      return Phaser.AUTO;
    else if (exampleToRun === 402)
      return Phaser.AUTO;
    else if (exampleToRun === 403)
      return Phaser.AUTO;
    else if (exampleToRun === 404)
      return Phaser.CANVAS;
    else if (exampleToRun === 405)
      return Phaser.CANVAS;
    else if (exampleToRun === 406)
      return Phaser.CANVAS;
    else if (exampleToRun === 407)
      return Phaser.CANVAS;
    else if (exampleToRun === 408)
      return Phaser.CANVAS;
    else if (exampleToRun === 409)
      return Phaser.CANVAS;
    else if (exampleToRun === 410)
      return Phaser.CANVAS;
    else if (exampleToRun === 411)
      return Phaser.AUTO;
    else if (exampleToRun === 412)
      return Phaser.AUTO;
    else if (exampleToRun === 413)
      return Phaser.AUTO;
    else if (exampleToRun === 414)
      return Phaser.AUTO;
    else if (exampleToRun === 415)
      return Phaser.CANVAS;
    else if (exampleToRun === 416)
      return Phaser.AUTO;
    else if (exampleToRun === 417)
      return Phaser.AUTO;
    else if (exampleToRun === 418)
      return Phaser.AUTO;
    else if (exampleToRun === 419)
      return Phaser.CANVAS;
    else if (exampleToRun === 420)
      return Phaser.AUTO;
    else if (exampleToRun === 421)
      return Phaser.AUTO;
    else if (exampleToRun === 422)
      return Phaser.CANVAS;
    else if (exampleToRun === 423)
      return Phaser.CANVAS;
    else if (exampleToRun === 424)
      return Phaser.CANVAS;
    else if (exampleToRun === 425)
      return Phaser.AUTO;
    else if (exampleToRun === 426)
      return Phaser.AUTO;
    else if (exampleToRun === 427)
      return Phaser.CANVAS;
    else if (exampleToRun === 428)
      return Phaser.CANVAS;
    else if (exampleToRun === 429)
      return Phaser.AUTO;
    else if (exampleToRun === 430)
      return Phaser.AUTO;
    else if (exampleToRun === 431)
      return Phaser.CANVAS;
    else if (exampleToRun === 432)
      return Phaser.AUTO;
    else if (exampleToRun === 433)
      return Phaser.AUTO;
    else if (exampleToRun === 434)
      return Phaser.AUTO;
    else if (exampleToRun === 435)
      return Phaser.CANVAS;
    else if (exampleToRun === 436)
      return Phaser.AUTO;
    else if (exampleToRun === 437)
      return Phaser.CANVAS;
    else if (exampleToRun === 438)
      return Phaser.AUTO;
    else if (exampleToRun === 439)
      return Phaser.AUTO;
    else if (exampleToRun === 440)
      return Phaser.AUTO;
    else if (exampleToRun === 441)
      return Phaser.AUTO;
    else if (exampleToRun === 442)
      return Phaser.AUTO;
    else if (exampleToRun === 443)
      return Phaser.CANVAS;
    else if (exampleToRun === 444)
      return Phaser.CANVAS;
    else if (exampleToRun === 445)
      return Phaser.AUTO;
    else if (exampleToRun === 446)
      return Phaser.AUTO;
    else if (exampleToRun === 447)
      return Phaser.AUTO;
    else if (exampleToRun === 448)
      return Phaser.AUTO;
    else if (exampleToRun === 449)
      return Phaser.AUTO;
    else if (exampleToRun === 450)
      return Phaser.CANVAS;
    else if (exampleToRun === 451)
      return Phaser.AUTO;
    else if (exampleToRun === 452)
      return Phaser.AUTO;
    else if (exampleToRun === 453)
      return Phaser.CANVAS;
    else if (exampleToRun === 454)
      return Phaser.CANVAS;
    else if (exampleToRun === 455)
      return Phaser.CANVAS;
    else if (exampleToRun === 456)
      return Phaser.AUTO;
    else if (exampleToRun === 457)
      return Phaser.AUTO;
    else if (exampleToRun === 458)
      return Phaser.CANVAS;
    else if (exampleToRun === 459)
      return Phaser.AUTO;
    else if (exampleToRun === 460)
      return Phaser.AUTO;
    else if (exampleToRun === 461)
      return Phaser.AUTO;
    else if (exampleToRun === 462)
      return Phaser.AUTO;
    else if (exampleToRun === 463)
      return Phaser.CANVAS;
    else if (exampleToRun === 464)
      return Phaser.CANVAS;
    else if (exampleToRun === 465)
      return Phaser.CANVAS;
    else if (exampleToRun === 466)
      return Phaser.CANVAS;
    else if (exampleToRun === 467)
      return Phaser.CANVAS;
    else if (exampleToRun === 468)
      return Phaser.CANVAS;
    else if (exampleToRun === 469)
      return Phaser.CANVAS;
    else if (exampleToRun === 470)
      return Phaser.CANVAS;
    else if (exampleToRun === 471)
      return Phaser.CANVAS;
    else if (exampleToRun === 472)
      return Phaser.CANVAS;
    else if (exampleToRun === 473)
      return Phaser.AUTO;
    else if (exampleToRun === 474)
      return Phaser.CANVAS;
    else if (exampleToRun === 475)
      return Phaser.CANVAS;
    else if (exampleToRun === 476)
      return Phaser.CANVAS;
    else if (exampleToRun === 477)
      return Phaser.CANVAS;
    else if (exampleToRun === 478)
      return Phaser.AUTO;
    else if (exampleToRun === 479)
      return Phaser.CANVAS;
    else if (exampleToRun === 480)
      return Phaser.CANVAS;
    else if (exampleToRun === 481)
      return Phaser.CANVAS;
    else if (exampleToRun === 482)
      return Phaser.AUTO;
    else if (exampleToRun === 483)
      return Phaser.CANVAS;
    else if (exampleToRun === 484)
      return Phaser.CANVAS;
    else if (exampleToRun === 485)
      return Phaser.AUTO;
    else if (exampleToRun === 486)
      return Phaser.CANVAS;
    else if (exampleToRun === 487)
      return Phaser.AUTO;
    else if (exampleToRun === 488)
      return Phaser.AUTO;
    else if (exampleToRun === 489)
      return Phaser.CANVAS;
    else if (exampleToRun === 490)
      return Phaser.CANVAS;
    else if (exampleToRun === 491)
      return Phaser.CANVAS;
    else if (exampleToRun === 492)
      return Phaser.CANVAS;
    else if (exampleToRun === 493)
      return Phaser.CANVAS;
    else if (exampleToRun === 494)
      return Phaser.CANVAS;
    else if (exampleToRun === 495)
      return Phaser.AUTO;
    else if (exampleToRun === 496)
      return Phaser.AUTO;
    else if (exampleToRun === 497)
      return Phaser.CANVAS;
    else if (exampleToRun === 498)
      return Phaser.CANVAS;
    else if (exampleToRun === 499)
      return Phaser.AUTO;
    else if (exampleToRun === 500)
      return Phaser.CANVAS;
    else if (exampleToRun === 501)
      return Phaser.AUTO;
    else if (exampleToRun === 502)
      return Phaser.CANVAS;
    else if (exampleToRun === 503)
      return Phaser.CANVAS;
    else if (exampleToRun === 504)
      return Phaser.CANVAS;
    else if (exampleToRun === 505)
      return Phaser.CANVAS;
    else if (exampleToRun === 506)
      return Phaser.CANVAS;
    else if (exampleToRun === 507)
      return Phaser.CANVAS;
    else if (exampleToRun === 508)
      return Phaser.CANVAS;
    else if (exampleToRun === 509)
      return Phaser.CANVAS;
    else if (exampleToRun === 510)
      return Phaser.CANVAS;
    else if (exampleToRun === 511)
      return Phaser.CANVAS;
    else if (exampleToRun === 512)
      return Phaser.CANVAS;
    else if (exampleToRun === 513)
      return Phaser.CANVAS;
    else if (exampleToRun === 514)
      return Phaser.CANVAS;
    else if (exampleToRun === 515)
      return Phaser.CANVAS;
    else if (exampleToRun === 516)
      return Phaser.CANVAS;
    else if (exampleToRun === 517)
      return Phaser.CANVAS;
    else if (exampleToRun === 518)
      return Phaser.CANVAS;
    else if (exampleToRun === 519)
      return Phaser.WEBGL;
    else if (exampleToRun === 520)
      return Phaser.AUTO;
    else if (exampleToRun === 521)
      return Phaser.AUTO;
    else if (exampleToRun === 522)
      return Phaser.AUTO;
    else if (exampleToRun === 523)
      return Phaser.AUTO;
    else if (exampleToRun === 524)
      return Phaser.AUTO;
    else if (exampleToRun === 525)
      return Phaser.AUTO;
    else if (exampleToRun === 526)
      return Phaser.AUTO;
    else if (exampleToRun === 527)
      return Phaser.AUTO;
    else if (exampleToRun === 528)
      return Phaser.AUTO;
    else if (exampleToRun === 529)
      return Phaser.WEBGL;
    else if (exampleToRun === 530)
      return Phaser.AUTO;
    else if (exampleToRun === 531)
      return Phaser.AUTO;
    else if (exampleToRun === 532)
      return Phaser.AUTO;
    else if (exampleToRun === 533)
      return Phaser.AUTO;
    else if (exampleToRun === 534)
      return Phaser.WEBGL;
    else if (exampleToRun === 535)
      return Phaser.CANVAS;
    else if (exampleToRun === 536)
      return Phaser.CANVAS;
    else if (exampleToRun === 537)
      return Phaser.CANVAS;
    else if (exampleToRun === 538)
      return Phaser.AUTO;
    else if (exampleToRun === 539)
      return Phaser.CANVAS;
    else if (exampleToRun === 540)
      return Phaser.AUTO;
    else if (exampleToRun === 541)
      return Phaser.CANVAS;
    else if (exampleToRun === 542)
      return Phaser.AUTO;
    else if (exampleToRun === 543)
      return Phaser.CANVAS;
    else if (exampleToRun === 544)
      return Phaser.CANVAS;
    else if (exampleToRun === 545)
      return Phaser.CANVAS;
    else if (exampleToRun === 546)
      return Phaser.CANVAS;
    else if (exampleToRun === 547)
      return Phaser.CANVAS;
    else if (exampleToRun === 548)
      return Phaser.CANVAS;
    else if (exampleToRun === 549)
      return Phaser.CANVAS;
    else if (exampleToRun === 550)
      return Phaser.AUTO;
    else if (exampleToRun === 551)
      return Phaser.CANVAS;
    else if (exampleToRun === 552)
      return Phaser.CANVAS;
    else if (exampleToRun === 553)
      return Phaser.CANVAS;
    else if (exampleToRun === 554)
      return Phaser.CANVAS;
    else if (exampleToRun === 555)
      return Phaser.CANVAS;
    else if (exampleToRun === 556)
      return Phaser.CANVAS;
    else if (exampleToRun === 557)
      return Phaser.CANVAS;
    else if (exampleToRun === 558)
      return Phaser.CANVAS;
    else if (exampleToRun === 559)
      return Phaser.CANVAS;
    else if (exampleToRun === 560)
      return Phaser.CANVAS;
    else if (exampleToRun === 561)
      return Phaser.CANVAS;
    else if (exampleToRun === 562)
      return Phaser.CANVAS;
    else if (exampleToRun === 563)
      return Phaser.CANVAS;
    else if (exampleToRun === 564)
      return Phaser.CANVAS;
    else if (exampleToRun === 565)
      return Phaser.CANVAS;
    else if (exampleToRun === 566)
      return Phaser.CANVAS;
    else if (exampleToRun === 567)
      return Phaser.CANVAS;
    else if (exampleToRun === 568)
      return Phaser.CANVAS;
    else
      return Phaser.AUTO;
  }
  function ExamplesWeb(config) {
    this.config = config;
    this.currentExample = 59;
    this.topBar = new ExamplesWeb$TopBar(Kotlin.getBoundCallableRefForMemberFunction(this, 'runCurrentGame_0'), Kotlin.getBoundCallableRefForMemberFunction(this, 'prevExample'), Kotlin.getBoundCallableRefForMemberFunction(this, 'nextExample'));
    this.topBarGame = this.startTopBar_0();
  }
  function ExamplesWeb$exampleDivProperties() {
    ExamplesWeb$exampleDivProperties_instance = this;
    this.screenWidth = 800.0;
    this.screenHeight = 600.0;
  }
  ExamplesWeb$exampleDivProperties.$metadata$ = {
    type: Kotlin.TYPE.OBJECT,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'exampleDivProperties',
    baseClasses: []
  };
  var ExamplesWeb$exampleDivProperties_instance = null;
  function ExamplesWeb$exampleDivProperties_getInstance() {
    if (ExamplesWeb$exampleDivProperties_instance === null) {
      ExamplesWeb$exampleDivProperties_instance = new ExamplesWeb$exampleDivProperties();
    }
    return ExamplesWeb$exampleDivProperties_instance;
  }
  ExamplesWeb.prototype.runExample_0 = function (example) {
    return initKoala(GameConfig(void 0, ExamplesWeb$exampleDivProperties_getInstance().screenWidth, ExamplesWeb$exampleDivProperties_getInstance().screenHeight, example.renderer, 'gameDiv', void 0, void 0, void 0, void 0, example.state));
  };
  ExamplesWeb.prototype.runCurrentGame_0 = function () {
    var example = this.getExampleInfo_za3lpa$(this.currentExample);
    this.topBar.title.text = example.name;
    this.game = this.runExample_0(example);
    this.setupScale_0(this.topBarGame);
    this.setupScale_0(this.game);
  };
  ExamplesWeb.prototype.setupScale_0 = function (game) {
    game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
    game.scale.pageAlignHorizontally = true;
    game.scale.pageAlignVertically = true;
    game.scale.refresh();
  };
  ExamplesWeb.prototype.changeExample_0 = function (exampleNum) {
    this.currentExample = Phaser.Math.clamp(exampleNum, this.config.minExample, this.config.maxExample) | 0;
    console.log('ChangeExample', this.currentExample);
    this.game.destroy();
    this.runCurrentGame_0();
  };
  ExamplesWeb.prototype.startTopBar_0 = function () {
    return initKoala(GameConfig(void 0, ExamplesWeb$exampleDivProperties_getInstance().screenWidth, 70, Phaser.AUTO, 'topBarDiv', void 0, void 0, void 0, void 0, this.topBar));
  };
  ExamplesWeb.prototype.prevExample = function () {
    this.changeExample_0(--this.currentExample);
  };
  ExamplesWeb.prototype.nextExample = function () {
    this.changeExample_0(++this.currentExample);
  };
  function ExamplesWeb$ExampleInfo(state, name, renderer) {
    this.state = state;
    this.name = name;
    this.renderer = renderer;
  }
  ExamplesWeb$ExampleInfo.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ExampleInfo',
    baseClasses: []
  };
  ExamplesWeb$ExampleInfo.prototype.component1 = function () {
    return this.state;
  };
  ExamplesWeb$ExampleInfo.prototype.component2 = function () {
    return this.name;
  };
  ExamplesWeb$ExampleInfo.prototype.component3 = function () {
    return this.renderer;
  };
  ExamplesWeb$ExampleInfo.prototype.copy_k4vze$ = function (state, name, renderer) {
    return new ExamplesWeb$ExampleInfo(state === void 0 ? this.state : state, name === void 0 ? this.name : name, renderer === void 0 ? this.renderer : renderer);
  };
  ExamplesWeb$ExampleInfo.prototype.toString = function () {
    return 'ExampleInfo(state=' + Kotlin.toString(this.state) + (', name=' + Kotlin.toString(this.name)) + (', renderer=' + Kotlin.toString(this.renderer)) + ')';
  };
  ExamplesWeb$ExampleInfo.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.state) | 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.renderer) | 0;
    return result;
  };
  ExamplesWeb$ExampleInfo.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.state, other.state) && Kotlin.equals(this.name, other.name) && Kotlin.equals(this.renderer, other.renderer)))));
  };
  ExamplesWeb.prototype.getExampleInfo_za3lpa$ = function (n) {
    var state = getExampleState(n);
    var name = get_js(Kotlin.getKClassFromExpression(state)).name;
    var renderer = getExampleRenderer(n);
    return new ExamplesWeb$ExampleInfo(state, name, renderer);
  };
  function ExamplesWeb$TopBar(onReady, onPrev, onNext) {
    Phaser.State.call(this);
    this.onReady = onReady;
    this.onPrev = onPrev;
    this.onNext = onNext;
  }
  ExamplesWeb$TopBar.prototype.preload = function () {
    this.game.load.spritesheet('button', 'assets/exampleWeb/button_sprite_sheet.png', 193, 71);
    this.game.load.image('arrow', 'assets/exampleWeb/arrow.png');
  };
  ExamplesWeb$TopBar.prototype.create = function () {
    var margin = 32;
    var buttonWidth = 190;
    var arrowOffsetX = 95;
    var arrowOffsetY = 30;
    this.game.stage.backgroundColor = '#000000';
    var prevButton = this.game.add.button(margin, 0, 'button', this.onPrev, this, 2, 1, 0);
    var nextButton = this.game.add.button(this.game.world.width - margin - buttonWidth, 0, 'button', this.onNext, this, 2, 1, 0);
    var prevArrow = this.game.add.image(prevButton.x + arrowOffsetX, arrowOffsetY, 'arrow');
    prevArrow.anchor.set(0.5);
    prevArrow.scale.x = -1.0;
    this.game.add.image(nextButton.x + arrowOffsetX, arrowOffsetY, 'arrow').anchor.set(0.5);
    this.title = this.game.add.text(0, 0, 'Loading...', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff', void 0, 'center', 'middle'));
    this.title.setShadow(3, 3, 'rgba(0,0,0,0.5)', 2);
    this.title.setTextBounds(margin + buttonWidth, 0, this.game.world.width - margin * 2 - buttonWidth * 2, 70);
    this.onReady();
  };
  ExamplesWeb$TopBar.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TopBar',
    baseClasses: []
  };
  ExamplesWeb.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ExamplesWeb',
    baseClasses: []
  };
  function AnimationEvents() {
    Phaser.State.call(this);
  }
  AnimationEvents.prototype.preload = function () {
    this.game.load.image('lazur', 'assets/pics/thorn_lazur.png');
    this.game.load.spritesheet('mummy', 'assets/sprites/metalslug_mummy37x45.png', 37, 45, 18);
  };
  function AnimationEvents$create$lambda(this$AnimationEvents) {
    return function (s, a) {
      this$AnimationEvents.game.add.text(32, 32, 'Animation started', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, 'white'));
    };
  }
  function AnimationEvents$create$lambda_0(this$AnimationEvents) {
    return function () {
      if (this$AnimationEvents.anim.loopCount === 1) {
        this$AnimationEvents.loopText = this$AnimationEvents.game.add.text(32, 64, 'Animation looped', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, 'white'));
      }
       else {
        this$AnimationEvents.loopText.text = 'Animation looped x2';
        this$AnimationEvents.anim.loop = false;
      }
    };
  }
  function AnimationEvents$create$lambda_1(this$AnimationEvents) {
    return function () {
      this$AnimationEvents.game.add.text(32, 64 + 32, 'Animation stopped', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, 'white'));
    };
  }
  AnimationEvents.prototype.create = function () {
    this.back = this.game.add.image(0, -400, 'lazur');
    this.back.scale.set(2);
    this.back.smoothed = false;
    this.mummy = this.game.add.sprite(200, 360, 'mummy', 5);
    this.mummy.scale.set(4);
    this.mummy.smoothed = false;
    this.anim = this.mummy.animations.add('walk');
    this.anim.onStart.add(AnimationEvents$create$lambda(this), this);
    this.anim.onLoop.add(AnimationEvents$create$lambda_0(this), this);
    this.anim.onComplete.add(AnimationEvents$create$lambda_1(this), this);
    this.anim.play(10, true);
  };
  AnimationEvents.prototype.update = function () {
    if (this.anim.isPlaying) {
      this.back.x = this.back.x - 1;
    }
  };
  AnimationEvents.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AnimationEvents',
    baseClasses: []
  };
  function ChangeFrame() {
    Phaser.State.call(this);
  }
  ChangeFrame.prototype.preload = function () {
    this.game.load.atlas('seacreatures', 'assets/sprites/seacreatures_json.png', 'assets/sprites/seacreatures_json.json');
    this.game.load.image('undersea', 'assets/pics/undersea.jpg');
  };
  ChangeFrame.prototype.create = function () {
    this.game.add.image(0, 0, 'undersea');
    this.greenJellyfish = this.game.add.sprite(330, 100, 'seacreatures', 'greenJellyfish0000');
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'changeFrame_pal8wq$'), this);
  };
  ChangeFrame.prototype.changeFrame_pal8wq$ = function (pointer) {
    this.greenJellyfish.frameName = 'greenJellyfish0010';
  };
  ChangeFrame.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ChangeFrame',
    baseClasses: []
  };
  function ChangeTextureOnClick() {
    Phaser.State.call(this);
  }
  ChangeTextureOnClick.prototype.preload = function () {
    this.game.load.atlasJSONHash('bot', 'assets/sprites/running_bot.png', 'assets/sprites/running_bot.json');
    this.game.load.spritesheet('mummy', 'assets/sprites/metalslug_mummy37x45.png', 37, 45, 18);
  };
  ChangeTextureOnClick.prototype.create = function () {
    this.bot = this.game.add.sprite(200, 200, 'bot');
    this.bot.animations.add('run');
    this.bot.animations.play('run', 15, true);
    this.game.input.onDown.addOnce(Kotlin.getBoundCallableRefForMemberFunction(this, 'changeMummy'), this);
  };
  ChangeTextureOnClick.prototype.changeMummy = function () {
    this.bot.loadTexture('mummy', 0);
    this.bot.animations.add('walk');
    this.bot.animations.play('walk', 30, true);
  };
  ChangeTextureOnClick.prototype.render = function () {
    this.game.debug.body(this.bot);
  };
  ChangeTextureOnClick.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ChangeTextureOnClick',
    baseClasses: []
  };
  function DestroyAnimation() {
    Phaser.State.call(this);
    this.rip = 0;
  }
  DestroyAnimation.prototype.preload = function () {
    this.game.load.spritesheet('mummy', 'assets/sprites/metalslug_mummy37x45.png', 37, 45, 18);
  };
  DestroyAnimation.prototype.create = function () {
    this.sprites = this.game.add.group();
    this.game.time.events.loop(50, Kotlin.getBoundCallableRefForMemberFunction(this, 'createSprite'), this);
  };
  DestroyAnimation.prototype.createSprite = function () {
    var mummy = this.sprites.create(0, this.game.world.randomY, 'mummy');
    mummy.animations.add('walk');
    mummy.play('walk', 10, true);
  };
  DestroyAnimation.prototype.update = function () {
    this.sprites.setAll('x', 10, true, true, 1);
    this.sprites.forEach(Kotlin.getBoundCallableRefForMemberFunction(this, 'checkSprite_okw7gk$'), this, true);
  };
  DestroyAnimation.prototype.checkSprite_okw7gk$ = function (sprite) {
    try {
      if (sprite.x > this.game.width) {
        this.rip++;
        this.sprites.remove(sprite, true);
      }
    }
     catch (e) {
      if (Kotlin.isType(e, Exception)) {
        console.log(sprite);
      }
       else
        throw e;
    }
  };
  DestroyAnimation.prototype.render = function () {
    this.game.debug.text('Group size: ' + this.sprites.total, 32, 32);
    this.game.debug.text('Destroyed: ' + this.rip, 32, 64);
  };
  DestroyAnimation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DestroyAnimation',
    baseClasses: []
  };
  function DynamicAnimation() {
    Phaser.State.call(this);
  }
  DynamicAnimation.prototype.preload = function () {
    this.game.load.image('orb', 'assets/sprites/orb-blue.png');
  };
  DynamicAnimation.prototype.create = function () {
    this.game.stage.backgroundColor = '#ef3d45';
    var orb = this.game.make.sprite(0, 0, 'orb');
    var bmd = this.game.add.bitmapData(352, 22);
    var x = 0;
    var y = -22;
    for (var i = 0; i <= 15; i++) {
      bmd.draw(orb, x, y);
      x += 22;
      y += 3;
    }
    this.game.add.image(0, 0, bmd);
    this.game.cache.addSpriteSheet('dynamic', '', bmd.canvas, 22, 22, 16, 0, 0);
    for (var i_0 = 0; i_0 <= 15; i_0++) {
      var test = this.game.add.sprite(200, 100 + i_0 * 22, 'dynamic');
      test.animations.add('float');
      test.play('float', 20, true);
    }
  };
  DynamicAnimation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DynamicAnimation',
    baseClasses: []
  };
  function FrameUpdate() {
    Phaser.State.call(this);
  }
  FrameUpdate.prototype.preload = function () {
    this.game.load.spritesheet('mummy', 'assets/sprites/metalslug_mummy37x45.png', 37, 45, 18);
  };
  FrameUpdate.prototype.create = function () {
    var mummy = this.game.add.sprite(300, 200, 'mummy');
    var walk = mummy.animations.add('walk');
    walk.enableUpdate = true;
    walk.onUpdate.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onUpdate_r2j0az$'), this);
    mummy.animations.play('walk', 5, true);
    this.text = this.game.add.text(300, 264, 'Frame 1', TextStyle('28px Arial', void 0, void 0, void 0, void 0, void 0, '#ff0044'));
  };
  FrameUpdate.prototype.onUpdate_r2j0az$ = function (anim, frame) {
    this.text.text = 'Frame ' + frame.index;
  };
  FrameUpdate.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FrameUpdate',
    baseClasses: []
  };
  function GroupCreation() {
    Phaser.State.call(this);
  }
  GroupCreation.prototype.preload = function () {
    this.game.load.atlas('seacreatures', 'assets/sprites/seacreatures_json.png', 'assets/sprites/seacreatures_json.json');
    this.game.load.image('undersea', 'assets/pics/undersea.jpg');
    this.game.load.image('coral', 'assets/pics/seabed.png');
  };
  GroupCreation.prototype.create = function () {
    this.game.add.sprite(0, 0, 'undersea');
    var group = this.game.add.group();
    for (var i = 0; i <= 6; i++) {
      group.create(120 * i, this.game.rnd.integerInRange(100, 400), 'seacreatures', 'octopus0000');
    }
    var frameNames = Phaser.Animation.generateFrameNames('octopus', 0, 24, '', 4);
    group.callAll('animations.add', 'animations', 'swim', frameNames, 30, true, false);
    group.callAll('play', null, 'swim');
    this.game.add.sprite(0, 466, 'coral');
  };
  GroupCreation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GroupCreation',
    baseClasses: []
  };
  function LoadTexture() {
    Phaser.State.call(this);
  }
  LoadTexture.prototype.preload = function () {
    this.game.load.spritesheet('mummy', 'assets/sprites/metalslug_mummy37x45.png', 37, 45, 18);
    this.game.load.spritesheet('monster', 'assets/sprites/metalslug_monster39x40.png', 39, 40);
  };
  LoadTexture.prototype.create = function () {
    this.sprite = this.game.add.sprite(300, 200, 'monster');
    this.sprite.animations.add('walk', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);
    this.sprite.animations.play('walk', 20, true);
    this.sprite.scale.set(4);
    this.sprite.smoothed = false;
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'changeTexture'), this);
  };
  LoadTexture.prototype.changeTexture = function () {
    if (this.sprite.key === 'monster') {
      this.sprite.loadTexture('mummy', 0, false);
    }
     else {
      this.sprite.loadTexture('monster', 0, false);
    }
  };
  LoadTexture.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadTexture',
    baseClasses: []
  };
  function LocalJsonObject() {
    Phaser.State.call(this);
    this.botData = '{\n\t    "frames": [\n\t\n\t{\n\t    "filename": "running bot.swf/0000",\n\t    "frame": { "x": 34, "y": 128, "w": 56, "h": 60 },\n\t    "rotated": false,\n\t    "trimmed": true,\n\t    "spriteSourceSize": { "x": 0, "y": 2, "w": 56, "h": 60 },\n\t    "sourceSize": { "w": 56, "h": 64 }\n\t},\n\t{\n\t    "filename": "running bot.swf/0001",\n\t    "frame": { "x": 54, "y": 0, "w": 56, "h": 58 },\n\t    "rotated": false,\n\t    "trimmed": true,\n\t    "spriteSourceSize": { "x": 0, "y": 3, "w": 56, "h": 58 },\n\t    "sourceSize": { "w": 56, "h": 64 }\n\t},\n\t{\n\t    "filename": "running bot.swf/0002",\n\t    "frame": { "x": 54, "y": 58, "w": 56, "h": 58 },\n\t    "rotated": false,\n\t    "trimmed": true,\n\t    "spriteSourceSize": { "x": 0, "y": 3, "w": 56, "h": 58 },\n\t    "sourceSize": { "w": 56, "h": 64 }\n\t},\n\t{\n\t    "filename": "running bot.swf/0003",\n\t    "frame": { "x": 0, "y": 192, "w": 34, "h": 64 },\n\t    "rotated": false,\n\t    "trimmed": true,\n\t    "spriteSourceSize": { "x": 11, "y": 0, "w": 34, "h": 64 },\n\t    "sourceSize": { "w": 56, "h": 64 }\n\t},\n\t{\n\t    "filename": "running bot.swf/0004",\n\t    "frame": { "x": 0, "y": 64, "w": 54, "h": 64 },\n\t    "rotated": false,\n\t    "trimmed": true,\n\t    "spriteSourceSize": { "x": 1, "y": 0, "w": 54, "h": 64 },\n\t    "sourceSize": { "w": 56, "h": 64 }\n\t},\n\t{\n\t    "filename": "running bot.swf/0005",\n\t    "frame": { "x": 196, "y": 0, "w": 56, "h": 58 },\n\t    "rotated": false,\n\t    "trimmed": true,\n\t    "spriteSourceSize": { "x": 0, "y": 3, "w": 56, "h": 58 },\n\t    "sourceSize": { "w": 56, "h": 64 }\n\t},\n\t{\n\t    "filename": "running bot.swf/0006",\n\t    "frame": { "x": 0, "y": 0, "w": 54, "h": 64 },\n\t    "rotated": false,\n\t    "trimmed": true,\n\t    "spriteSourceSize": { "x": 1, "y": 0, "w": 54, "h": 64 },\n\t    "sourceSize": { "w": 56, "h": 64 }\n\t},\n\t{\n\t    "filename": "running bot.swf/0007",\n\t    "frame": { "x": 140, "y": 0, "w": 56, "h": 58 },\n\t    "rotated": false,\n\t    "trimmed": true,\n\t    "spriteSourceSize": { "x": 0, "y": 3, "w": 56, "h": 58 },\n\t    "sourceSize": { "w": 56, "h": 64 }\n\t},\n\t{\n\t    "filename": "running bot.swf/0008",\n\t    "frame": { "x": 34, "y": 188, "w": 50, "h": 60 },\n\t    "rotated": false,\n\t    "trimmed": true,\n\t    "spriteSourceSize": { "x": 3, "y": 2, "w": 50, "h": 60 },\n\t    "sourceSize": { "w": 56, "h": 64 }\n\t},\n\t{\n\t    "filename": "running bot.swf/0009",\n\t    "frame": { "x": 0, "y": 128, "w": 34, "h": 64 },\n\t    "rotated": false,\n\t    "trimmed": true,\n\t    "spriteSourceSize": { "x": 11, "y": 0, "w": 34, "h": 64 },\n\t    "sourceSize": { "w": 56, "h": 64 }\n\t},\n\t{\n\t    "filename": "running bot.swf/0010",\n\t    "frame": { "x": 84, "y": 188, "w": 56, "h": 58 },\n\t    "rotated": false,\n\t    "trimmed": true,\n\t    "spriteSourceSize": { "x": 0, "y": 3, "w": 56, "h": 58 },\n\t    "sourceSize": { "w": 56, "h": 64 }\n\t}],\n\t    "meta": {\n\t        "app": "http://www.texturepacker.com",\n\t        "version": "1.0",\n\t        "image": "running_bot.png",\n\t        "format": "RGBA8888",\n\t        "size": { "w": 252, "h": 256 },\n\t        "scale": "0.2",\n\t        "smartupdate": "TexturePacker:SmartUpdate:fb56f261b1eb04e3215824426595f64c$"\n\t    }\n\t}';
  }
  LocalJsonObject.prototype.preload = function () {
    this.game.load.atlas('bot', 'assets/sprites/running_bot.png', null, this.botData);
  };
  LocalJsonObject.prototype.create = function () {
    this.bot = this.game.add.sprite(this.game.world.centerX, 300, 'bot');
    this.bot.animations.add('run');
    this.bot.animations.play('run', 10, true);
  };
  LocalJsonObject.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LocalJsonObject',
    baseClasses: []
  };
  function LoopedAnimation() {
    Phaser.State.call(this);
  }
  LoopedAnimation.prototype.preload = function () {
    this.game.load.atlasJSONHash('bot', 'assets/sprites/running_bot.png', 'assets/sprites/running_bot.json');
  };
  LoopedAnimation.prototype.create = function () {
    this.bot = this.game.add.sprite(200, 200, 'bot');
    this.bot.animations.add('run');
    this.bot.animations.play('run', 15, true);
  };
  LoopedAnimation.prototype.update = function () {
    this.bot.x = this.bot.x - 2;
    if (this.bot.x < -this.bot.width) {
      this.bot.x = this.game.world.width;
    }
  };
  LoopedAnimation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoopedAnimation',
    baseClasses: []
  };
  function MultipleAnims() {
    Phaser.State.call(this);
  }
  MultipleAnims.prototype.preload = function () {
    this.game.load.atlasXML('seacreatures', 'assets/sprites/seacreatures.png', 'assets/sprites/seacreatures.xml');
    this.game.load.image('undersea', 'assets/pics/undersea.jpg');
    this.game.load.image('coral', 'assets/pics/seabed.png');
  };
  function MultipleAnims$create$ObjectLiteral() {
    this.x = -200;
  }
  MultipleAnims$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function MultipleAnims$create$ObjectLiteral_0() {
    this.y = 530;
  }
  MultipleAnims$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function MultipleAnims$create$ObjectLiteral_1() {
    this.y = 250;
  }
  MultipleAnims$create$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function MultipleAnims$create$ObjectLiteral_2() {
    this.y = 100;
  }
  MultipleAnims$create$ObjectLiteral_2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  MultipleAnims.prototype.create = function () {
    this.game.add.image(0, 0, 'undersea');
    this.jellyfish = this.game.add.sprite(670, 20, 'seacreatures');
    this.jellyfish.animations.add('swim', Phaser.Animation.generateFrameNames('blueJellyfish', 0, 32, '', 4), 30, true);
    this.jellyfish.animations.play('swim');
    this.crab = this.game.add.sprite(550, 480, 'seacreatures');
    this.crab.animations.add('swim', Phaser.Animation.generateFrameNames('crab1', 0, 25, '', 4), 30, true);
    this.crab.animations.play('swim');
    this.greenJellyfish = this.game.add.sprite(330, 100, 'seacreatures');
    this.greenJellyfish.animations.add('swim', Phaser.Animation.generateFrameNames('greenJellyfish', 0, 39, '', 4), 30, true);
    this.greenJellyfish.animations.play('swim');
    this.octopus = this.game.add.sprite(160, 400, 'seacreatures');
    this.octopus.animations.add('swim', Phaser.Animation.generateFrameNames('octopus', 0, 24, '', 4), 30, true);
    this.octopus.animations.play('swim');
    this.purpleFish = this.game.add.sprite(800, 413, 'seacreatures');
    this.purpleFish.animations.add('swim', Phaser.Animation.generateFrameNames('purpleFish', 0, 20, '', 4), 30, true);
    this.purpleFish.animations.play('swim');
    this.seahorse = this.game.add.sprite(491, 40, 'seacreatures');
    this.seahorse.animations.add('swim', Phaser.Animation.generateFrameNames('seahorse', 0, 5, '', 4), 30, true);
    this.seahorse.animations.play('swim');
    this.squid = this.game.add.sprite(610, 215, 'seacreatures', 'squid0000');
    this.stingray = this.game.add.sprite(80, 190, 'seacreatures');
    this.stingray.animations.add('swim', Phaser.Animation.generateFrameNames('stingray', 0, 23, '', 4), 30, true);
    this.stingray.animations.play('swim');
    this.flyingfish = this.game.add.sprite(60, 40, 'seacreatures', 'flyingFish0000');
    this.game.add.image(0, 466, 'coral');
    this.game.add.tween(this.purpleFish).to(new MultipleAnims$create$ObjectLiteral(), 7500, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Quadratic, 'InOut'), true, 0, 1000, false);
    this.game.add.tween(this.octopus).to(new MultipleAnims$create$ObjectLiteral_0(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Quadratic, 'InOut'), true, 0, 1000, true);
    this.game.add.tween(this.greenJellyfish).to(new MultipleAnims$create$ObjectLiteral_1(), 4000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Quadratic, 'InOut'), true, 0, 1000, true);
    this.game.add.tween(this.jellyfish).to(new MultipleAnims$create$ObjectLiteral_2(), 8000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Quadratic, 'InOut'), true, 0, 1000, true);
  };
  MultipleAnims.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MultipleAnims',
    baseClasses: []
  };
  function SpriteSheet() {
    Phaser.State.call(this);
  }
  SpriteSheet.prototype.preload = function () {
    this.game.load.spritesheet('mummy', 'assets/sprites/metalslug_mummy37x45.png', 37, 45, 18);
  };
  SpriteSheet.prototype.create = function () {
    var mummy = this.game.add.sprite(300, 200, 'mummy');
    var walk = mummy.animations.add('walk');
    mummy.animations.play('walk', 30, true);
  };
  SpriteSheet.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpriteSheet',
    baseClasses: []
  };
  function StarlingAtlas() {
    Phaser.State.call(this);
  }
  StarlingAtlas.prototype.preload = function () {
    this.game.load.atlasXML('octopus', 'assets/sprites/octopus.png', 'assets/sprites/octopus.xml');
  };
  function StarlingAtlas$create$ObjectLiteral() {
    this.y = 300;
  }
  StarlingAtlas$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  StarlingAtlas.prototype.create = function () {
    this.game.stage.backgroundColor = '#1873CE';
    var octopus = this.game.add.sprite(300, 200, 'octopus');
    octopus.animations.add('swim');
    octopus.animations.play('swim', 30, true);
    this.game.add.tween(octopus).to(new StarlingAtlas$create$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Quadratic, 'InOut'), true, 0, 1000, true);
  };
  StarlingAtlas.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'StarlingAtlas',
    baseClasses: []
  };
  function StopAnimation() {
    Phaser.State.call(this);
  }
  StopAnimation.prototype.preload = function () {
    this.game.load.atlas('seacreatures', 'assets/sprites/seacreatures_json.png', 'assets/sprites/seacreatures_json.json');
    this.game.load.image('undersea', 'assets/pics/undersea.jpg');
    this.game.load.image('coral', 'assets/pics/seabed.png');
  };
  function StopAnimation$create$ObjectLiteral() {
    this.y = 250;
  }
  StopAnimation$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  StopAnimation.prototype.create = function () {
    this.game.add.image(0, 0, 'undersea');
    this.game.add.sprite(32, 32, 'seacreatures', 'greenJellyfish0000');
    this.greenJellyfish = this.game.add.sprite(330, 100, 'seacreatures');
    this.greenJellyfish.animations.add('swim', Phaser.Animation.generateFrameNames('greenJellyfish', 0, 39, '', 4), 30, true);
    this.greenJellyfish.animations.play('swim');
    this.game.add.image(0, 466, 'coral');
    this.game.add.tween(this.greenJellyfish).to(new StopAnimation$create$ObjectLiteral(), 4000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Quadratic, 'InOut'), true, 0, 1000, true);
    this.game.input.onDown.addOnce(Kotlin.getBoundCallableRefForMemberFunction(this, 'stopAnimation'), this);
  };
  StopAnimation.prototype.stopAnimation = function () {
    this.greenJellyfish.animations.stop(null, true);
  };
  StopAnimation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'StopAnimation',
    baseClasses: []
  };
  function TwoFrameTest() {
    Phaser.State.call(this);
  }
  TwoFrameTest.prototype.preload = function () {
    this.game.load.spritesheet('player', 'assets/sprites/spaceman.png', 16, 16);
  };
  TwoFrameTest.prototype.create = function () {
    this.game.stage.backgroundColor = '#ff00ff';
    this.player = this.game.add.sprite(48, 48, 'player', 1);
    this.player.smoothed = false;
    this.player.scale.set(4);
    this.left = this.player.animations.add('left', [8, 9], 10, true);
    this.right = this.player.animations.add('right', [1, 2], 10, true);
    this.player.animations.add('up', [11, 12, 13], 10, true);
    this.player.animations.add('down', [4, 5, 6], 10, true);
    this.left.enableUpdate = true;
    this.right.enableUpdate = true;
    this.game.physics.enable(this.player, Phaser.Physics.ARCADE);
    this.game.camera.follow(this.player);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  TwoFrameTest.prototype.update = function () {
    this.player.body.velocity.set(0);
    if (this.cursors.left.isDown) {
      this.player.body.velocity.x = -100.0;
      this.player.play('left');
    }
     else if (this.cursors.right.isDown) {
      this.player.body.velocity.x = 100.0;
      this.player.play('right');
    }
     else if (this.cursors.up.isDown) {
      this.player.body.velocity.y = -100.0;
      this.player.play('up');
    }
     else if (this.cursors.down.isDown) {
      this.player.body.velocity.y = 100.0;
      this.player.play('down');
    }
     else {
      this.player.animations.stop();
    }
  };
  TwoFrameTest.prototype.render = function () {
    this.game.debug.text(this.player.frame, 32, 32);
  };
  TwoFrameTest.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TwoFrameTest',
    baseClasses: []
  };
  function AccelerateToPointer() {
    Phaser.State.call(this);
  }
  AccelerateToPointer.prototype.preload = function () {
    this.game.load.image('arrow', 'assets/sprites/arrow.png');
  };
  AccelerateToPointer.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#0072bc';
    this.sprite = this.game.add.sprite(400, 300, 'arrow');
    this.sprite.anchor.setTo(0.5, 0.5);
    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
    this.sprite.body.allowRotation = false;
  };
  AccelerateToPointer.prototype.update = function () {
    this.sprite.rotation = this.game.physics.arcade.moveToPointer(this.sprite, 60, this.game.input.activePointer, 500);
  };
  AccelerateToPointer.prototype.render = function () {
    this.game.debug.spriteInfo(this.sprite, 32, 32);
  };
  AccelerateToPointer.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AccelerateToPointer',
    baseClasses: []
  };
  function AngleBetween() {
    Phaser.State.call(this);
  }
  AngleBetween.prototype.preload = function () {
    this.game.load.image('arrow', 'assets/sprites/longarrow.png');
    this.game.load.image('ball', 'assets/sprites/pangball.png');
  };
  AngleBetween.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#0072bc';
    this.arrow = this.game.add.sprite(200, 250, 'arrow');
    this.arrow.anchor.setTo(0.1, 0.5);
    this.target = this.game.add.sprite(600, 400, 'ball');
    this.target.anchor.setTo(0.5, 0.5);
    this.target.inputEnabled = true;
    this.target.input.enableDrag(true);
  };
  AngleBetween.prototype.update = function () {
    this.arrow.rotation = this.game.physics.arcade.angleBetween(this.arrow, this.target);
  };
  AngleBetween.prototype.render = function () {
    this.game.debug.text('Drag the ball', 32, 32);
    this.game.debug.spriteInfo(this.arrow, 32, 100);
  };
  AngleBetween.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AngleBetween',
    baseClasses: []
  };
  function AngleToPointer() {
    Phaser.State.call(this);
  }
  AngleToPointer.prototype.preload = function () {
    this.game.load.image('arrow', 'assets/sprites/arrow.png');
  };
  AngleToPointer.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#0072bc';
    this.sprite = this.game.add.sprite(400, 300, 'arrow');
    this.sprite.anchor.setTo(0.5, 0.5);
  };
  AngleToPointer.prototype.update = function () {
    this.sprite.rotation = this.game.physics.arcade.angleToPointer(this.sprite);
  };
  AngleToPointer.prototype.render = function () {
    this.game.debug.spriteInfo(this.sprite, 32, 32);
  };
  AngleToPointer.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AngleToPointer',
    baseClasses: []
  };
  function AngularAcceleration() {
    Phaser.State.call(this);
  }
  AngularAcceleration.prototype.preload = function () {
    this.game.load.image('arrow', 'assets/sprites/arrow.png');
  };
  AngularAcceleration.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#0072bc';
    this.sprite = this.game.add.sprite(400, 300, 'arrow');
    this.sprite.anchor.setTo(0.5, 0.5);
    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
    this.sprite.body.maxAngular = 500;
    this.sprite.body.angularDrag = 50;
  };
  AngularAcceleration.prototype.update = function () {
    this.sprite.body.angularAcceleration = 0;
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {
      this.sprite.body.angularAcceleration -= 200;
    }
     else if (this.game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {
      this.sprite.body.angularAcceleration += 200;
    }
  };
  AngularAcceleration.prototype.render = function () {
    this.game.debug.spriteInfo(this.sprite, 32, 32);
    this.game.debug.text('angularVelocity: ' + this.sprite.body.angularVelocity, 32, 200);
    this.game.debug.text('angularAcceleration: ' + this.sprite.body.angularAcceleration, 32, 232);
    this.game.debug.text('angularDrag: ' + this.sprite.body.angularDrag, 32, 264);
    this.game.debug.text('deltaZ: ' + this.sprite.body.deltaZ(), 32, 296);
  };
  AngularAcceleration.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AngularAcceleration',
    baseClasses: []
  };
  function AngularVelocity() {
    Phaser.State.call(this);
  }
  AngularVelocity.prototype.preload = function () {
    this.game.load.image('arrow', 'assets/sprites/arrow.png');
  };
  AngularVelocity.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#0072bc';
    this.sprite = this.game.add.sprite(400, 300, 'arrow');
    this.sprite.anchor.setTo(0.5, 0.5);
    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
  };
  AngularVelocity.prototype.update = function () {
    this.sprite.body.velocity.x = 0;
    this.sprite.body.velocity.y = 0;
    this.sprite.body.angularVelocity = 0;
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {
      this.sprite.body.angularVelocity = -200;
    }
     else if (this.game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {
      this.sprite.body.angularVelocity = 200;
    }
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.UP)) {
      this.game.physics.arcade.velocityFromAngle(this.sprite.angle, 300, this.sprite.body.velocity);
    }
  };
  AngularVelocity.prototype.render = function () {
    this.game.debug.spriteInfo(this.sprite, 32, 32);
    this.game.debug.text('angularVelocity: ' + this.sprite.body.angularVelocity, 32, 200);
    this.game.debug.text('angularAcceleration: ' + this.sprite.body.angularAcceleration, 32, 232);
    this.game.debug.text('angularDrag: ' + this.sprite.body.angularDrag, 32, 264);
    this.game.debug.text('deltaZ: ' + this.sprite.body.deltaZ(), 32, 296);
  };
  AngularVelocity.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AngularVelocity',
    baseClasses: []
  };
  function AsteroidsMovement() {
    Phaser.State.call(this);
    this.bullet = null;
    this.bulletTime = 0.0;
  }
  AsteroidsMovement.prototype.preload = function () {
    this.game.load.image('space', 'assets/skies/deep-space.jpg');
    this.game.load.image('bullet', 'assets/games/asteroids/bullets.png');
    this.game.load.image('ship', 'assets/games/asteroids/ship.png');
  };
  AsteroidsMovement.prototype.create = function () {
    this.game.renderer.clearBeforeRender = false;
    this.game.renderer.roundPixels = true;
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.add.tileSprite(0, 0, this.game.width, this.game.height, 'space');
    this.bullets = this.game.add.group();
    this.bullets.enableBody = true;
    this.bullets.physicsBodyType = Phaser.Physics.ARCADE;
    this.bullets.createMultiple(40, 'bullet');
    this.bullets.setAll('anchor.x', 0.5);
    this.bullets.setAll('anchor.y', 0.5);
    this.sprite = this.game.add.sprite(300, 300, 'ship');
    this.sprite.anchor.set(0.5);
    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
    this.sprite.body.drag.set(100);
    this.sprite.body.maxVelocity.set(200);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.input.keyboard.addKeyCapture([Phaser.Keyboard.SPACEBAR]);
  };
  AsteroidsMovement.prototype.update = function () {
    if (this.cursors.up.isDown) {
      this.game.physics.arcade.accelerationFromRotation(this.sprite.rotation, 200, this.sprite.body.acceleration);
    }
     else {
      this.sprite.body.acceleration.set(0);
    }
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -300;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 300;
    }
     else {
      this.sprite.body.angularVelocity = 0;
    }
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
      this.fireBullet();
    }
    this.screenWrap_okw7gk$(this.sprite);
    this.bullets.forEachExists(Kotlin.getBoundCallableRefForMemberFunction(this, 'screenWrap_okw7gk$'), this);
  };
  AsteroidsMovement.prototype.fireBullet = function () {
    var tmp$;
    if (this.game.time.now > this.bulletTime) {
      this.bullet = this.bullets.getFirstExists(false);
      if (this.bullet != null) {
        var bullet = (tmp$ = this.bullet) != null ? tmp$ : Kotlin.throwNPE();
        reset(bullet, this.sprite.body.x + 16, this.sprite.body.y + 16);
        bullet.lifespan = 2000;
        bullet.rotation = this.sprite.rotation;
        this.game.physics.arcade.velocityFromRotation(this.sprite.rotation, 400, bullet.body.velocity);
        this.bulletTime = this.game.time.now + 50;
      }
    }
  };
  AsteroidsMovement.prototype.screenWrap_okw7gk$ = function (sprite) {
    if (sprite.x < 0) {
      sprite.x = this.game.width;
    }
     else if (sprite.x > this.game.width) {
      sprite.x = 0.0;
    }
    if (sprite.y < 0) {
      sprite.y = this.game.height;
    }
     else if (sprite.y > this.game.height) {
      sprite.y = 0.0;
    }
  };
  AsteroidsMovement.prototype.render = function () {
  };
  AsteroidsMovement.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AsteroidsMovement',
    baseClasses: []
  };
  function BodyDebug() {
    Phaser.State.call(this);
    this.showDebug = true;
  }
  BodyDebug.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
  };
  BodyDebug.prototype.create = function () {
    this.game.stage.backgroundColor = '#2d2d2d';
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.physics.arcade.gravity.y = 100.0;
    this.sprite = this.game.add.sprite(150, 100, 'atari');
    enable(this.game.physics.arcade, this.sprite);
    this.sprite.body.velocity.set(-100, -100);
    this.sprite.body.bounce.set(1);
    this.sprite.body.collideWorldBounds = true;
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'toggle'), this);
  };
  BodyDebug.prototype.toggle = function () {
    this.showDebug = this.showDebug ? false : true;
    if (!this.showDebug) {
      this.game.debug.reset();
    }
  };
  BodyDebug.prototype.render = function () {
    if (this.showDebug != null) {
      this.game.debug.bodyInfo(this.sprite, 32, 32);
      this.game.debug.body(this.sprite);
    }
  };
  BodyDebug.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BodyDebug',
    baseClasses: []
  };
  function BodyEnable() {
    Phaser.State.call(this);
  }
  BodyEnable.prototype.preload = function () {
    this.game.load.spritesheet('gameboy', 'assets/sprites/gameboy_seize_color_40x60.png', 40, 60);
  };
  BodyEnable.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#124184';
    this.sprite = this.game.add.sprite(300, 0, 'gameboy', 2);
    this.sprite2 = this.game.add.sprite(300, 400, 'gameboy', 3);
    enable_0(this.game.physics.arcade, [this.sprite, this.sprite2]);
    this.game.physics.arcade.gravity.y = 200.0;
    this.sprite.body.bounce.y = 0.95;
    this.sprite.body.collideWorldBounds = true;
    this.sprite2.body.allowGravity = false;
    this.sprite2.body.immovable = true;
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'toggleBody'), this);
  };
  BodyEnable.prototype.toggleBody = function () {
    if (this.sprite2.body.enable) {
      this.sprite2.body.enable = false;
    }
     else {
      this.sprite2.body.enable = true;
    }
  };
  BodyEnable.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite, this.sprite2);
  };
  BodyEnable.prototype.render = function () {
    this.game.debug.text('Click to disable body1', 32, 32);
    if (this.sprite2.body.enable) {
      this.game.debug.body(this.sprite2);
    }
  };
  BodyEnable.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BodyEnable',
    baseClasses: []
  };
  function BodyScale() {
    Phaser.State.call(this);
  }
  BodyScale.prototype.preload = function () {
    this.game.load.spritesheet('gameboy', 'assets/sprites/gameboy_seize_color_40x60.png', 40, 60);
  };
  function BodyScale$create$ObjectLiteral() {
    this.x = 3;
    this.y = 3;
  }
  BodyScale$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  BodyScale.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#124184';
    this.sprite = this.game.add.sprite(200, 300, 'gameboy', 2);
    this.sprite.anchor.set(0.5);
    this.sprite.smoothed = false;
    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
    this.sprite.body.immovable = true;
    this.sprite2 = this.game.add.sprite(600, 270, 'gameboy', 3);
    this.game.physics.enable(this.sprite2, Phaser.Physics.ARCADE);
    this.game.add.tween(this.sprite.scale).to(new BodyScale$create$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true, 0, 1000, true);
  };
  BodyScale.prototype.update = function () {
    this.sprite2.body.velocity.x = -200;
    this.game.physics.arcade.collide(this.sprite, this.sprite2);
  };
  BodyScale.prototype.render = function () {
  };
  BodyScale.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BodyScale',
    baseClasses: []
  };
  function Bounce() {
    Phaser.State.call(this);
  }
  Bounce.prototype.preload = function () {
    this.game.load.image('flyer', 'assets/sprites/phaser-dude.png');
  };
  Bounce.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.image = this.game.add.sprite(0, 0, 'flyer');
    this.game.physics.enable(this.image, Phaser.Physics.ARCADE);
    this.image.body.velocity.setTo(200, 200);
    this.image.body.collideWorldBounds = true;
    this.image.body.bounce.set(1);
  };
  Bounce.prototype.update = function () {
  };
  Bounce.prototype.render = function () {
    this.game.debug.spriteInfo(this.image, 32, 32);
  };
  Bounce.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Bounce',
    baseClasses: []
  };
  function BounceAccelerator() {
    Phaser.State.call(this);
  }
  BounceAccelerator.prototype.preload = function () {
    this.game.load.spritesheet('dude', 'assets/games/starstruck/dude.png', 32, 48);
  };
  BounceAccelerator.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.flyer = this.game.add.sprite(400, 200, 'dude');
    this.flyer.animations.add('left', [0, 1, 2, 3], 10, true);
    this.flyer.animations.add('right', [5, 6, 7, 8], 10, true);
    this.game.physics.enable(this.flyer, Phaser.Physics.ARCADE);
    this.flyer.body.velocity.setTo(200, 200);
    this.flyer.body.collideWorldBounds = true;
    this.flyer.body.bounce.setTo(0.8, 0.8);
  };
  BounceAccelerator.prototype.update = function () {
    if (this.cursors.up.isDown) {
      this.flyer.body.acceleration.y = -600;
      if (this.flyer.body.velocity.x > 0) {
        this.flyer.animations.play('right');
      }
       else {
        this.flyer.animations.play('left');
      }
    }
     else if (this.cursors.down.isDown) {
      this.flyer.body.acceleration.y = 600;
      if (this.flyer.body.velocity.x > 0) {
        this.flyer.animations.play('right');
      }
       else {
        this.flyer.animations.play('left');
      }
    }
     else if (this.cursors.left.isDown) {
      this.flyer.body.acceleration.x = -500;
      this.flyer.animations.play('left');
    }
     else if (this.cursors.right.isDown) {
      this.flyer.body.acceleration.x = 500;
      this.flyer.animations.play('right');
    }
     else {
      this.flyer.frame = 4;
      this.flyer.body.acceleration.setTo(0, 0);
      this.flyer.animations.stop();
    }
  };
  BounceAccelerator.prototype.render = function () {
    this.game.debug.spriteInfo(this.flyer, 32, 32);
  };
  BounceAccelerator.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BounceAccelerator',
    baseClasses: []
  };
  function BounceKnock() {
    Phaser.State.call(this);
  }
  BounceKnock.prototype.preload = function () {
    this.game.load.image('dude', 'assets/sprites/phaser-dude.png');
    this.game.load.image('ball', 'assets/sprites/pangball.png');
  };
  BounceKnock.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.ball = this.game.add.sprite(400, 200, 'ball');
    this.knocker = this.game.add.sprite(400, 200, 'dude');
    this.game.physics.enable([this.knocker, this.ball], Phaser.Physics.ARCADE);
    this.knocker.body.immovable = true;
    this.ball.body.velocity.setTo(200, 200);
    this.ball.body.collideWorldBounds = true;
    this.ball.body.bounce.setTo(1, 1);
  };
  BounceKnock.prototype.update = function () {
    this.game.physics.arcade.collide(this.knocker, this.ball);
    if (this.cursors.up.isDown) {
      this.knocker.body.velocity.y = -300;
    }
     else if (this.cursors.down.isDown) {
      this.knocker.body.velocity.y = 300;
    }
     else if (this.cursors.left.isDown) {
      this.knocker.body.velocity.x = -300;
    }
     else if (this.cursors.right.isDown) {
      this.knocker.body.velocity.x = 300;
    }
     else {
      this.knocker.body.velocity.setTo(0, 0);
    }
  };
  BounceKnock.prototype.render = function () {
    this.game.debug.spriteInfo(this.ball, 32, 32);
  };
  BounceKnock.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BounceKnock',
    baseClasses: []
  };
  function BounceWithGravity() {
    Phaser.State.call(this);
  }
  BounceWithGravity.prototype.preload = function () {
    this.game.load.image('flyer', 'assets/sprites/phaser-dude.png');
  };
  BounceWithGravity.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.image = this.game.add.sprite(400, 200, 'flyer');
    this.game.physics.enable(this.image, Phaser.Physics.ARCADE);
    this.image.body.velocity.setTo(200, 200);
    this.image.body.collideWorldBounds = true;
    this.image.body.bounce.set(0.8);
    this.image.body.gravity.set(0, 180);
  };
  BounceWithGravity.prototype.update = function () {
  };
  BounceWithGravity.prototype.render = function () {
    this.game.debug.spriteInfo(this.image, 32, 32);
  };
  BounceWithGravity.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BounceWithGravity',
    baseClasses: []
  };
  function BoundingBox() {
    Phaser.State.call(this);
  }
  BoundingBox.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  BoundingBox.prototype.create = function () {
    this.game.stage.backgroundColor = '#2d2d2d';
    this.sprite1 = this.game.add.sprite(150, 300, 'atari');
    this.sprite1.name = 'atari';
    this.game.physics.enable(this.sprite1, Phaser.Physics.ARCADE);
    this.sprite1.body.immovable = true;
    this.sprite2 = this.game.add.sprite(700, 320, 'mushroom');
    this.sprite2.name = 'mushroom';
    this.game.physics.enable(this.sprite2, Phaser.Physics.ARCADE);
    this.sprite2.body.velocity.x = -100;
  };
  BoundingBox.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite1, this.sprite2, Kotlin.getBoundCallableRefForMemberFunction(this, 'collisionHandler_ge0c0c$'), null, this);
  };
  BoundingBox.prototype.collisionHandler_ge0c0c$ = function (obj1, obj2) {
    this.game.stage.backgroundColor = '#992d2d';
  };
  BoundingBox.prototype.render = function () {
    this.game.debug.bodyInfo(this.sprite1, 32, 32);
    this.game.debug.body(this.sprite1);
    this.game.debug.body(this.sprite2);
  };
  BoundingBox.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BoundingBox',
    baseClasses: []
  };
  function CircleBody() {
    Phaser.State.call(this);
  }
  CircleBody.prototype.preload = function () {
    this.game.load.image('wizball', 'assets/sprites/wizball.png');
    this.game.load.image('disk', 'assets/sprites/copy-that-floppy.png');
  };
  CircleBody.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.disk = this.game.add.sprite(80, 0, 'disk');
    this.ball1 = this.game.add.sprite(100, 240, 'wizball');
    this.ball2 = this.game.add.sprite(700, 240, 'wizball');
    enable_0(this.game.physics.arcade, [this.disk, this.ball1, this.ball2]);
    this.ball1.body.setCircle(45);
    this.ball2.body.setCircle(45);
    this.ball1.body.collideWorldBounds = true;
    this.ball2.body.collideWorldBounds = true;
    this.disk.body.collideWorldBounds = true;
    this.ball1.body.bounce.set(1);
    this.ball2.body.bounce.set(1);
    this.disk.body.bounce.set(1);
    this.ball1.body.gravity.y = 100;
    this.ball2.body.gravity.y = 100;
    this.disk.body.gravity.y = 100;
    this.ball1.body.velocity.set(150);
    this.ball2.body.velocity.set(-200, 60);
    this.disk.body.velocity.set(50);
  };
  CircleBody.prototype.update = function () {
    this.game.physics.arcade.collide(this.ball1, this.ball2);
    this.game.physics.arcade.collide(this.ball1, this.disk);
    this.game.physics.arcade.collide(this.ball2, this.disk);
  };
  CircleBody.prototype.render = function () {
    this.game.debug.body(this.disk);
    this.game.debug.body(this.ball1);
    this.game.debug.body(this.ball2);
  };
  CircleBody.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CircleBody',
    baseClasses: []
  };
  function DirectBodyMovement() {
    Phaser.State.call(this);
  }
  DirectBodyMovement.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  function DirectBodyMovement$create$ObjectLiteral() {
    this.y = 400;
  }
  DirectBodyMovement$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  DirectBodyMovement.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#2d2d2d';
    this.sprite1 = this.game.add.sprite(300, 50, 'atari');
    this.sprite2 = this.game.add.sprite(400, 450, 'mushroom');
    enable_0(this.game.physics.arcade, [this.sprite1, this.sprite2]);
    this.game.add.tween(this.sprite1.body).to(new DirectBodyMovement$create$ObjectLiteral(), 3000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
  };
  DirectBodyMovement.prototype.update = function () {
    this.game.physics.arcade.overlap(this.sprite1, this.sprite2, Kotlin.getBoundCallableRefForMemberFunction(this, 'overlapHandler_ge0c0c$'), null, this);
  };
  DirectBodyMovement.prototype.overlapHandler_ge0c0c$ = function (obj1, obj2) {
    this.game.stage.backgroundColor = '#992d2d';
    obj2.kill();
  };
  DirectBodyMovement.prototype.render = function () {
    this.game.debug.body(this.sprite1);
    this.game.debug.body(this.sprite2);
  };
  DirectBodyMovement.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DirectBodyMovement',
    baseClasses: []
  };
  function DistanceToPointer() {
    Phaser.State.call(this);
  }
  DistanceToPointer.prototype.preload = function () {
    this.game.load.image('backdrop', 'assets/pics/remember-me.jpg');
    this.game.load.image('ball', 'assets/sprites/shinyball.png');
  };
  DistanceToPointer.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.world.setBounds(0, 0, 1920, 1200);
    this.game.add.sprite(0, 0, 'backdrop');
    this.ball = this.game.add.sprite(this.game.world.randomX, 200, 'ball');
    enable(this.game.physics.arcade, this.ball);
    this.game.camera.follow(this.ball);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  DistanceToPointer.prototype.update = function () {
    this.ball.body.velocity.x = 0;
    this.ball.body.velocity.y = 0;
    if (this.cursors.left.isDown) {
      this.ball.body.velocity.x = -240;
    }
     else if (this.cursors.right.isDown) {
      this.ball.body.velocity.x = 240;
    }
    if (this.cursors.up.isDown) {
      this.ball.body.velocity.y = -240;
    }
     else if (this.cursors.down.isDown) {
      this.ball.body.velocity.y = 240;
    }
  };
  DistanceToPointer.prototype.render = function () {
    this.game.debug.text('Distance to pointer: ' + this.game.physics.arcade.distanceToPointer(this.ball), 32, 32);
  };
  DistanceToPointer.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DistanceToPointer',
    baseClasses: []
  };
  function GlobalPause() {
    Phaser.State.call(this);
  }
  GlobalPause.prototype.preload = function () {
    this.game.load.image('car', 'assets/sprites/car90.png');
    this.game.load.image('baddie', 'assets/sprites/space-baddie.png');
  };
  GlobalPause.prototype.create = function () {
    var tmp$;
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.aliens = this.game.add.group();
    this.aliens.enableBody = true;
    tmp$ = 50 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var s = this.aliens.create(this.game.world.randomX, this.game.world.randomY, 'baddie');
      s.name = 'alien' + s;
      s.body.collideWorldBounds = true;
      s.body.bounce.setTo(0.8, 0.8);
      s.body.velocity.setTo(10 + random(Phaser.Math) * 40, 10 + random(Phaser.Math) * 40);
    }
    this.car = this.game.add.sprite(400, 300, 'car');
    this.car.name = 'car';
    this.car.anchor.set(0.5);
    this.game.physics.enable(this.car, Phaser.Physics.ARCADE);
    this.car.body.collideWorldBounds = true;
    this.car.body.bounce.set(0.8);
    this.car.body.allowRotation = true;
    this.car.body.immovable = true;
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.spaceKey = this.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
    this.spaceKey.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'togglePause'), this);
  };
  GlobalPause.prototype.togglePause = function () {
    this.game.physics.arcade.isPaused = this.game.physics.arcade.isPaused ? false : true;
  };
  GlobalPause.prototype.update = function () {
    this.game.physics.arcade.collide(this.car, this.aliens);
    this.car.body.velocity.x = 0;
    this.car.body.velocity.y = 0;
    this.car.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.car.body.angularVelocity = -200;
    }
     else if (this.cursors.right.isDown) {
      this.car.body.angularVelocity = 200;
    }
    if (this.cursors.up.isDown) {
      this.car.body.velocity.copyFrom(this.game.physics.arcade.velocityFromAngle(this.car.angle, 300));
    }
  };
  GlobalPause.prototype.render = function () {
  };
  GlobalPause.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GlobalPause',
    baseClasses: []
  };
  function Gravity() {
    Phaser.State.call(this);
  }
  Gravity.prototype.preload = function () {
    this.game.load.image('ilkke', 'assets/sprites/ilkke.png');
  };
  Gravity.prototype.create = function () {
    this.game.stage.backgroundColor = '#2d2d2d';
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.physics.arcade.gravity.y = 100.0;
    this.sprite1 = this.game.add.sprite(100, 96, 'ilkke');
    this.sprite2 = this.game.add.sprite(300, 96, 'ilkke');
    this.sprite3 = this.game.add.sprite(500, 96, 'ilkke');
    this.sprite4 = this.game.add.sprite(700, 96, 'ilkke');
    this.game.physics.enable([this.sprite1, this.sprite2, this.sprite3, this.sprite4], Phaser.Physics.ARCADE);
    this.sprite1.body.collideWorldBounds = true;
    this.sprite1.body.bounce.y = 0.8;
    this.sprite2.body.collideWorldBounds = true;
    this.sprite2.body.bounce.y = 0.8;
    this.sprite2.body.gravity.y = 200;
    this.sprite3.body.collideWorldBounds = true;
    this.sprite3.body.bounce.y = 0.8;
    this.sprite3.body.gravity.y = 50;
    this.sprite4.body.allowGravity = false;
  };
  Gravity.prototype.render = function () {
    this.game.debug.text('world gravity', this.sprite1.x - 32, 64);
    this.game.debug.text('local gravity', this.sprite2.x - 32, 64);
    this.game.debug.text('local / 2', this.sprite3.x - 32, 64);
    this.game.debug.text('no gravity', this.sprite4.x - 32, 64);
  };
  Gravity.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Gravity',
    baseClasses: []
  };
  function GravityAndDrag() {
    Phaser.State.call(this);
  }
  GravityAndDrag.prototype.preload = function () {
    this.game.load.image('ilkke', 'assets/sprites/atari800xl.png');
  };
  GravityAndDrag.prototype.create = function () {
    this.game.stage.backgroundColor = '#2d2d2d';
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.physics.arcade.gravity.y = 100.0;
    this.sprite = this.game.add.sprite(100, 96, 'ilkke');
    enable(this.game.physics.arcade, this.sprite);
    this.sprite.body.collideWorldBounds = true;
    this.sprite.body.velocity.x = 200;
    this.sprite.body.bounce.set(0.9);
    this.sprite.inputEnabled = true;
    this.sprite.input.enableDrag();
    this.sprite.events.onDragStart.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'startDrag'), this);
    this.sprite.events.onDragStop.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'stopDrag'), this);
    this.game.add.text(32, 32, 'Drag and release the sprite', TextStyle('16px Arial', void 0, void 0, void 0, void 0, void 0, '#ffffff'));
  };
  GravityAndDrag.prototype.startDrag = function () {
    this.sprite.body.moves = false;
  };
  GravityAndDrag.prototype.stopDrag = function () {
    this.sprite.body.moves = true;
  };
  GravityAndDrag.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GravityAndDrag',
    baseClasses: []
  };
  function GroupVsGroup() {
    Phaser.State.call(this);
    this.bulletTime = 0.0;
    this.bullet = null;
  }
  GroupVsGroup.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser-dude.png');
    this.game.load.image('bullet', 'assets/misc/bullet0.png');
    this.game.load.spritesheet('veggies', 'assets/sprites/fruitnveg32wh37.png', 32, 32);
  };
  GroupVsGroup.prototype.create = function () {
    var tmp$, tmp$_0;
    this.game.stage.backgroundColor = '#2d2d2d';
    this.veggies = this.game.add.group();
    this.veggies.enableBody = true;
    this.veggies.physicsBodyType = Phaser.Physics.ARCADE;
    tmp$ = 50 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var c = this.veggies.create(this.game.world.randomX, random(Phaser.Math) * 500, 'veggies', this.game.rnd.integerInRange(0, 36));
      c.name = 'veg' + i;
      c.body.immovable = true;
    }
    this.bullets = this.game.add.group();
    this.bullets.enableBody = true;
    this.bullets.physicsBodyType = Phaser.Physics.ARCADE;
    tmp$_0 = 20 - 1;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      var b = this.bullets.create(0, 0, 'bullet');
      b.name = 'bullet' + i_0;
      b.exists = false;
      b.visible = false;
      b.checkWorldBounds = true;
      b.events.onOutOfBounds.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'resetBullet_okw7gk$'), this);
    }
    this.sprite = this.game.add.sprite(400, 550, 'phaser');
    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.input.keyboard.addKeyCapture([Phaser.Keyboard.SPACEBAR]);
  };
  GroupVsGroup.prototype.update = function () {
    this.game.physics.arcade.overlap(this.bullets, this.veggies, Kotlin.getBoundCallableRefForMemberFunction(this, 'collisionHandler_ge0c0c$'), null, this);
    this.sprite.body.velocity.x = 0;
    this.sprite.body.velocity.y = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -300;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 300;
    }
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
      this.fireBullet();
    }
  };
  GroupVsGroup.prototype.fireBullet = function () {
    var tmp$;
    if (this.game.time.now > this.bulletTime) {
      this.bullet = this.bullets.getFirstExists(false);
      if (this.bullet != null) {
        var bullet = (tmp$ = this.bullet) != null ? tmp$ : Kotlin.throwNPE();
        reset(bullet, this.sprite.x + 6, this.sprite.y - 8);
        bullet.body.velocity.y = -300;
        this.bulletTime = this.game.time.now + 150;
      }
    }
  };
  GroupVsGroup.prototype.resetBullet_okw7gk$ = function (bullet) {
    bullet.kill();
  };
  GroupVsGroup.prototype.collisionHandler_ge0c0c$ = function (bullet, veg) {
    bullet.kill();
    veg.kill();
  };
  GroupVsGroup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GroupVsGroup',
    baseClasses: []
  };
  function GroupVsSelf() {
    Phaser.State.call(this);
  }
  GroupVsSelf.prototype.preload = function () {
    this.game.load.spritesheet('spinner', 'assets/sprites/bluemetal_32x32x4.png', 32, 32);
  };
  GroupVsSelf.prototype.create = function () {
    var tmp$;
    this.sprites = this.game.add.physicsGroup(Phaser.Physics.ARCADE);
    tmp$ = 90 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var s = this.sprites.create(this.game.rnd.integerInRange(100, 700), this.game.rnd.integerInRange(32, 200), 'spinner');
      s.animations.add('spin', [0, 1, 2, 3]);
      s.play('spin', 20, true);
      s.body.velocity.set(this.game.rnd.integerInRange(-200, 200), this.game.rnd.integerInRange(-200, 200));
    }
    this.sprites.setAll('body.collideWorldBounds', true);
    this.sprites.setAll('body.bounce.x', 1);
    this.sprites.setAll('body.bounce.y', 1);
  };
  GroupVsSelf.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprites);
  };
  GroupVsSelf.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GroupVsSelf',
    baseClasses: []
  };
  function LargerBoundingBox() {
    Phaser.State.call(this);
  }
  LargerBoundingBox.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  LargerBoundingBox.prototype.create = function () {
    this.game.stage.backgroundColor = '#2d2d2d';
    this.sprite1 = this.game.add.sprite(130, 200, 'atari');
    this.sprite1.name = 'atari';
    this.game.physics.enable(this.sprite1, Phaser.Physics.ARCADE);
    this.sprite1.body.setSize(400, 50, -100, 20);
    this.sprite1.body.immovable = true;
    this.sprite2 = this.game.add.sprite(700, 210, 'mushroom');
    this.sprite2.name = 'mushroom';
    this.game.physics.enable(this.sprite2, Phaser.Physics.ARCADE);
    this.sprite2.body.velocity.x = -100;
  };
  LargerBoundingBox.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite1, this.sprite2, Kotlin.getBoundCallableRefForMemberFunction(this, 'collisionHandler_ge0c0c$'), null, this);
  };
  LargerBoundingBox.prototype.collisionHandler_ge0c0c$ = function (obj1, obj2) {
    this.game.stage.backgroundColor = '#992d2d';
  };
  LargerBoundingBox.prototype.render = function () {
    this.game.debug.bodyInfo(this.sprite2, 32, 32);
    this.game.debug.body(this.sprite1);
    this.game.debug.body(this.sprite2);
  };
  LargerBoundingBox.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LargerBoundingBox',
    baseClasses: []
  };
  function Launcher() {
    Phaser.State.call(this);
    this.catchFlag = false;
    this.launchVelocity = 0.0;
  }
  Launcher.prototype.preload = function () {
    this.game.load.image('analog', 'assets/tests/fusia.png');
    this.game.load.image('arrow', 'assets/sprites/longarrow2.png');
    this.game.load.image('ball', 'assets/sprites/pangball.png');
  };
  Launcher.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.physics.arcade.gravity.y = 200.0;
    this.game.stage.backgroundColor = '#0072bc';
    var graphics = this.game.add.graphics(0, 0);
    graphics.beginFill(302604);
    graphics.drawRect(395, 350, 10, 250);
    this.analog = this.game.add.sprite(400, 350, 'analog');
    this.game.physics.enable(this.analog, Phaser.Physics.ARCADE);
    this.analog.body.allowGravity = false;
    this.analog.width = 8.0;
    this.analog.rotation = 220.0;
    this.analog.alpha = 0.0;
    this.analog.anchor.setTo(0.5, 0.0);
    this.arrow = this.game.add.sprite(400, 350, 'arrow');
    this.game.physics.enable(this.arrow, Phaser.Physics.ARCADE);
    this.arrow.anchor.setTo(0.1, 0.5);
    this.arrow.body.moves = false;
    this.arrow.body.allowGravity = false;
    this.arrow.alpha = 0.0;
    this.ball = this.game.add.sprite(100, 400, 'ball');
    this.game.physics.enable(this.ball, Phaser.Physics.ARCADE);
    this.ball.anchor.setTo(0.5, 0.5);
    this.ball.body.collideWorldBounds = true;
    this.ball.body.bounce.setTo(0.9, 0.9);
    this.ball.inputEnabled = true;
    this.ball.input.start(0, true);
    this.ball.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'set_xslgx6$'));
    this.ball.events.onInputUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'launch'));
  };
  Launcher.prototype.set_xslgx6$ = function (ball, pointer) {
    ball.body.moves = false;
    ball.body.velocity.setTo(0, 0);
    ball.body.allowGravity = false;
    this.catchFlag = true;
  };
  Launcher.prototype.launch = function () {
    this.catchFlag = false;
    this.ball.body.moves = true;
    this.arrow.alpha = 0.0;
    this.analog.alpha = 0.0;
    var Xvector = (this.arrow.x - this.ball.x) * 3;
    var Yvector = (this.arrow.y - this.ball.y) * 3;
    this.ball.body.allowGravity = true;
    this.ball.body.velocity.setTo(Xvector, Yvector);
  };
  Launcher.prototype.update = function () {
    this.arrow.rotation = this.game.physics.arcade.angleBetween(this.arrow, this.ball);
    if (Kotlin.equals(this.catchFlag, true)) {
      this.ball.x = this.game.input.activePointer.worldX;
      this.ball.y = this.game.input.activePointer.worldY;
      this.arrow.alpha = 1.0;
      this.analog.alpha = 0.5;
      this.analog.rotation = this.arrow.rotation - 3.14 / 2;
      this.analog.height = this.game.physics.arcade.distanceToPointer(this.arrow);
      this.launchVelocity = this.analog.height;
    }
  };
  Launcher.prototype.render = function () {
    this.game.debug.text('Drag the ball and release to launch', 32, 32);
    this.game.debug.bodyInfo(this.ball, 32, 64);
  };
  Launcher.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Launcher',
    baseClasses: []
  };
  function LauncherFollow() {
    Phaser.State.call(this);
    this.catchFlag = false;
    this.launchVelocity = 0.0;
  }
  LauncherFollow.prototype.preload = function () {
    this.game.load.image('background', 'assets/misc/starfield.jpg');
    this.game.load.image('player', 'assets/sprites/phaser-dude.png');
    this.game.load.image('analog', 'assets/tests/fusia.png');
    this.game.load.image('arrow', 'assets/sprites/longarrow2.png');
  };
  LauncherFollow.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.world.setBounds(0, 0, 3400, 1000);
    this.game.add.tileSprite(0, 0, 3400, 1000, 'background');
    this.analog = this.game.add.sprite(200, 450, 'analog');
    this.analog.width = 8.0;
    this.analog.rotation = 220.0;
    this.analog.alpha = 0.0;
    this.analog.anchor.setTo(0.5, 0.0);
    this.arrow = this.game.add.sprite(200, 450, 'arrow');
    this.arrow.anchor.setTo(0.1, 0.5);
    this.arrow.alpha = 0.0;
    this.player = this.game.add.sprite(150, 320, 'player');
    this.game.physics.enable([this.player], Phaser.Physics.ARCADE);
    this.player.anchor.set(0.5);
    this.player.body.collideWorldBounds = true;
    this.player.body.bounce.set(0.9);
    this.player.body.drag.set(20, 20);
    this.player.inputEnabled = true;
    this.player.input.start(0, true);
    this.player.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'set_xslgx6$'));
    this.player.events.onInputUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'launch'));
    this.game.camera.follow(this.player, Phaser.Camera.FOLLOW_TOPDOWN);
  };
  LauncherFollow.prototype.set_xslgx6$ = function (player, pointer) {
    this.catchFlag = true;
    this.game.camera.follow(null);
    player.body.moves = false;
    player.body.velocity.setTo(0, 0);
    reset(this.arrow, player.x, player.y);
    reset(this.analog, player.x, player.y);
  };
  LauncherFollow.prototype.launch = function () {
    this.catchFlag = false;
    this.player.body.moves = true;
    this.game.camera.follow(this.player, Phaser.Camera.FOLLOW_TOPDOWN);
    this.arrow.alpha = 0.0;
    this.analog.alpha = 0.0;
    var Xvector = (this.arrow.x - this.player.x) * 3;
    var Yvector = (this.arrow.y - this.player.y) * 3;
    this.player.body.velocity.setTo(Xvector, Yvector);
  };
  LauncherFollow.prototype.update = function () {
    this.arrow.rotation = this.game.physics.arcade.angleBetween(this.arrow, this.player);
    if (Kotlin.equals(this.catchFlag, true)) {
      this.player.x = this.game.input.activePointer.worldX;
      this.player.y = this.game.input.activePointer.worldY;
      this.arrow.alpha = 1.0;
      this.analog.alpha = 0.5;
      this.analog.rotation = this.arrow.rotation - 3.14 / 2;
      this.analog.height = this.game.physics.arcade.distanceBetween(this.arrow, this.player);
      this.launchVelocity = this.analog.height;
    }
  };
  LauncherFollow.prototype.render = function () {
    this.game.debug.text('Drag the sprite and release to launch', 32, 32, 'rgb(0,255,0)');
    this.game.debug.cameraInfo(this.game.camera, 32, 64);
    this.game.debug.spriteCoords(this.player, 32, 150);
    this.game.debug.text('Launch Velocity: ' + this.launchVelocity, 550, 32, 'rgb(0,255,0)');
  };
  LauncherFollow.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LauncherFollow',
    baseClasses: []
  };
  function LauncherFollowWorld() {
    Phaser.State.call(this);
    this.catchFlag = false;
    this.launchVelocity = 0.0;
    this.launched = false;
  }
  LauncherFollowWorld.prototype.preload = function () {
    this.game.load.image('background', 'assets/misc/starfield.jpg');
    this.game.load.image('player', 'assets/sprites/phaser-dude.png');
    this.game.load.image('analog', 'assets/tests/fusia.png');
    this.game.load.image('arrow', 'assets/sprites/longarrow2.png');
  };
  function LauncherFollowWorld$create$ObjectLiteral() {
    this.x = 150;
  }
  LauncherFollowWorld$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  LauncherFollowWorld.prototype.create = function () {
    this.game.world.setBounds(0, 0, 5000, 600);
    this.game.add.tileSprite(0, 0, 5000, 600, 'background');
    var graphics = this.game.add.graphics(0, 0);
    graphics.beginFill(302604);
    graphics.drawRect(395, 400, 10, 250);
    this.analog = this.game.add.sprite(400, 400, 'analog');
    this.analog.width = 8.0;
    this.analog.rotation = 220.0;
    this.analog.alpha = 0.0;
    this.analog.anchor.setTo(0.5, 0.0);
    this.arrow = this.game.add.sprite(400, 400, 'arrow');
    this.arrow.anchor.setTo(0.1, 0.5);
    this.arrow.alpha = 0.0;
    this.player = this.game.add.sprite(150, 320, 'player');
    this.player.anchor.setTo(0.5, 0.5);
    this.game.physics.enable(this.player, Phaser.Physics.ARCADE);
    this.player.body.collideWorldBounds = true;
    this.player.body.bounce.set(0.9);
    this.player.body.drag.set(20, 0);
    this.player.inputEnabled = true;
    this.player.input.start(0, true);
    this.player.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'set_xslgx6$'));
    this.player.events.onInputUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'launch'));
    this.myTween = this.game.add.tween(this.player).to(new LauncherFollowWorld$create$ObjectLiteral(), 5000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'));
    this.myTween.onComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'reappear'), this);
    this.game.camera.follow(this.player, Phaser.Camera.FOLLOW_TOPDOWN);
  };
  LauncherFollowWorld.prototype.reappear = function () {
    this.launched = false;
    this.player.alpha = 1.0;
  };
  LauncherFollowWorld.prototype.set_xslgx6$ = function (player, pointer) {
    if (!this.launched) {
      this.catchFlag = true;
      this.game.camera.follow(null);
      player.body.moves = false;
      player.body.gravity.set(0);
      player.body.velocity.set(0);
    }
  };
  LauncherFollowWorld.prototype.launch = function () {
    if (this.catchFlag) {
      this.catchFlag = false;
      this.launched = true;
      this.game.camera.follow(this.player, Phaser.Camera.FOLLOW_TOPDOWN);
      this.arrow.alpha = 0.0;
      this.analog.alpha = 0.0;
      var Xvector = (this.arrow.x - this.player.x) * 3;
      var Yvector = (this.arrow.y - this.player.y) * 3;
      this.player.body.moves = true;
      this.player.body.gravity.setTo(0, 180);
      this.player.body.velocity.setTo(Xvector, Yvector);
    }
  };
  LauncherFollowWorld.prototype.update = function () {
    this.arrow.rotation = this.game.physics.arcade.angleBetween(this.arrow, this.player);
    if (this.catchFlag) {
      var distance = this.game.physics.arcade.distanceToPointer(this.arrow);
      var theta = this.game.physics.arcade.angleToPointer(this.arrow);
      if (distance > 300) {
        distance = 300.0;
        var adjacentX = cos(Phaser.Math, theta) * distance;
        var oppositeY = sin(Phaser.Math, theta) * distance;
        this.player.x = 400 + adjacentX;
        this.player.y = 400 + oppositeY;
        this.analog.height = distance;
      }
       else {
        this.player.x = this.game.input.activePointer.worldX;
        this.player.y = this.game.input.activePointer.worldY;
        this.analog.height = distance;
      }
      this.arrow.alpha = 1.0;
      this.analog.alpha = 0.5;
      this.analog.rotation = this.arrow.rotation - get_PI(Phaser.Math) / 2;
      this.launchVelocity = this.analog.height;
    }
    var tweening = this.myTween.isRunning;
    if (!tweening && this.launched && (this.player.x >= this.game.world.width - 20 || this.player.body.deltaX() == 0)) {
      this.player.body.velocity.setTo(0, 0);
      this.player.alpha = 0.0;
      this.player.body.moves = false;
      this.player.x = 150.0;
      this.player.y = 320.0;
      this.myTween.start();
    }
  };
  LauncherFollowWorld.prototype.render = function () {
    this.game.debug.text('Drag the sprite and release to launch', 32, 32, 'rgb(0,255,0)');
    this.game.debug.cameraInfo(this.game.camera, 32, 64);
    this.game.debug.spriteCoords(this.player, 32, 150);
    this.game.debug.text('Launch Velocity: ' + this.launchVelocity, 550, 32, 'rgb(0,255,0)');
  };
  LauncherFollowWorld.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LauncherFollowWorld',
    baseClasses: []
  };
  function MassVelocityTest() {
    Phaser.State.call(this);
  }
  MassVelocityTest.prototype.preload = function () {
    this.game.load.image('car', 'assets/sprites/car90.png');
    this.game.load.image('baddie', 'assets/sprites/space-baddie.png');
  };
  MassVelocityTest.prototype.create = function () {
    var tmp$;
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.aliens = this.game.add.group();
    this.aliens.enableBody = true;
    tmp$ = 50 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var s = this.aliens.create(this.game.world.randomX, this.game.world.randomY, 'baddie');
      s.name = 'alien' + s;
      s.body.collideWorldBounds = true;
      s.body.bounce.setTo(0.8, 0.8);
      s.body.velocity.setTo(10 + random(Phaser.Math) * 40, 10 + random(Phaser.Math) * 40);
    }
    this.car = this.game.add.sprite(400, 300, 'car');
    this.car.name = 'car';
    this.car.anchor.set(0.5);
    this.game.physics.enable(this.car, Phaser.Physics.ARCADE);
    this.car.body.collideWorldBounds = true;
    this.car.body.bounce.set(0.8);
    this.car.body.allowRotation = true;
    this.car.body.immovable = true;
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  MassVelocityTest.prototype.update = function () {
    this.game.physics.arcade.collide(this.car, this.aliens);
    this.car.body.velocity.x = 0;
    this.car.body.velocity.y = 0;
    this.car.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.car.body.angularVelocity = -200;
    }
     else if (this.cursors.right.isDown) {
      this.car.body.angularVelocity = 200;
    }
    if (this.cursors.up.isDown) {
      this.car.body.velocity.copyFrom(this.game.physics.arcade.velocityFromAngle(this.car.angle, 300));
    }
  };
  MassVelocityTest.prototype.render = function () {
  };
  MassVelocityTest.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MassVelocityTest',
    baseClasses: []
  };
  function MoveOverDistance() {
    Phaser.State.call(this);
    this.startTime = 0.0;
    this.endTime = 0.0;
    this.duration = 0.0;
  }
  MoveOverDistance.prototype.preload = function () {
    this.game.load.image('clown', 'assets/sprites/clown.png');
    this.game.load.image('block', 'assets/sprites/block.png');
  };
  MoveOverDistance.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.sprite = this.game.add.sprite(200, 300, 'clown');
    this.block = this.game.add.sprite(600, 280, 'block');
    enable(this.game.physics.arcade, this.sprite);
    enable(this.game.physics.arcade, this.block);
    this.sprite.body.bounce.set(1);
    this.sprite.body.collideWorldBounds = true;
    this.block.body.immovable = true;
    this.sprite.body.onMoveComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'moveOver'), this);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'move'), this);
  };
  MoveOverDistance.prototype.move = function () {
    this.sprite.body.moveTo(2000, 300, Phaser.ANGLE_RIGHT);
    this.startTime = this.game.time.time;
    this.duration = 0.0;
  };
  MoveOverDistance.prototype.moveOver = function () {
    this.endTime = this.game.time.time;
    this.duration = this.endTime - this.startTime;
  };
  MoveOverDistance.prototype.moveCallback_fdzr97$ = function (body, velocity, percent) {
    velocity.y = -200 + sin(Phaser.Math, percent) * 400;
  };
  MoveOverDistance.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite, this.block);
  };
  MoveOverDistance.prototype.render = function () {
    this.game.debug.text('expire: ' + this.sprite.body.moveTimer, 32, 32);
    this.game.debug.text('vx: ' + this.sprite.body.velocity.x, 300, 32);
    this.game.debug.text('vy: ' + this.sprite.body.velocity.y, 600, 32);
    this.game.debug.text('duration: ' + this.duration, 32, 64);
    this.game.debug.text('m: ' + this.sprite.body.isMoving, 300, 64);
    this.game.debug.text('sx: 200', 32, 96);
  };
  MoveOverDistance.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MoveOverDistance',
    baseClasses: []
  };
  function MoveToPointer() {
    Phaser.State.call(this);
  }
  MoveToPointer.prototype.preload = function () {
    this.game.load.image('backdrop', 'assets/pics/remember-me.jpg');
    this.game.load.image('ball', 'assets/sprites/shinyball.png');
  };
  MoveToPointer.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.world.setBounds(0, 0, 1920, 1200);
    this.game.add.sprite(0, 0, 'backdrop');
    this.ball = this.game.add.sprite(this.game.world.randomX, 200, 'ball');
    enable(this.game.physics.arcade, this.ball);
    this.game.camera.follow(this.ball);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'moveBall'), this);
  };
  MoveToPointer.prototype.moveBall = function () {
    this.game.camera.follow();
    this.game.physics.arcade.moveToPointer(this.ball, 100);
  };
  MoveToPointer.prototype.render = function () {
    this.game.debug.text('distance: ' + this.game.physics.arcade.distanceToPointer(this.ball), 32, 32);
  };
  MoveToPointer.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MoveToPointer',
    baseClasses: []
  };
  function MoveTowardsObject() {
    Phaser.State.call(this);
  }
  MoveTowardsObject.prototype.preload = function () {
    this.game.load.image('ball', 'assets/sprites/shinyball.png');
  };
  MoveTowardsObject.prototype.create = function () {
    var tmp$;
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.balls = this.game.add.group();
    this.balls.enableBody = true;
    tmp$ = 50 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var ball = this.balls.create(this.game.world.randomX, this.game.world.randomY, 'ball');
    }
  };
  MoveTowardsObject.prototype.update = function () {
    if (this.game.input.mousePointer.isDown) {
      this.balls.forEach(Kotlin.getBoundCallableRefForMemberFunction(this.game.physics.arcade, 'moveToPointer'), this.game.physics.arcade, false, 200);
    }
     else {
      this.balls.setAll('body.velocity.x', 0);
      this.balls.setAll('body.velocity.y', 0);
    }
  };
  MoveTowardsObject.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MoveTowardsObject',
    baseClasses: []
  };
  function MultiAngleToPointer() {
    Phaser.State.call(this);
  }
  MultiAngleToPointer.prototype.preload = function () {
    this.game.load.image('arrow', 'assets/sprites/longarrow.png');
  };
  MultiAngleToPointer.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#363636';
    this.sprite1 = this.game.add.sprite(150, 150, 'arrow');
    this.sprite1.anchor.setTo(0.1, 0.5);
    this.sprite2 = this.game.add.sprite(200, 500, 'arrow');
    this.sprite2.anchor.setTo(0.1, 0.5);
    this.sprite3 = this.game.add.sprite(400, 200, 'arrow');
    this.sprite3.anchor.setTo(0.1, 0.5);
    this.sprite4 = this.game.add.sprite(600, 400, 'arrow');
    this.sprite4.anchor.setTo(0.1, 0.5);
  };
  MultiAngleToPointer.prototype.update = function () {
    this.sprite1.rotation = this.game.physics.arcade.angleToPointer(this.sprite1);
    this.sprite2.rotation = this.game.physics.arcade.angleToPointer(this.sprite2);
    this.sprite3.rotation = this.game.physics.arcade.angleToPointer(this.sprite3);
    this.sprite4.rotation = this.game.physics.arcade.angleToPointer(this.sprite4);
  };
  MultiAngleToPointer.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MultiAngleToPointer',
    baseClasses: []
  };
  function Multiball() {
    Phaser.State.call(this);
  }
  Multiball.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.spritesheet('bullets', 'assets/sprites/balls.png', 17, 17);
  };
  function Multiball$create$ObjectLiteral() {
    this.font = '18px Arial';
    this.fill = '#ffffff';
  }
  Multiball$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Multiball.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#2d2d2d';
    this.balls = this.game.add.group();
    this.balls.createMultiple(250, 'bullets', 0, false);
    this.atari = this.game.add.sprite(300, 450, 'atari');
    this.game.physics.arcade.gravity.y = 400.0;
    enable_5(this.game.physics.arcade, this.game.world, true);
    this.atari.body.allowGravity = 0;
    this.atari.body.immovable = true;
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.time.events.loop(150, Kotlin.getBoundCallableRefForMemberFunction(this, 'fire'), this);
    this.game.add.text(16, 16, 'Left / Right to move', new Multiball$create$ObjectLiteral());
  };
  Multiball.prototype.fire = function () {
    var ball = this.balls.getFirstExists(false);
    if (ball != null) {
      ball.frame = this.game.rnd.integerInRange(0, 6);
      ball.exists = true;
      reset(ball, this.game.world.randomX, 0);
      ball.body.bounce.y = 0.8;
    }
  };
  Multiball.prototype.reflect_ge0c0c$ = function (a, ball) {
    if (ball.y > this.atari.y + 5) {
      return true;
    }
     else {
      ball.body.velocity.x = this.atari.body.velocity.x;
      ball.body.velocity.y *= -ball.body.bounce.y;
      return false;
    }
  };
  function Multiball$update$lambda(a, b) {
  }
  Multiball.prototype.update = function () {
    this.game.physics.arcade.collide(this.atari, this.balls, Multiball$update$lambda, Kotlin.getBoundCallableRefForMemberFunction(this, 'reflect_ge0c0c$'), this);
    this.atari.body.velocity.x = 0;
    if (this.cursors.left.isDown) {
      this.atari.body.velocity.x = -200;
    }
     else if (this.cursors.right.isDown) {
      this.atari.body.velocity.x = 200;
    }
    this.balls.forEachAlive(Kotlin.getBoundCallableRefForMemberFunction(this, 'checkBounds_okw7gk$'), this);
  };
  Multiball.prototype.checkBounds_okw7gk$ = function (ball) {
    if (ball.y > 600) {
      ball.kill();
    }
  };
  Multiball.prototype.render = function () {
  };
  Multiball.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Multiball',
    baseClasses: []
  };
  function NestedGroup() {
    Phaser.State.call(this);
  }
  NestedGroup.prototype.preload = function () {
    this.game.load.spritesheet('spinner', 'assets/sprites/bluemetal_32x32x4.png', 32, 32);
    this.game.load.image('phaser', 'assets/sprites/phaser.png');
  };
  NestedGroup.prototype.create = function () {
    var tmp$;
    this.sprites = this.game.add.group();
    tmp$ = 30 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var s = this.sprites.create(this.game.rnd.integerInRange(100, 700), this.game.rnd.integerInRange(32, 200), 'spinner');
      s.animations.add('spin', [0, 1, 2, 3]);
      s.play('spin', 20, true);
      this.game.physics.enable(s, Phaser.Physics.ARCADE);
      s.body.velocity.x = this.game.rnd.integerInRange(-200, 200);
      s.body.velocity.y = this.game.rnd.integerInRange(-200, 200);
    }
    var groupB = this.game.make.group();
    groupB.create(16, 16, 'phaser');
    this.sprites.add(groupB);
    this.sprites.setAll('body.collideWorldBounds', true);
    this.sprites.setAll('body.bounce.x', 1);
    this.sprites.setAll('body.bounce.y', 1);
    this.sprites.setAll('body.minBounceVelocity', 0);
  };
  NestedGroup.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprites);
  };
  NestedGroup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'NestedGroup',
    baseClasses: []
  };
  function OffsetBoundingBox() {
    Phaser.State.call(this);
  }
  OffsetBoundingBox.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  OffsetBoundingBox.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#2d2d2d';
    this.sprite1 = this.game.add.sprite(150, 200, 'atari');
    this.sprite1.name = 'atari';
    this.sprite2 = this.game.add.sprite(700, 220, 'mushroom');
    this.sprite2.name = 'mushroom';
    this.game.physics.enable([this.sprite1, this.sprite2], Phaser.Physics.ARCADE);
    this.sprite1.body.setSize(100, 50, 50, 25);
    this.sprite1.body.immovable = true;
    this.sprite2.body.velocity.x = -100;
  };
  OffsetBoundingBox.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite1, this.sprite2, Kotlin.getBoundCallableRefForMemberFunction(this, 'collisionHandler_ge0c0c$'), null, this);
  };
  OffsetBoundingBox.prototype.collisionHandler_ge0c0c$ = function (obj1, obj2) {
    this.game.stage.backgroundColor = '#992d2d';
  };
  OffsetBoundingBox.prototype.render = function () {
    this.game.debug.bodyInfo(this.sprite1, 32, 32);
    this.game.debug.body(this.sprite1);
    this.game.debug.body(this.sprite2);
  };
  OffsetBoundingBox.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'OffsetBoundingBox',
    baseClasses: []
  };
  function OnCollideEvent() {
    Phaser.State.call(this);
  }
  OnCollideEvent.prototype.preload = function () {
    this.game.load.image('space', 'assets/skies/space3.png');
    this.game.load.spritesheet('face', 'assets/sprites/metalface78x92.png', 78, 92);
  };
  OnCollideEvent.prototype.create = function () {
    this.game.add.sprite(0, 0, 'space');
    this.face1 = this.game.add.sprite(0, 0, 'face');
    this.face2 = this.game.add.sprite(500, 0, 'face');
    this.face1.animations.add('flash', [0, 1, 2, 3, 2, 1, 0], 24, false);
    this.face2.animations.add('flash', [0, 1, 2, 3, 2, 1, 0], 24, false);
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    enable_0(this.game.physics.arcade, [this.face1, this.face2]);
    this.face1.body.velocity.setTo(200, 200);
    this.face1.body.bounce.set(1);
    this.face2.body.velocity.setTo(-200, 200);
    this.face2.body.bounce.set(1);
    this.face1.body.collideWorldBounds = true;
    this.face2.body.collideWorldBounds = true;
    this.face1.body.onCollide = new Signal();
    this.face1.body.onCollide.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'hitSprite_ge0c0c$'), this);
  };
  OnCollideEvent.prototype.hitSprite_ge0c0c$ = function (sprite1, sprite2) {
    sprite1.play('flash');
    sprite2.play('flash');
  };
  OnCollideEvent.prototype.update = function () {
    this.game.physics.arcade.collide(this.face1, this.face2);
  };
  OnCollideEvent.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'OnCollideEvent',
    baseClasses: []
  };
  function OneWayCollision() {
    Phaser.State.call(this);
  }
  OneWayCollision.prototype.preload = function () {
    this.game.load.spritesheet('gameboy', 'assets/sprites/gameboy_seize_color_40x60.png', 40, 60);
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
  };
  OneWayCollision.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#124184';
    this.sprite = this.game.add.sprite(300, 200, 'atari');
    this.sprite.name = 'atari';
    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
    this.sprite.body.collideWorldBounds = true;
    this.sprite.body.checkCollision.up = false;
    this.sprite.body.checkCollision.down = false;
    this.sprite.body.immovable = true;
    this.sprite2 = this.game.add.sprite(350, 400, 'gameboy', 2);
    this.sprite2.name = 'gameboy';
    this.game.physics.enable(this.sprite2, Phaser.Physics.ARCADE);
    this.sprite2.body.collideWorldBounds = true;
    this.sprite2.body.bounce.setTo(1, 1);
    this.sprite3 = this.game.add.sprite(0, 210, 'gameboy', 4);
    this.game.physics.enable(this.sprite3, Phaser.Physics.ARCADE);
    this.sprite3.name = 'gameboy2';
    this.sprite3.body.collideWorldBounds = true;
    this.sprite3.body.bounce.setTo(1, 1);
    this.sprite2.body.velocity.y = -200;
    this.sprite3.body.velocity.x = 200;
  };
  OneWayCollision.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite, this.sprite2);
    this.game.physics.arcade.collide(this.sprite, this.sprite3);
  };
  OneWayCollision.prototype.render = function () {
    this.game.debug.bodyInfo(this.sprite, 16, 24);
  };
  OneWayCollision.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'OneWayCollision',
    baseClasses: []
  };
  function PlatformerBasics() {
    Phaser.State.call(this);
    this.facing = 'left';
    this.jumpTimer = 0.0;
  }
  PlatformerBasics.prototype.preload = function () {
    this.game.load.spritesheet('dude', 'assets/games/starstruck/dude.png', 32, 48);
    this.game.load.image('background', 'assets/games/starstruck/background2.png');
  };
  PlatformerBasics.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.time.desiredFps = 30.0;
    this.bg = this.game.add.tileSprite(0, 0, 800, 600, 'background');
    this.game.physics.arcade.gravity.y = 250.0;
    this.player = this.game.add.sprite(32, 32, 'dude');
    this.game.physics.enable(this.player, Phaser.Physics.ARCADE);
    this.player.body.bounce.y = 0.2;
    this.player.body.collideWorldBounds = true;
    this.player.body.setSize(20, 32, 5, 16);
    this.player.animations.add('left', [0, 1, 2, 3], 10, true);
    this.player.animations.add('turn', [4], 20, true);
    this.player.animations.add('right', [5, 6, 7, 8], 10, true);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.jumpButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
  };
  PlatformerBasics.prototype.update = function () {
    this.player.body.velocity.x = 0;
    if (this.cursors.left.isDown) {
      this.player.body.velocity.x = -150;
      if (!Kotlin.equals(this.facing, 'left')) {
        this.player.animations.play('left');
        this.facing = 'left';
      }
    }
     else if (this.cursors.right.isDown) {
      this.player.body.velocity.x = 150;
      if (!Kotlin.equals(this.facing, 'right')) {
        this.player.animations.play('right');
        this.facing = 'right';
      }
    }
     else {
      if (!Kotlin.equals(this.facing, 'idle')) {
        this.player.animations.stop();
        if (Kotlin.equals(this.facing, 'left')) {
          this.player.frame = 0;
        }
         else {
          this.player.frame = 5;
        }
        this.facing = 'idle';
      }
    }
    if (this.jumpButton.isDown && this.player.body.onFloor() && this.game.time.now > this.jumpTimer) {
      this.player.body.velocity.y = -250;
      this.jumpTimer = this.game.time.now + 750;
    }
  };
  PlatformerBasics.prototype.render = function () {
    this.game.debug.text(this.game.time.suggestedFps, 32, 32);
  };
  PlatformerBasics.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PlatformerBasics',
    baseClasses: []
  };
  function PlatformerTight() {
    Phaser.State.call(this);
    this.facing = 'left';
    this.jumpTimer = 0.0;
  }
  PlatformerTight.prototype.preload = function () {
    this.game.load.spritesheet('dude', 'assets/games/starstruck/dude.png', 32, 48);
    this.game.load.image('background', 'assets/games/starstruck/background2.png');
  };
  PlatformerTight.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.bg = this.game.add.tileSprite(0, 0, 800, 600, 'background');
    this.game.physics.arcade.gravity.y = 300.0;
    this.player = this.game.add.sprite(32, 320, 'dude');
    this.game.physics.enable(this.player, Phaser.Physics.ARCADE);
    this.player.body.collideWorldBounds = true;
    this.player.body.gravity.y = 1000.0;
    this.player.body.maxVelocity.y = 500.0;
    this.player.body.setSize(20, 32, 5, 16);
    this.player.animations.add('left', [0, 1, 2, 3], 10, true);
    this.player.animations.add('turn', [4], 20, true);
    this.player.animations.add('right', [5, 6, 7, 8], 10, true);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.jumpButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
  };
  PlatformerTight.prototype.update = function () {
    this.player.body.velocity.x = 0;
    if (this.cursors.left.isDown) {
      this.player.body.velocity.x = -150;
      if (!Kotlin.equals(this.facing, 'left')) {
        this.player.animations.play('left');
        this.facing = 'left';
      }
    }
     else if (this.cursors.right.isDown) {
      this.player.body.velocity.x = 150;
      if (!Kotlin.equals(this.facing, 'right')) {
        this.player.animations.play('right');
        this.facing = 'right';
      }
    }
     else {
      if (!Kotlin.equals(this.facing, 'idle')) {
        this.player.animations.stop();
        if (Kotlin.equals(this.facing, 'left')) {
          this.player.frame = 0;
        }
         else {
          this.player.frame = 5;
        }
        this.facing = 'idle';
      }
    }
    if (this.jumpButton.isDown && this.player.body.onFloor() && this.game.time.now > this.jumpTimer) {
      this.player.body.velocity.y = -500;
      this.jumpTimer = this.game.time.now + 750;
    }
  };
  PlatformerTight.prototype.render = function () {
    this.game.debug.bodyInfo(this.player, 16, 24);
  };
  PlatformerTight.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PlatformerTight',
    baseClasses: []
  };
  function ProcessCallback() {
    Phaser.State.call(this);
  }
  ProcessCallback.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  ProcessCallback.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#2d2d2d';
    this.sprite1 = this.game.add.sprite(0, 200, 'atari');
    this.sprite2 = this.game.add.sprite(750, 220, 'mushroom');
    this.game.physics.enable([this.sprite1, this.sprite2], Phaser.Physics.ARCADE);
    this.sprite1.body.velocity.x = 50 + random(Phaser.Math) * 100;
    this.sprite2.body.velocity.x = -(50 + random(Phaser.Math) * 100);
  };
  ProcessCallback.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite1, this.sprite2, Kotlin.getBoundCallableRefForMemberFunction(this, 'collisionCallback_ge0c0c$'), Kotlin.getBoundCallableRefForMemberFunction(this, 'processCallback_ge0c0c$'), this);
  };
  ProcessCallback.prototype.processCallback_ge0c0c$ = function (obj1, obj2) {
    if (obj1.body.speed > obj2.body.speed) {
      return true;
    }
     else {
      return false;
    }
  };
  ProcessCallback.prototype.collisionCallback_ge0c0c$ = function (obj1, obj2) {
    this.game.stage.backgroundColor = '#992d2d';
  };
  ProcessCallback.prototype.render = function () {
    this.game.debug.text('The processCallback will only collide if sprite1 is going fastest.', 32, 32);
    this.game.debug.text('Sprite 1 speed: ' + this.sprite1.body.speed, 32, 64);
    this.game.debug.text('Sprite 2 speed: ' + this.sprite2.body.speed, 32, 96);
  };
  ProcessCallback.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ProcessCallback',
    baseClasses: []
  };
  function QuadtreeCollisionInfos() {
    Phaser.State.call(this);
  }
  QuadtreeCollisionInfos.prototype.preload = function () {
    this.game.load.image('ship', 'assets/sprites/xenon2_ship.png');
    this.game.load.image('baddie', 'assets/sprites/space-baddie.png');
  };
  QuadtreeCollisionInfos.prototype.create = function () {
    var tmp$;
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.physics.arcade.skipQuadTree = false;
    this.aliens = this.game.add.group();
    this.aliens.enableBody = true;
    tmp$ = 50 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var s = this.aliens.create(this.game.world.randomX, this.game.world.randomY, 'baddie');
      s.body.collideWorldBounds = true;
      s.body.bounce.set(1);
      s.body.velocity.setTo(10 + random(Phaser.Math) * 40, 10 + random(Phaser.Math) * 40);
    }
    this.ship = this.game.add.sprite(400, 400, 'ship');
    this.game.physics.enable(this.ship, Phaser.Physics.ARCADE);
    this.ship.body.collideWorldBounds = true;
    this.ship.body.bounce.set(1);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  QuadtreeCollisionInfos.prototype.update = function () {
    this.game.physics.arcade.collide(this.ship, this.aliens);
    if (this.cursors.left.isDown) {
      this.ship.body.velocity.x -= 4;
    }
     else if (this.cursors.right.isDown) {
      this.ship.body.velocity.x += 4;
    }
    if (this.cursors.up.isDown) {
      this.ship.body.velocity.y -= 4;
    }
     else if (this.cursors.down.isDown) {
      this.ship.body.velocity.y += 4;
    }
  };
  QuadtreeCollisionInfos.prototype.render = function () {
    this.game.debug.quadTree(this.game.physics.arcade.quadTree);
  };
  QuadtreeCollisionInfos.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'QuadtreeCollisionInfos',
    baseClasses: []
  };
  function RotateToSprite() {
    Phaser.State.call(this);
  }
  RotateToSprite.prototype.preload = function () {
    this.game.load.image('arrow', 'assets/sprites/longarrow.png');
    this.game.load.image('ball', 'assets/sprites/shinyball.png');
  };
  RotateToSprite.prototype.create = function () {
    this.game.stage.backgroundColor = '#363636';
    this.arrow = this.game.add.sprite(400, 300, 'arrow');
    this.arrow.anchor.setTo(0.1, 0.5);
    this.sprite1 = this.game.add.sprite(200, 200, 'ball');
    this.sprite1.anchor.set(0.5);
    this.sprite2 = this.game.add.sprite(100, 500, 'ball');
    this.sprite2.anchor.set(0.5);
    this.sprite3 = this.game.add.sprite(300, 100, 'ball');
    this.sprite3.anchor.set(0.5);
    this.sprite4 = this.game.add.sprite(600, 400, 'ball');
    this.sprite4.anchor.set(0.5);
    this.sprite5 = this.game.add.sprite(500, 200, 'ball');
    this.sprite5.anchor.set(0.5);
    this.sprite6 = this.game.add.sprite(300, 450, 'ball');
    this.sprite6.anchor.set(0.5);
    this.target = this.sprite6;
    this.target.tint = 16711680;
  };
  RotateToSprite.prototype.update = function () {
    var a = this.game.physics.arcade.angleBetween(this.arrow, this.target);
    var t = Phaser.Math.rotateToAngle(this.arrow.rotation, a, 0.01);
    if (t === this.arrow.rotation) {
      this.target.tint = 16777215;
      this.target = this.game.rnd.pick([this.sprite1, this.sprite2, this.sprite3, this.sprite4, this.sprite5, this.sprite6]);
      this.target.tint = 16711680;
    }
     else {
      this.arrow.rotation = t;
    }
  };
  RotateToSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RotateToSprite',
    baseClasses: []
  };
  function ShipTrail() {
    Phaser.State.call(this);
  }
  ShipTrail.prototype.preload = function () {
    this.game.load.image('chunk', 'assets/sprites/chunk.png');
    this.game.load.image('arrow', 'assets/sprites/asteroids_ship.png');
  };
  ShipTrail.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#124184';
    this.bmd = this.game.add.bitmapData(800, 600);
    this.bmd.context.fillStyle = '#ffffff';
    var bg = this.game.add.sprite(0, 0, this.bmd);
    this.game.physics.arcade.gravity.y = 100.0;
    this.sprite = this.game.add.sprite(32, 450, 'arrow');
    this.sprite.anchor.set(0.5);
    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
    this.sprite.body.collideWorldBounds = true;
    this.sprite.body.bounce.set(0.8);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'launch'), this);
  };
  ShipTrail.prototype.launch = function () {
    if (this.game.input.x < this.sprite.x) {
      this.sprite.body.velocity.setTo(-200, -200);
    }
     else {
      this.sprite.body.velocity.setTo(200, -200);
    }
  };
  ShipTrail.prototype.update = function () {
    this.sprite.rotation = this.sprite.body.angle;
    this.bmd.context.fillRect(this.sprite.x, this.sprite.y, 2.0, 2.0);
    this.bmd.dirty = true;
  };
  ShipTrail.prototype.render = function () {
    this.game.debug.bodyInfo(this.sprite, 32, 32);
  };
  ShipTrail.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ShipTrail',
    baseClasses: []
  };
  function ShootThePointer() {
    Phaser.State.call(this);
    this.fireRate = 100;
    this.nextFire = 0.0;
  }
  ShootThePointer.prototype.preload = function () {
    this.game.load.image('arrow', 'assets/sprites/arrow.png');
    this.game.load.image('bullet', 'assets/sprites/purple_ball.png');
  };
  ShootThePointer.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#313131';
    this.bullets = this.game.add.group();
    this.bullets.enableBody = true;
    this.bullets.physicsBodyType = Phaser.Physics.ARCADE;
    this.bullets.createMultiple(50, 'bullet');
    this.bullets.setAll('checkWorldBounds', true);
    this.bullets.setAll('outOfBoundsKill', true);
    this.sprite = this.game.add.sprite(400, 300, 'arrow');
    this.sprite.anchor.set(0.5);
    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
    this.sprite.body.allowRotation = false;
  };
  ShootThePointer.prototype.update = function () {
    this.sprite.rotation = this.game.physics.arcade.angleToPointer(this.sprite);
    if (this.game.input.activePointer.isDown) {
      this.fire();
    }
  };
  ShootThePointer.prototype.fire = function () {
    var tmp$;
    if (this.game.time.now > this.nextFire && this.bullets.countDead() > 0) {
      this.nextFire = this.game.time.now + this.fireRate;
      var bullet = (tmp$ = this.bullets.getFirstDead()) != null ? tmp$ : Kotlin.throwNPE();
      reset(bullet, this.sprite.x - 8, this.sprite.y - 8);
      this.game.physics.arcade.moveToPointer(bullet, 300);
    }
  };
  ShootThePointer.prototype.render = function () {
    this.game.debug.text('Active Bullets: ' + this.bullets.countLiving() + ' / ' + this.bullets.total, 32, 32);
    this.game.debug.spriteInfo(this.sprite, 32, 450);
  };
  ShootThePointer.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ShootThePointer',
    baseClasses: []
  };
  function Snake() {
    Phaser.State.call(this);
    this.snakeSection = mutableListOf([]);
    this.snakePath = mutableListOf([]);
    this.numSnakeSections = 30;
    this.snakeSpacer = 6;
  }
  Snake.prototype.preload = function () {
    this.game.load.image('ball', 'assets/sprites/shinyball.png');
  };
  Snake.prototype.create = function () {
    var tmp$, tmp$_0;
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.world.setBounds(0, 0, 800, 600);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.snakeHead = this.game.add.sprite(400, 300, 'ball');
    this.snakeHead.anchor.setTo(0.5, 0.5);
    this.game.physics.enable([this.snakeHead], Phaser.Physics.ARCADE);
    tmp$ = this.numSnakeSections - 1;
    for (var i = 1; i <= tmp$; i++) {
      this.snakeSection.add_za3rmp$(this.game.add.sprite(400, 300, 'ball'));
      this.snakeSection.get_za3lpa$(i - 1).anchor.setTo(0.5, 0.5);
    }
    tmp$_0 = this.numSnakeSections * this.snakeSpacer;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      this.snakePath.add_za3rmp$(new Phaser.Point(400, 300));
    }
  };
  Snake.prototype.update = function () {
    var tmp$;
    this.snakeHead.body.velocity.setTo(0, 0);
    this.snakeHead.body.angularVelocity = 0;
    if (this.cursors.up.isDown) {
      this.snakeHead.body.velocity.copyFrom(this.game.physics.arcade.velocityFromAngle(this.snakeHead.angle, 300));
      var part = this.snakePath.removeAt_za3lpa$(get_lastIndex(this.snakePath));
      part.setTo(this.snakeHead.x, this.snakeHead.y);
      this.snakePath.add_vux3hl$(0, part);
      tmp$ = this.numSnakeSections - 1;
      for (var i = 1; i <= tmp$; i++) {
        this.snakeSection.get_za3lpa$(i - 1).x = this.snakePath.get_za3lpa$(i * this.snakeSpacer).x;
        this.snakeSection.get_za3lpa$(i - 1).y = this.snakePath.get_za3lpa$(i * this.snakeSpacer).y;
      }
    }
    if (this.cursors.left.isDown) {
      this.snakeHead.body.angularVelocity = -300;
    }
     else if (this.cursors.right.isDown) {
      this.snakeHead.body.angularVelocity = 300;
    }
  };
  Snake.prototype.render = function () {
    this.game.debug.spriteInfo(this.snakeHead, 32, 32);
  };
  Snake.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Snake',
    baseClasses: []
  };
  function SortDirection() {
    Phaser.State.call(this);
  }
  SortDirection.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser-dude.png');
    this.game.load.spritesheet('veggies', 'assets/sprites/fruitnveg32wh37.png', 32, 32);
  };
  SortDirection.prototype.create = function () {
    var tmp$, tmp$_0;
    this.game.world.setBounds(0, 0, 2000, 1200);
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#2d2d2d';
    this.sprite = this.game.add.sprite(1960, 200, 'phaser');
    this.game.physics.arcade.sortDirection = Phaser.Physics.Arcade.RIGHT_LEFT;
    enable(this.game.physics.arcade, this.sprite);
    this.group = this.game.add.physicsGroup(Phaser.Physics.ARCADE);
    tmp$ = 500 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var c = this.group.create(this.game.rnd.integerInRange(200, 1900), this.game.rnd.integerInRange(0, 1100), 'veggies', this.game.rnd.integerInRange(0, 35));
      c.name = 'veg' + i;
      c.body.immovable = true;
    }
    tmp$_0 = 20 - 1;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      var c_0 = this.group.create(this.game.rnd.integerInRange(100, 770), this.game.rnd.integerInRange(0, 570), 'veggies', 17);
      c_0.body.immovable = true;
    }
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  SortDirection.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite, this.group, Kotlin.getBoundCallableRefForMemberFunction(this, 'collisionHandler_ge0c0c$'), null, this);
    this.sprite.body.velocity.x = 0;
    this.sprite.body.velocity.y = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200;
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.velocity.y = -200;
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.velocity.y = 200;
    }
  };
  SortDirection.prototype.collisionHandler_ge0c0c$ = function (player, veg) {
    if (veg.frame === 17) {
      veg.kill();
    }
  };
  SortDirection.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SortDirection',
    baseClasses: []
  };
  function SortDirectionVertical() {
    Phaser.State.call(this);
  }
  SortDirectionVertical.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser-dude.png');
    this.game.load.spritesheet('veggies', 'assets/sprites/fruitnveg32wh37.png', 32, 32);
  };
  SortDirectionVertical.prototype.create = function () {
    var tmp$, tmp$_0;
    this.game.world.setBounds(0, 0, 800, 3000);
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#2d2d2d';
    this.sprite = this.game.add.sprite(400, 2900, 'phaser');
    this.game.physics.arcade.sortDirection = Phaser.Physics.Arcade.BOTTOM_TOP;
    enable(this.game.physics.arcade, this.sprite);
    this.group = this.game.add.physicsGroup(Phaser.Physics.ARCADE);
    tmp$ = 500 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var c = this.group.create(this.game.rnd.integerInRange(64, 800 - 64), this.game.rnd.integerInRange(100, 2900), 'veggies', this.game.rnd.integerInRange(0, 35));
      c.name = 'veg' + i;
      c.body.immovable = true;
    }
    tmp$_0 = 20 - 1;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      var c_0 = this.group.create(this.game.rnd.integerInRange(64, 800 - 64), this.game.rnd.integerInRange(0, 2000), 'veggies', 17);
      c_0.body.immovable = true;
    }
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  SortDirectionVertical.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite, this.group, Kotlin.getBoundCallableRefForMemberFunction(this, 'collisionHandler_ge0c0c$'), null, this);
    this.sprite.body.velocity.x = 0;
    this.sprite.body.velocity.y = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200;
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.velocity.y = -200;
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.velocity.y = 200;
    }
  };
  SortDirectionVertical.prototype.collisionHandler_ge0c0c$ = function (player, veg) {
    if (veg.frame === 17) {
      veg.kill();
    }
  };
  SortDirectionVertical.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SortDirectionVertical',
    baseClasses: []
  };
  function SpriteVsGroup() {
    Phaser.State.call(this);
  }
  SpriteVsGroup.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser-dude.png');
    this.game.load.spritesheet('veggies', 'assets/sprites/fruitnveg32wh37.png', 32, 32);
  };
  SpriteVsGroup.prototype.create = function () {
    var tmp$, tmp$_0;
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#2d2d2d';
    this.sprite = this.game.add.sprite(32, 200, 'phaser');
    enable(this.game.physics.arcade, this.sprite);
    this.group = this.game.add.physicsGroup();
    tmp$ = 50 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var c = this.group.create(this.game.rnd.between(100, 770), this.game.rnd.between(0, 570), 'veggies', this.game.rnd.between(0, 35));
      c.body.mass = -100;
    }
    tmp$_0 = 20 - 1;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      var c_0 = this.group.create(this.game.rnd.between(100, 770), this.game.rnd.between(0, 570), 'veggies', 17);
    }
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  SpriteVsGroup.prototype.update = function () {
    if (this.game.physics.arcade.collide(this.sprite, this.group, Kotlin.getBoundCallableRefForMemberFunction(this, 'collisionHandler_ge0c0c$'), Kotlin.getBoundCallableRefForMemberFunction(this, 'processHandler_ge0c0c$'), this)) {
      console.log('boom');
    }
    this.sprite.body.velocity.x = 0;
    this.sprite.body.velocity.y = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200;
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.velocity.y = -200;
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.velocity.y = 200;
    }
  };
  SpriteVsGroup.prototype.processHandler_ge0c0c$ = function (player, veg) {
    return true;
  };
  SpriteVsGroup.prototype.collisionHandler_ge0c0c$ = function (player, veg) {
    if (veg.frame == 17) {
      veg.kill();
    }
  };
  SpriteVsGroup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpriteVsGroup',
    baseClasses: []
  };
  function SpriteVsSprite() {
    Phaser.State.call(this);
  }
  SpriteVsSprite.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  SpriteVsSprite.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#2d2d2d';
    this.sprite1 = this.game.add.sprite(50, 200, 'atari');
    this.sprite2 = this.game.add.sprite(700, 220, 'mushroom');
    this.game.physics.enable([this.sprite1, this.sprite2], Phaser.Physics.ARCADE);
    this.sprite1.name = 'atari';
    this.sprite1.body.velocity.x = 100;
    this.sprite2.name = 'mushroom';
    this.sprite2.body.velocity.x = -100;
  };
  SpriteVsSprite.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite1, this.sprite2, Kotlin.getBoundCallableRefForMemberFunction(this, 'collisionHandler_ge0c0c$'), null, this);
  };
  SpriteVsSprite.prototype.collisionHandler_ge0c0c$ = function (obj, obj2) {
    this.game.stage.backgroundColor = '#992d2d';
  };
  SpriteVsSprite.prototype.render = function () {
    this.game.debug.body(this.sprite1);
    this.game.debug.body(this.sprite2);
  };
  SpriteVsSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpriteVsSprite',
    baseClasses: []
  };
  function VerticalCollision() {
    Phaser.State.call(this);
  }
  VerticalCollision.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  VerticalCollision.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#2d2d2d';
    this.sprite1 = this.game.add.sprite(300, 50, 'atari');
    this.sprite1.name = 'atari';
    this.game.physics.enable(this.sprite1, Phaser.Physics.ARCADE);
    this.sprite1.body.velocity.y = 100;
    this.sprite1.body.setSize(220, 10, 0, 0);
    this.sprite2 = this.game.add.sprite(400, 450, 'mushroom');
    this.sprite2.name = 'mushroom';
    this.game.physics.enable(this.sprite2, Phaser.Physics.ARCADE);
    this.sprite2.body.immovable = true;
  };
  VerticalCollision.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite1, this.sprite2, Kotlin.getBoundCallableRefForMemberFunction(this, 'collisionHandler_ge0c0c$'), null, this);
  };
  VerticalCollision.prototype.collisionHandler_ge0c0c$ = function (obj, obj2) {
    this.game.stage.backgroundColor = '#992d2d';
  };
  VerticalCollision.prototype.render = function () {
    this.game.debug.body(this.sprite1);
    this.game.debug.body(this.sprite2);
  };
  VerticalCollision.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'VerticalCollision',
    baseClasses: []
  };
  function WorldBoundsEvent() {
    Phaser.State.call(this);
  }
  WorldBoundsEvent.prototype.preload = function () {
    this.game.load.image('space', 'assets/skies/space3.png');
    this.game.load.spritesheet('face', 'assets/sprites/metalface78x92.png', 78, 92);
  };
  WorldBoundsEvent.prototype.create = function () {
    this.game.add.sprite(0, 0, 'space');
    var face = this.game.add.sprite(0, 0, 'face');
    face.animations.add('flash', [0, 1, 2, 3, 2, 1, 0], 24, false);
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    enable(this.game.physics.arcade, face);
    face.body.velocity.setTo(200, 200);
    face.body.bounce.set(1);
    face.body.collideWorldBounds = true;
    face.body.onWorldBounds = new Signal();
    face.body.onWorldBounds.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'hitWorldBounds_okw7gk$'), this);
  };
  WorldBoundsEvent.prototype.hitWorldBounds_okw7gk$ = function (sprite) {
    sprite.play('flash');
  };
  WorldBoundsEvent.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'WorldBoundsEvent',
    baseClasses: []
  };
  function AudioSpriteDuration() {
    Phaser.State.call(this);
  }
  AudioSpriteDuration.prototype.preload = function () {
    this.game.load.image('bg', 'assets/pics/cougar_dragonsun.png');
    this.game.load.spritesheet('button', 'assets/buttons/flixel-button.png', 80, 20);
    this.game.load.bitmapFont('nokia', 'assets/fonts/bitmapFonts/nokia16black.png', 'assets/fonts/bitmapFonts/nokia16black.xml');
    this.game.load.audio('sfx', ['assets/audio/SoundEffects/magical_horror_audiosprite.mp3', 'assets/audio/SoundEffects/magical_horror_audiosprite.ogg']);
  };
  AudioSpriteDuration.prototype.create = function () {
    var bg = this.game.add.image(0, 0, 'bg');
    bg.width = 800.0;
    bg.height = 600.0;
    this.fx = this.game.add.audio('sfx');
    this.fx.allowMultiple = false;
    this.fx.addMarker('charm', 0, 2.7);
    this.fx.addMarker('curse', 4, 2.9);
    this.fx.addMarker('fireball', 8, 5.2);
    this.fx.addMarker('spell', 14, 4.7);
    this.fx.addMarker('soundscape', 20, 18.8);
    this.makeButton_3m52m6$('charm', 600, 100);
    this.makeButton_3m52m6$('curse', 600, 140);
    this.makeButton_3m52m6$('fireball', 600, 180);
    this.makeButton_3m52m6$('spell', 600, 220);
    this.makeButton_3m52m6$('soundscape', 600, 260);
    this.makeButton_3m52m6$('pause', 600, 380);
  };
  AudioSpriteDuration.prototype.makeButton_3m52m6$ = function (name, x, y) {
    var button = this.game.add.button(x, y, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'click_wjvb6f$'), this, 0, 1, 2);
    button.name = name;
    button.scale.set(2, 1.5);
    button.smoothed = false;
    var text_0 = this.game.add.bitmapText(x, y + 7, 'nokia', name, 16);
    text_0.x = text_0.x + (button.width / 2 - text_0.textWidth / 2);
  };
  AudioSpriteDuration.prototype.click_wjvb6f$ = function (button) {
    if (button.name === 'pause') {
      if (this.fx.paused) {
        this.fx.resume();
      }
       else {
        this.fx.pause();
      }
    }
     else {
      this.fx.play(button.name);
    }
  };
  AudioSpriteDuration.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AudioSpriteDuration',
    baseClasses: []
  };
  function AudioSpriteExample() {
    Phaser.State.call(this);
  }
  AudioSpriteExample.prototype.preload = function () {
    this.game.load.image('title', 'assets/pics/catastrophi.png');
    this.game.load.spritesheet('button', 'assets/buttons/flixel-button.png', 80, 20);
    this.game.load.bitmapFont('nokia', 'assets/fonts/bitmapFonts/nokia16black.png', 'assets/fonts/bitmapFonts/nokia16black.xml');
    this.game.load.audio('sfx', 'assets/audio/SoundEffects/fx_mixdown.ogg');
  };
  AudioSpriteExample.prototype.create = function () {
    this.game.add.image(0, 0, 'title');
    this.fx = this.game.add.audio('sfx');
    this.fx.allowMultiple = true;
    this.fx.addMarker('alien death', 1, 1.0);
    this.fx.addMarker('boss hit', 3, 0.5);
    this.fx.addMarker('escape', 4, 3.2);
    this.fx.addMarker('meow', 8, 0.5);
    this.fx.addMarker('numkey', 9, 0.1);
    this.fx.addMarker('ping', 10, 1.0);
    this.fx.addMarker('death', 12, 4.2);
    this.fx.addMarker('shot', 17, 1.0);
    this.fx.addMarker('squit', 19, 0.3);
    this.makeButton_3m52m6$('alien death', 600, 100);
    this.makeButton_3m52m6$('boss hit', 600, 140);
    this.makeButton_3m52m6$('escape', 600, 180);
    this.makeButton_3m52m6$('meow', 600, 220);
    this.makeButton_3m52m6$('numkey', 600, 260);
    this.makeButton_3m52m6$('ping', 600, 300);
    this.makeButton_3m52m6$('death', 600, 340);
    this.makeButton_3m52m6$('shot', 600, 380);
    this.makeButton_3m52m6$('squit', 600, 420);
  };
  AudioSpriteExample.prototype.makeButton_3m52m6$ = function (name, x, y) {
    var button = this.game.add.button(x, y, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'click_wjvb6f$'), this, 0, 1, 2);
    button.name = name;
    button.scale.set(2, 1.5);
    button.smoothed = false;
    var text_0 = this.game.add.bitmapText(x, y + 7, 'nokia', name, 16);
    text_0.x = text_0.x + (button.width / 2 - text_0.textWidth / 2);
  };
  AudioSpriteExample.prototype.click_wjvb6f$ = function (button) {
    this.fx.play(button.name);
  };
  AudioSpriteExample.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AudioSpriteExample',
    baseClasses: []
  };
  function AudioSpriteJson() {
    Phaser.State.call(this);
    this.audioJSON = '{\n\t    spritemap: {\n\t        "alien death": {\n\t            start: 1,\n\t            end: 2,\n\t            loop: false\n\t        },\n\t        "boss hit": {\n\t            start: 3,\n\t            end: 3.5,\n\t            loop: false\n\t        },\n\t        "escape": {\n\t            start: 4,\n\t            end: 7.2,\n\t            loop: false\n\t        },\n\t        "meow": {\n\t            start: 8,\n\t            end: 8.5,\n\t            loop: false\n\t        },\n\t        "numkey": {\n\t            start: 9,\n\t            end: 9.1,\n\t            loop: false\n\t        },\n\t        "ping": {\n\t            start: 10,\n\t            end: 11,\n\t            loop: false\n\t        },\n\t        "death": {\n\t            start: 12,\n\t            end: 16.2,\n\t            loop: false\n\t        },\n\t        "shot": {\n\t            start: 17,\n\t            end: 18,\n\t            loop: false\n\t        },\n\t        "squit": {\n\t            start: 19,\n\t            end: 19.3,\n\t            loop: false\n\t        }\n\t    }\n\t}';
  }
  AudioSpriteJson.prototype.preload = function () {
    this.game.load.image('title', 'assets/pics/catastrophi.png');
    this.game.load.spritesheet('button', 'assets/buttons/flixel-button.png', 80, 20);
    this.game.load.bitmapFont('nokia', 'assets/fonts/bitmapFonts/nokia16black.png', 'assets/fonts/bitmapFonts/nokia16black.xml');
    this.game.load.audiosprite('sfx', 'assets/audio/SoundEffects/fx_mixdown.ogg', null, this.audioJSON);
  };
  AudioSpriteJson.prototype.create = function () {
    this.game.add.image(0, 0, 'title');
    this.fx = this.game.add.audioSprite('sfx');
    this.fx.allowMultiple = true;
    this.makeButton_3m52m6$('alien death', 600, 100);
    this.makeButton_3m52m6$('boss hit', 600, 140);
    this.makeButton_3m52m6$('escape', 600, 180);
    this.makeButton_3m52m6$('meow', 600, 220);
    this.makeButton_3m52m6$('numkey', 600, 260);
    this.makeButton_3m52m6$('ping', 600, 300);
    this.makeButton_3m52m6$('death', 600, 340);
    this.makeButton_3m52m6$('shot', 600, 380);
    this.makeButton_3m52m6$('squit', 600, 420);
  };
  AudioSpriteJson.prototype.makeButton_3m52m6$ = function (name, x, y) {
    var button = this.game.add.button(x, y, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'click_wjvb6f$'), this, 0, 1, 2);
    button.name = name;
    button.scale.set(2, 1.5);
    button.smoothed = false;
    var text_0 = this.game.add.bitmapText(x, y + 7, 'nokia', name, 16);
    text_0.x = text_0.x + (button.width / 2 - text_0.textWidth / 2);
  };
  AudioSpriteJson.prototype.click_wjvb6f$ = function (button) {
    this.fx.play(button.name);
  };
  AudioSpriteJson.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AudioSpriteJson',
    baseClasses: []
  };
  function FadeIn() {
    Phaser.State.call(this);
  }
  FadeIn.prototype.preload = function () {
    this.game.load.image('disk', 'assets/sprites/ra_dont_crack_under_pressure.png');
    this.game.load.audio('boden', 'assets/audio/goaman_intro.mp3');
  };
  FadeIn.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.game.input.touch.preventDefault = false;
    this.music = this.game.add.audio('boden');
    this.music.onDecoded.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'start'), this);
    this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'disk').anchor.setTo(0.5, 0.5);
  };
  FadeIn.prototype.start = function () {
    this.music.fadeIn(4000);
  };
  FadeIn.prototype.render = function () {
    this.game.debug.soundInfo(this.music, 20, 32);
  };
  FadeIn.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FadeIn',
    baseClasses: []
  };
  function Ios() {
    Phaser.State.call(this);
  }
  Ios.prototype.preload = function () {
    this.game.stage.disableVisibilityChange = true;
    this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
    this.game.load.audio('music', 'rave_digger.mp3');
  };
  function Ios$create$lambda(this$Ios) {
    return function () {
      this$Ios.music.play();
    };
  }
  Ios.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.music = this.game.add.audio('music');
    this.game.input.onDown.addOnce(Ios$create$lambda(this));
  };
  Ios.prototype.render = function () {
    this.game.debug.soundInfo(this.music, 20, 32);
  };
  Ios.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Ios',
    baseClasses: []
  };
  function Loop() {
    Phaser.State.call(this);
    this.loopCount = 0;
  }
  Loop.prototype.preload = function () {
    this.game.load.image('speakers', 'assets/sprites/speakers.png');
    this.game.load.audio('bass', 'assets/audio/tech/bass.mp3');
    this.game.load.audio('drums', 'assets/audio/tech/drums.mp3');
    this.game.load.audio('percussion', 'assets/audio/tech/percussion.mp3');
    this.game.load.audio('synth1', 'assets/audio/tech/synth1.mp3');
    this.game.load.audio('synth2', 'assets/audio/tech/synth2.mp3');
    this.game.load.audio('top1', 'assets/audio/tech/top1.mp3');
    this.game.load.audio('top2', 'assets/audio/tech/top2.mp3');
  };
  Loop.prototype.create = function () {
    this.game.stage.backgroundColor = '#838282';
    this.speakers = this.game.add.image(this.game.world.centerX, 500, 'speakers');
    this.speakers.anchor.set(0.5, 1);
    var style = TextStyle('65px Arial', void 0, void 0, void 0, void 0, void 0, '#52bace', 'center');
    this.text = this.game.add.text(this.game.world.centerX, 100, 'decoding', style);
    this.text.anchor.set(0.5);
    this.bass = this.game.add.audio('bass');
    this.drums = this.game.add.audio('drums');
    this.percussion = this.game.add.audio('percussion');
    this.synth1 = this.game.add.audio('synth1');
    this.synth2 = this.game.add.audio('synth2');
    this.top1 = this.game.add.audio('top1');
    this.top2 = this.game.add.audio('top2');
    this.sounds = listOf([this.bass, this.drums, this.percussion, this.synth1, this.synth2, this.top1, this.top2]);
    var tmp$ = this.game.sound;
    var $receiver = this.sounds;
    tmp$.setDecodedCallback(Kotlin.kotlin.collections.copyToArray($receiver), Kotlin.getBoundCallableRefForMemberFunction(this, 'start'), this);
  };
  Loop.prototype.start = function () {
    this.sounds = drop(this.sounds, 1);
    this.bass.loopFull(0.6);
    this.bass.onLoop.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'hasLooped_5djako$'), this);
    this.text.text = 'bass';
  };
  function Loop$hasLooped$ObjectLiteral() {
    this.x = 1.3;
    this.y = 1.1;
  }
  Loop$hasLooped$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Loop.prototype.hasLooped_5djako$ = function (sound_0) {
    this.loopCount++;
    if (this.loopCount === 1) {
      drop(this.sounds, 1);
      this.drums.loopFull(0.6);
      this.text.text = 'drums';
      this.game.add.tween(this.speakers.scale).to(new Loop$hasLooped$ObjectLiteral(), 230, 'Sine.easeInOut', true, 0, -1, true);
    }
     else if (this.loopCount === 2) {
      var tmp$ = this.game.rnd;
      var $receiver = this.sounds;
      this.current = tmp$.pick(Kotlin.kotlin.collections.copyToArray($receiver));
      this.current.loopFull();
      this.text.text = this.current.key;
    }
     else if (this.loopCount > 2) {
      this.current.stop();
      var tmp$_0 = this.game.rnd;
      var $receiver_0 = this.sounds;
      this.current = tmp$_0.pick(Kotlin.kotlin.collections.copyToArray($receiver_0));
      this.current.loopFull();
      this.text.text = this.current.key;
    }
  };
  Loop.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Loop',
    baseClasses: []
  };
  function PauseAndResume() {
    Phaser.State.call(this);
  }
  PauseAndResume.prototype.preload = function () {
    this.game.load.image('disk', 'assets/sprites/ra_dont_crack_under_pressure.png');
    this.game.load.audio('boden', ['assets/audio/bodenstaendig_2000_in_rock_4bit.mp3', 'assets/audio/bodenstaendig_2000_in_rock_4bit.ogg']);
  };
  PauseAndResume.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.game.input.touch.preventDefault = false;
    this.music = this.game.add.audio('boden');
    this.music.play();
    this.s = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'disk');
    this.s.anchor.setTo(0.5, 0.5);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'changeVolume_pal8wq$'), this);
  };
  PauseAndResume.prototype.changeVolume_pal8wq$ = function (pointer) {
    if (pointer.y < 300) {
      this.music.pause();
    }
     else {
      this.music.resume();
    }
  };
  PauseAndResume.prototype.update = function () {
    this.s.rotation = this.s.rotation + 0.01;
  };
  PauseAndResume.prototype.render = function () {
    this.game.debug.soundInfo(this.music, 20, 32);
  };
  PauseAndResume.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PauseAndResume',
    baseClasses: []
  };
  function PauseAndResumeMarker() {
    Phaser.State.call(this);
    this.audioJSON = '{\n    "spritemap": {\n        "part1": {\n            "start": 1,\n            "end": 20,\n            "loop": false\n        },\n        "part2": {\n            "start": 21,\n            "end": 60,\n            "loop": false\n        }\n    }\n}';
  }
  PauseAndResumeMarker.prototype.preload = function () {
    this.game.load.image('disk', 'assets/sprites/ra_dont_crack_under_pressure.png');
    this.game.load.audiosprite('boden', ['assets/audio/bodenstaendig_2000_in_rock_4bit.mp3', 'assets/audio/bodenstaendig_2000_in_rock_4bit.ogg'], null, this.audioJSON);
  };
  PauseAndResumeMarker.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.game.input.touch.preventDefault = false;
    this.music = this.game.add.audioSprite('boden');
    this.music.play('part2');
    this.s = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'disk');
    this.s.anchor.setTo(0.5, 0.5);
  };
  PauseAndResumeMarker.prototype.update = function () {
    this.s.rotation = this.s.rotation + 0.01;
  };
  PauseAndResumeMarker.prototype.render = function () {
  };
  PauseAndResumeMarker.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PauseAndResumeMarker',
    baseClasses: []
  };
  function PlayMusic() {
    Phaser.State.call(this);
  }
  PlayMusic.prototype.preload = function () {
    this.game.load.image('disk', 'assets/sprites/ra_dont_crack_under_pressure.png');
    this.game.load.audio('boden', ['assets/audio/bodenstaendig_2000_in_rock_4bit.mp3', 'assets/audio/bodenstaendig_2000_in_rock_4bit.ogg']);
  };
  PlayMusic.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.game.input.touch.preventDefault = false;
    this.music = this.game.add.audio('boden');
    this.music.play();
    this.s = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'disk');
    this.s.anchor.setTo(0.5, 0.5);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'changeVolume_pal8wq$'), this);
  };
  PlayMusic.prototype.changeVolume_pal8wq$ = function (pointer) {
    if (pointer.y < 100) {
      this.music.mute = false;
    }
     else if (pointer.y < 300) {
      this.music.volume = this.music.volume + 0.1;
    }
     else {
      this.music.volume = this.music.volume - 0.1;
    }
  };
  PlayMusic.prototype.update = function () {
    this.s.rotation = this.s.rotation + 0.01;
  };
  PlayMusic.prototype.render = function () {
    this.game.debug.soundInfo(this.music, 20, 32);
  };
  PlayMusic.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PlayMusic',
    baseClasses: []
  };
  function RemoveSound() {
    Phaser.State.call(this);
  }
  RemoveSound.prototype.preload = function () {
    this.game.load.image('greenie', 'assets/sprites/wizball.png');
    this.game.load.audio('wizball', ['assets/audio/oedipus_wizball_highscore.mp3', 'assets/audio/oedipus_wizball_highscore.ogg']);
  };
  RemoveSound.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.game.input.touch.preventDefault = false;
    this.music = this.game.add.audio('wizball');
    this.music.play();
    this.s = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'greenie');
    this.s.anchor.set(0.5);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'removeMusic'), this);
  };
  RemoveSound.prototype.removeMusic = function () {
    this.music.destroy();
    this.game.cache.removeSound('wizball');
  };
  RemoveSound.prototype.render = function () {
    if (this.game.cache.checkSoundKey('wizball')) {
      this.game.debug.soundInfo(this.music, 20, 32);
    }
  };
  RemoveSound.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RemoveSound',
    baseClasses: []
  };
  function RestartSound() {
    Phaser.State.call(this);
  }
  RestartSound.prototype.preload = function () {
    this.game.load.image('greenie', 'assets/sprites/wizball.png');
    this.game.load.audio('wizball', ['assets/audio/oedipus_wizball_highscore.mp3', 'assets/audio/oedipus_wizball_highscore.ogg']);
  };
  RestartSound.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.game.input.touch.preventDefault = false;
    this.music = this.game.add.audio('wizball');
    this.music.play();
    this.s = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'greenie');
    this.s.anchor.set(0.5);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'restartMusic'), this);
  };
  RestartSound.prototype.restartMusic = function () {
    this.music.restart();
  };
  RestartSound.prototype.update = function () {
    this.s.rotation = this.s.rotation + 0.01;
  };
  RestartSound.prototype.render = function () {
    this.game.debug.soundInfo(this.music, 20, 32);
  };
  RestartSound.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RestartSound',
    baseClasses: []
  };
  function SoundComplete() {
    Phaser.State.call(this);
    this.keys = new SoundComplete$keys$ObjectLiteral();
  }
  SoundComplete.prototype.preload = function () {
    this.game.load.audio('explosion', 'assets/audio/SoundEffects/explosion.mp3');
    this.game.load.audio('sword', 'assets/audio/SoundEffects/sword.mp3');
    this.game.load.audio('blaster', 'assets/audio/SoundEffects/blaster.mp3');
  };
  SoundComplete.prototype.create = function () {
    this.game.stage.backgroundColor = '#414040';
    var style = TextStyle('65px Arial', void 0, void 0, void 0, void 0, void 0, '#52bace', 'center');
    this.text = this.game.add.text(this.game.world.centerX, 100, 'decoding', style);
    this.text.anchor.set(0.5);
    this.explosion = this.game.add.audio('explosion');
    this.sword = this.game.add.audio('sword');
    this.blaster = this.game.add.audio('blaster');
    this.game.sound.setDecodedCallback([this.explosion, this.sword, this.blaster], Kotlin.getBoundCallableRefForMemberFunction(this, 'start'), this);
  };
  function SoundComplete$start$ObjectLiteral() {
    this.blaster = Phaser.Keyboard.ONE;
    this.explosion = Phaser.Keyboard.TWO;
    this.sword = Phaser.Keyboard.THREE;
  }
  SoundComplete$start$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SoundComplete.prototype.start = function () {
    this.text.text = 'Press 1, 2 or 3';
    var style = TextStyle('48px Arial', void 0, void 0, void 0, void 0, void 0, '#cdba52', 'center');
    this.text1 = this.game.add.text(this.game.world.centerX, 250, 'Blaster: Stopped', style);
    this.text1.anchor.set(0.5);
    this.text2 = this.game.add.text(this.game.world.centerX, 350, 'Explosion: Stopped', style);
    this.text2.anchor.set(0.5);
    this.text3 = this.game.add.text(this.game.world.centerX, 450, 'Sword: Stopped', style);
    this.text3.anchor.set(0.5);
    this.explosion.onStop.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'soundStopped_5djako$'), this);
    this.sword.onStop.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'soundStopped_5djako$'), this);
    this.blaster.onStop.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'soundStopped_5djako$'), this);
    this.keys = this.game.input.keyboard.addKeys(new SoundComplete$start$ObjectLiteral());
    this.keys.blaster.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'playFx_s2xiko$'), this);
    this.keys.explosion.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'playFx_s2xiko$'), this);
    this.keys.sword.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'playFx_s2xiko$'), this);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onTouch_pal8wq$'), this);
  };
  SoundComplete.prototype.onTouch_pal8wq$ = function (pointer) {
    var b = this.game.height / 3;
    if (pointer.y < b) {
      this.playFx_s2xiko$(this.keys.blaster);
    }
     else if (pointer.y > b * 2) {
      this.playFx_s2xiko$(this.keys.sword);
    }
     else {
      this.playFx_s2xiko$(this.keys.explosion);
    }
  };
  SoundComplete.prototype.playFx_s2xiko$ = function (key) {
    var tmp$;
    tmp$ = key.keyCode;
    if (Kotlin.equals(tmp$, Phaser.Keyboard.ONE)) {
      this.text1.text = 'Blaster: Playing';
      this.blaster.play();
    }
     else if (Kotlin.equals(tmp$, Phaser.Keyboard.TWO)) {
      this.text2.text = 'Explosion: Playing';
      this.explosion.play();
    }
     else if (Kotlin.equals(tmp$, Phaser.Keyboard.THREE)) {
      this.text3.text = 'Sword: Playing';
      this.sword.play();
    }
  };
  SoundComplete.prototype.soundStopped_5djako$ = function (sound_0) {
    if (sound_0 === this.blaster) {
      this.text1.text = 'Blaster: Complete';
    }
     else if (sound_0 === this.explosion) {
      this.text2.text = 'Explosion: Complete';
    }
     else if (sound_0 === this.sword) {
      this.text3.text = 'Sword: Complete';
    }
  };
  function SoundComplete$keys$ObjectLiteral() {
  }
  SoundComplete$keys$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SoundComplete.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SoundComplete',
    baseClasses: []
  };
  function E01LoadAnImage() {
    Phaser.State.call(this);
  }
  E01LoadAnImage.prototype.preload = function () {
    this.game.load.image('einstein', 'assets/pics/ra_einstein.png');
  };
  E01LoadAnImage.prototype.create = function () {
    this.game.add.sprite(0, 0, 'einstein');
  };
  E01LoadAnImage.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'E01LoadAnImage',
    baseClasses: []
  };
  function E02ClickOnAnImage() {
    Phaser.State.call(this);
    this.counter = 0;
  }
  E02ClickOnAnImage.prototype.preload = function () {
    this.game.load.image('einstein', 'assets/pics/ra_einstein.png');
  };
  E02ClickOnAnImage.prototype.create = function () {
    var image_0 = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'einstein');
    image_0.anchor.set(0.5);
    image_0.inputEnabled = true;
    this.text = this.game.add.text(250, 16, '', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff', 'center'));
    image_0.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'listener'), this);
  };
  E02ClickOnAnImage.prototype.listener = function () {
    this.counter++;
    this.text.text = 'You clicked ' + this.counter + ' times!';
  };
  E02ClickOnAnImage.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'E02ClickOnAnImage',
    baseClasses: []
  };
  function E03MoveAnImage() {
    Phaser.State.call(this);
  }
  E03MoveAnImage.prototype.preload = function () {
    this.game.load.image('einstein', 'assets/pics/ra_einstein.png');
  };
  E03MoveAnImage.prototype.create = function () {
    var image_0 = this.game.add.sprite(0, 0, 'einstein');
    this.game.physics.enable(image_0, Phaser.Physics.ARCADE);
    image_0.body.velocity.x = 150.0;
  };
  E03MoveAnImage.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'E03MoveAnImage',
    baseClasses: []
  };
  function E04ImageFollowInput() {
    Phaser.State.call(this);
  }
  E04ImageFollowInput.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser.png');
  };
  E04ImageFollowInput.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.sprite = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'phaser');
    this.sprite.anchor.set(0.5);
    enable(this.game.physics.arcade, this.sprite);
  };
  E04ImageFollowInput.prototype.update = function () {
    if (this.game.physics.arcade.distanceToPointer(this.sprite, this.game.input.activePointer) > 8) {
      this.game.physics.arcade.moveToPointer(this.sprite, 300);
    }
     else {
      this.sprite.body.velocity.set(0);
    }
  };
  E04ImageFollowInput.prototype.render = function () {
    this.game.debug.inputInfo(32, 32);
  };
  E04ImageFollowInput.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'E04ImageFollowInput',
    baseClasses: []
  };
  function E05LoadAnAnimation() {
    Phaser.State.call(this);
  }
  E05LoadAnAnimation.prototype.preload = function () {
    this.game.load.atlasJSONHash('bot', 'assets/sprites/running_bot.png', 'assets/sprites/running_bot.json');
  };
  E05LoadAnAnimation.prototype.create = function () {
    var bot = this.game.add.sprite(200, 200, 'bot');
    bot.animations.add('run');
    bot.animations.play('run', 15, true);
  };
  E05LoadAnAnimation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'E05LoadAnAnimation',
    baseClasses: []
  };
  function E06RenderText() {
    Phaser.State.call(this);
  }
  E06RenderText.prototype.create = function () {
    var text_0 = '- phaser -\n with a sprinkle of \n pixi dust.';
    var style = TextStyle('65px Arial', void 0, void 0, void 0, void 0, void 0, '#ff0044', 'center');
    var t = this.game.add.text(this.game.world.centerX - 300, 0, text_0, style);
  };
  E06RenderText.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'E06RenderText',
    baseClasses: []
  };
  function E07TweenAnImage() {
    Phaser.State.call(this);
    this.prev = -400;
  }
  E07TweenAnImage.prototype.preload = function () {
    this.game.forceSingleUpdate = true;
    this.game.load.image('einstein', 'assets/pics/ra_einstein.png');
  };
  function E07TweenAnImage$create$ObjectLiteral() {
    this.x = 800;
  }
  E07TweenAnImage$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  E07TweenAnImage.prototype.create = function () {
    this.sprite = this.game.add.sprite(-400, 0, 'einstein');
    this.tween = this.game.add.tween(this.sprite);
    this.tween.to(new E07TweenAnImage$create$ObjectLiteral(), 5000, 'Linear', true, 0);
  };
  E07TweenAnImage.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'E07TweenAnImage',
    baseClasses: []
  };
  function E08SpriteRotation() {
    Phaser.State.call(this);
  }
  E08SpriteRotation.prototype.preload = function () {
    this.game.load.image('arrow', 'assets/sprites/longarrow-white.png');
  };
  E08SpriteRotation.prototype.create = function () {
    this.game.stage.backgroundColor = '#000000';
    var labelStyle = TextStyle('16px courier', void 0, void 0, void 0, void 0, void 0, '#00ff00', 'center');
    var circle = new Phaser.Circle(400, 300, 450);
    var labelCircle = new Phaser.Circle(400, 300, 530);
    var graphics = this.game.add.graphics(0, 0);
    graphics.lineStyle(2, 65280, 1);
    graphics.drawCircle(circle.x, circle.y, circle.diameter);
    var a = 0.0;
    while (a < 360) {
      graphics.moveTo(400, 300);
      var p = circle.circumferencePoint(a, true);
      graphics.lineTo(p.x, p.y);
      var lp = labelCircle.circumferencePoint(a, true);
      var na = a;
      if (a > 180) {
        na -= 360;
      }
      var rads = Phaser.Math.degToRad(na).toString().substring(0, 5);
      var info = na.toString() + '\xB0' + '\n' + rads;
      var label = this.game.add.text(lp.x, lp.y, info, labelStyle);
      label.centerX = lp.x;
      label.centerY = lp.y;
      a += 22.5;
    }
    this.arrow = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'arrow');
    this.arrow.anchor.set(0, 0.5);
    this.arrow.tint = 16711680;
  };
  E08SpriteRotation.prototype.update = function () {
    this.arrow.angle = this.arrow.angle + 0.2;
  };
  E08SpriteRotation.prototype.render = function () {
    this.game.debug.text('Sprite Rotation', 24, 32);
    this.game.debug.text('Angle: ' + this.arrow.angle, 24, 64);
    this.game.debug.text('Rotation: ' + this.arrow.rotation, 24, 96);
  };
  E08SpriteRotation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'E08SpriteRotation',
    baseClasses: []
  };
  function AlphaMask() {
    Phaser.State.call(this);
  }
  AlphaMask.prototype.preload = function () {
    this.game.load.image('pic', 'assets/pics/questar.png');
    this.game.load.image('mask', 'assets/pics/mask-test2.png');
  };
  AlphaMask.prototype.create = function () {
    this.game.stage.backgroundColor = 5066061;
    this.game.add.text(64, 10, 'Source image', TextStyle('16px Arial', void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.game.add.image(64, 32, 'pic');
    this.game.add.text(400, 10, 'Alpha mask', TextStyle('16px Arial', void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.game.add.image(400, 32, 'mask');
    var bmd = this.game.make.bitmapData(320, 256);
    bmd.alphaMask('pic', 'mask');
    this.game.add.image(this.game.world.centerX, 320, bmd).anchor.set(0.5, 0);
  };
  AlphaMask.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AlphaMask',
    baseClasses: []
  };
  function Atlas() {
    Phaser.State.call(this);
  }
  Atlas.prototype.preload = function () {
    this.game.load.atlas('seacreatures', 'assets/sprites/seacreatures_json.png', 'assets/sprites/seacreatures_json.json');
  };
  Atlas.prototype.create = function () {
    this.bmd = this.game.make.bitmapData(800, 600);
    this.game.add.image(0, 0, this.bmd);
    this.jellyfish = this.game.add.sprite(0, 0, 'seacreatures', 'blueJellyfish0010');
    this.jellyfish.animations.add('swim', Phaser.Animation.generateFrameNames('blueJellyfish', 0, 32, '', 4), 30, true);
    this.jellyfish.animations.play('swim');
  };
  Atlas.prototype.update = function () {
    if (this.game.input.activePointer.isDown) {
      this.bmd.draw(this.jellyfish, this.game.input.activePointer.position.x, this.game.input.activePointer.position.y);
    }
  };
  Atlas.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Atlas',
    baseClasses: []
  };
  function CopyBitmapdata() {
    Phaser.State.call(this);
  }
  CopyBitmapdata.prototype.preload = function () {
    this.game.load.image('pic', 'assets/pics/Equality_by_Ragnarok.png');
  };
  CopyBitmapdata.prototype.create = function () {
    this.game.stage.backgroundColor = '#2d2d2d';
    this.bmd = this.game.make.bitmapData(800, 600);
    this.bmd.copy('pic');
    this.bmd.addToWorld();
    this.bmd2 = this.game.make.bitmapData(64, 64);
    this.bmd2.circle(32, 32, 32, 'rgba(255,0,255,0.2)');
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'paint_rxq7re$'), this);
  };
  CopyBitmapdata.prototype.paint_rxq7re$ = function (pointer, x, y) {
    if (pointer.isDown) {
      this.bmd.draw(this.bmd2, x - 16, y - 16);
    }
  };
  CopyBitmapdata.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CopyBitmapdata',
    baseClasses: []
  };
  function CopyPixels() {
    Phaser.State.call(this);
    this.dropTime = 0.0;
  }
  CopyPixels.prototype.preload = function () {
    this.game.load.image('pic', 'assets/pics/hotshot-chaos_in_tokyo.png');
  };
  CopyPixels.prototype.create = function () {
    this.game.stage.backgroundColor = '#2d2d2d';
    this.bmd = this.game.make.bitmapData(800, 600);
    this.bmd.addToWorld();
    this.area = new Phaser.Rectangle(0, 300, 200, 16);
    this.bmd.copyRect('pic', this.area, 300, 0);
  };
  CopyPixels.prototype.update = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (this.area.y > 0 && this.game.time.now > this.dropTime) {
      tmp$ = this.area.y | 0;
      for (var y = 0; y <= tmp$; y++) {
        this.bmd.copyRect('pic', this.area, 300, y);
      }
      tmp$_0 = this.area;
      tmp$_1 = tmp$_0.y, tmp$_2 = tmp$_1, tmp$_0.y = tmp$_1 - 1, tmp$_2;
      this.dropTime = this.game.time.now + 25;
    }
  };
  CopyPixels.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CopyPixels',
    baseClasses: []
  };
  function DrawAtlasFrame() {
    Phaser.State.call(this);
  }
  DrawAtlasFrame.prototype.preload = function () {
    this.game.load.atlas('atlas', 'assets/sprites/atlas_hash_trim.png', 'assets/sprites/atlas_json_hash_trim.json');
  };
  DrawAtlasFrame.prototype.create = function () {
    this.game.stage.backgroundColor = '#2d2d8d';
    this.bmd = this.game.add.bitmapData(800, 600);
    this.bmd.addToWorld(8, 8);
    this.sprite = this.game.add.sprite(100, 64, 'atlas', 'contra3');
    this.sprite.tint = 0;
    this.bmd.draw(this.sprite);
    this.sprite.tint = 16777215;
  };
  DrawAtlasFrame.prototype.update = function () {
    if (this.game.input.activePointer.isDown) {
    }
  };
  DrawAtlasFrame.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DrawAtlasFrame',
    baseClasses: []
  };
  function DrawGroup() {
    Phaser.State.call(this);
  }
  DrawGroup.prototype.preload = function () {
    this.game.load.image('bg', 'assets/pics/undersea.jpg');
    this.game.load.image('disk', 'assets/sprites/copy-that-floppy.png');
    this.game.load.image('squad', 'assets/sprites/bsquadron3.png');
    this.game.load.image('loop', 'assets/sprites/beball1.png');
    this.game.load.bitmapFont('desyrel', 'assets/fonts/bitmapFonts/desyrel.png', 'assets/fonts/bitmapFonts/desyrel.xml');
    this.game.load.spritesheet('mummy', 'assets/sprites/metalslug_mummy37x45.png', 37, 45, 18);
    this.game.load.atlasJSONHash('bot', 'assets/sprites/running_bot.png', 'assets/sprites/running_bot.json');
  };
  DrawGroup.prototype.create = function () {
    var group = this.game.make.group();
    group.create(0, 0, 'bg');
    for (var i = 0; i <= 15; i++) {
      var sprite = group.create(this.game.world.randomX, this.game.world.randomY, 'loop');
      if (i % 2 === 1) {
        sprite.tint = 16711935;
      }
    }
    var bmpText = this.game.make.bitmapText(32, 64, 'desyrel', 'Bitmap Text in the Group', 64);
    bmpText.angle = 10;
    group.add(bmpText);
    var s = group.create(250, 300, 'disk');
    var r = this.game.make.sprite(32, 16, 'squad');
    s.addChild(r);
    r.angle = 45.0;
    s.scale.x = -1.0;
    s.angle = -20.0;
    var mummy = group.create(600, 4, 'mummy', 8);
    mummy.scale.set(4);
    mummy.smoothed = false;
    var bot = group.create(60, 200, 'bot');
    bot.scale.set(2);
    var bmd = this.game.add.bitmapData(this.game.width, this.game.height);
    var bmdContainer = bmd.addToWorld(390, 290, 0, 0, 0.5, 0.5);
    this.game.stage.updateTransform();
    bmd.drawGroup(this.game.world);
  };
  DrawGroup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DrawGroup',
    baseClasses: []
  };
  function DrawSprite() {
    Phaser.State.call(this);
  }
  DrawSprite.prototype.preload = function () {
    this.game.load.image('loop', 'assets/sprites/loop.png');
    this.game.load.atlas('seacreatures', 'assets/sprites/seacreatures_json.png', 'assets/sprites/seacreatures_json.json');
  };
  DrawSprite.prototype.create = function () {
    this.loop = this.game.make.sprite(0, 0, 'loop');
    this.loop.anchor.set(0.5);
    var crab = this.game.make.sprite(0, 0, 'seacreatures', 'crab10015');
    this.bmd = this.game.add.bitmapData(this.game.width, this.game.height);
    this.bmd.addToWorld();
    this.bmd.smoothed = false;
    this.bmd.draw(crab, 10, 10);
  };
  DrawSprite.prototype.paint_xtjlay$ = function (pointer, x, y) {
    if (pointer.isDown) {
      this.bmd.draw(this.loop, x, y);
    }
  };
  DrawSprite.prototype.update = function () {
    this.loop.rotation = this.loop.rotation + 0.1;
  };
  DrawSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DrawSprite',
    baseClasses: []
  };
  function GetPixel() {
    Phaser.State.call(this);
  }
  GetPixel.prototype.preload = function () {
    this.game.load.image('wheel', 'assets/pics/color_wheel_swirl.png');
  };
  GetPixel.prototype.create = function () {
    this.bmd = this.game.make.bitmapData(800, 600);
    this.bmd.draw('wheel', -200, -100);
    this.bmd.update();
    this.bmd.addToWorld();
    this.tooltip = this.game.make.bitmapData(64, 64);
    this.sprite = this.game.add.sprite(0, 0, this.tooltip);
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'updateTooltip_rxq7re$'), this);
  };
  GetPixel.prototype.updateTooltip_rxq7re$ = function (pointer, x, y) {
    if (x >= 0 && x <= this.bmd.width && y >= 0 && y <= this.bmd.height) {
      var color = this.bmd.getPixelRGB(x, y);
      this.tooltip.fill(0, 0, 0);
      this.tooltip.rect(1, 1, 62, 62, color.rgba);
      this.sprite.x = x;
      this.sprite.y = y;
    }
  };
  GetPixel.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GetPixel',
    baseClasses: []
  };
  function ReplaceColor() {
    Phaser.State.call(this);
  }
  ReplaceColor.prototype.preload = function () {
    this.game.load.image('crystal', 'assets/pics/jim_sachs_time_crystal.png');
  };
  ReplaceColor.prototype.create = function () {
    this.bmd = this.game.make.bitmapData();
    this.bmd.load('crystal');
    this.bmd.addToWorld(this.game.world.centerX, this.game.world.centerY, 0.5, 0.5);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'recolor'), this);
  };
  ReplaceColor.prototype.recolor = function () {
    this.bmd.replaceRGB(0, 85, 255, 255, 0, 250, 40, 255);
  };
  ReplaceColor.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ReplaceColor',
    baseClasses: []
  };
  function SetHsl() {
    Phaser.State.call(this);
  }
  SetHsl.prototype.preload = function () {
    this.game.load.image('pic', 'assets/tests/ships.png');
  };
  SetHsl.prototype.create = function () {
    this.game.stage.backgroundColor = '#2d2d2d';
    this.bmd = this.game.make.bitmapData();
    this.bmd.load('pic');
    var sprite = this.bmd.addToWorld(this.game.world.centerX, this.game.world.centerY, 0.5, 0.5, 3, 3);
    sprite.smoothed = false;
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'startProcess'), this);
  };
  SetHsl.prototype.startProcess = function () {
    this.bmd.shiftHSL(0.1);
  };
  SetHsl.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SetHsl',
    baseClasses: []
  };
  function SpriteTexture() {
    Phaser.State.call(this);
  }
  SpriteTexture.prototype.preload = function () {
    this.game.load.image('pic', 'assets/pics/questar.png');
  };
  SpriteTexture.prototype.create = function () {
    var bmd = this.game.make.bitmapData(320, 256);
    bmd.copy('pic');
    bmd.circle(100, 100, 32, 'rgba(255,0,0,0.8)');
    bmd.rect(110, 40, 64, 120, 'rgba(255,0,255,0.8)');
    this.sprite = this.game.add.sprite(300, 300, bmd);
    this.sprite.anchor.set(0.5);
  };
  SpriteTexture.prototype.update = function () {
    this.sprite.rotation = this.sprite.rotation + 0.01;
  };
  SpriteTexture.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpriteTexture',
    baseClasses: []
  };
  function TextExample() {
    Phaser.State.call(this);
  }
  TextExample.prototype.preload = function () {
    this.game.load.image('back', 'assets/pics/swirl1.jpg');
  };
  function TextExample$create$ObjectLiteral() {
    this.font = 'bold 32px Arial';
    this.fill = '#ff0044';
  }
  TextExample$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TextExample$create$ObjectLiteral_0() {
    this.x = 0.5;
    this.y = 0.5;
  }
  TextExample$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TextExample.prototype.create = function () {
    this.game.add.image(0, 0, 'back');
    this.bmd = this.game.add.bitmapData(this.game.width, this.game.height);
    this.bmd.fill(0, 0, 0, 1);
    this.bmd.addToWorld();
    this.text = this.game.make.text(0, 0, 'phaser', new TextExample$create$ObjectLiteral());
    this.text.anchor.set(0.5);
    this.game.add.tween(this.text.scale).to(new TextExample$create$ObjectLiteral_0(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true, 0, IntCompanionObject.MAX_VALUE, true);
  };
  TextExample.prototype.update = function () {
    this.bmd.fill(0, 0, 0, 0.05);
    this.bmd.draw(this.text, this.game.world.randomX, this.game.world.randomY, null, null, 'destination-out');
  };
  TextExample.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TextExample',
    baseClasses: []
  };
  function Tint() {
    Phaser.State.call(this);
  }
  Tint.prototype.preload = function () {
    this.game.load.image('crystal', 'assets/pics/cougar_dragonsun.png');
  };
  Tint.prototype.create = function () {
    var pic = this.game.make.image(0, 0, 'crystal');
    this.bmd = this.game.make.bitmapData(pic.width, pic.height);
    PIXI.CanvasTinter.tintMethod(pic.texture, 15614787, this.bmd.canvas);
    this.bmd.addToWorld();
  };
  Tint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Tint',
    baseClasses: []
  };
  function ActionOnClick() {
    Phaser.State.call(this);
  }
  ActionOnClick.prototype.preload = function () {
    this.game.load.spritesheet('button', 'assets/buttons/button_sprite_sheet.png', 193, 71);
    this.game.load.image('background', 'assets/misc/starfield.jpg');
  };
  ActionOnClick.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.background = this.game.add.tileSprite(0, 0, 800, 600, 'background');
    this.button = this.game.add.button(this.game.world.centerX - 95, 400, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'actionOnClick'), this, 2, 1, 0);
    this.button.onInputOver.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'over'), this);
    this.button.onInputOut.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'out'), this);
    this.button.onInputUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'up'), this);
  };
  ActionOnClick.prototype.up = function () {
    console.log('button up');
  };
  ActionOnClick.prototype.over = function () {
    console.log('button over');
  };
  ActionOnClick.prototype.out = function () {
    console.log('button out');
  };
  ActionOnClick.prototype.actionOnClick = function () {
    this.background.visible = !this.background.visible;
  };
  ActionOnClick.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ActionOnClick',
    baseClasses: []
  };
  function ButtonInAGroup() {
    Phaser.State.call(this);
  }
  ButtonInAGroup.prototype.preload = function () {
    this.game.load.spritesheet('button', 'assets/buttons/button_sprite_sheet.png', 193, 71);
    this.game.load.image('background', 'assets/misc/starfield.jpg');
  };
  ButtonInAGroup.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 800, 600, 'background');
    this.group = this.game.add.group();
    var button = this.game.make.button(this.game.world.centerX - 95, 400, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'removeGroup'), this, 2, 1, 0);
    button.onInputOver.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'over'), this);
    button.onInputOut.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'out'), this);
    this.group.add(button);
  };
  ButtonInAGroup.prototype.removeGroup = function () {
    this.game.world.remove(this.group);
  };
  ButtonInAGroup.prototype.over = function () {
    console.log('button over');
  };
  ButtonInAGroup.prototype.out = function () {
    console.log('button out');
  };
  ButtonInAGroup.prototype.actionOnClick = function () {
    console.log('button clicked');
  };
  ButtonInAGroup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ButtonInAGroup',
    baseClasses: []
  };
  function ButtonScale() {
    Phaser.State.call(this);
  }
  ButtonScale.prototype.preload = function () {
    this.game.load.spritesheet('button', 'assets/buttons/button_sprite_sheet.png', 193, 71);
    this.game.load.image('sky0', 'assets/skies/space2.png');
    this.game.load.image('sky1', 'assets/skies/cavern1.png');
    this.game.load.image('sky2', 'assets/skies/chrome.png');
    this.game.load.image('sky3', 'assets/skies/fire.png');
    this.game.load.image('sky4', 'assets/skies/fog.png');
    this.game.load.image('sky5', 'assets/skies/sky1.png');
    this.game.load.image('sky6', 'assets/skies/toxic.png');
  };
  ButtonScale.prototype.create = function () {
    this.background = this.game.add.sprite(0, 0, 'sky0');
    this.background.name = 'background';
    this.button1 = this.game.add.button(100, 100, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'changeSky_wjvb6f$'), this, 2, 1, 0);
    this.button1.name = 'sky1';
    this.button1.anchor.setTo(0.5, 0.5);
    this.button2 = this.game.add.button(330, 200, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'changeSky_wjvb6f$'), this, 2, 1, 0);
    this.button2.name = 'sky2';
    this.button2.angle = 24.0;
    this.button2.anchor.setTo(0.5, 0.5);
    this.button3 = this.game.add.button(100, 300, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'changeSky_wjvb6f$'), this, 2, 1, 0);
    this.button3.name = 'sky3';
    this.button3.width = 300.0;
    this.button3.anchor.setTo(0, 0.5);
    this.button4 = this.game.add.button(300, 450, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'changeSky_wjvb6f$'), this, 2, 1, 0);
    this.button4.name = 'sky4';
    this.button4.scale.setTo(2, 2);
    this.button5 = this.game.add.button(100, 450, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'changeSky_wjvb6f$'), this, 2, 1, 0);
    this.button5.name = 'sky5';
    this.button5.scale.setTo(0.5, 0.5);
    this.button6 = this.game.add.button(570, 200, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'changeSky_wjvb6f$'), this, 2, 1, 0);
    this.button6.name = 'sky6';
    this.button6.angle = 32.0;
    this.button6.scale.setTo(2, 2);
    this.button6.anchor.setTo(0.5, 0.5);
  };
  ButtonScale.prototype.changeSky_wjvb6f$ = function (button) {
    this.background.loadTexture(button.name);
  };
  ButtonScale.prototype.render = function () {
  };
  ButtonScale.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ButtonScale',
    baseClasses: []
  };
  function ButtonUsingTextureAtlas() {
    Phaser.State.call(this);
  }
  ButtonUsingTextureAtlas.prototype.preload = function () {
    this.game.load.atlas('button', 'assets/buttons/button_texture_atlas.png', 'assets/buttons/button_texture_atlas.json');
    this.game.load.image('background', 'assets/misc/starfield.jpg');
  };
  ButtonUsingTextureAtlas.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.background = this.game.add.tileSprite(0, 0, 800, 600, 'background');
    this.button = this.game.add.button(this.game.world.centerX - 95, 400, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'actionOnClick_wjvb6f$'), this, 'over', 'out', 'down');
    this.button.onInputOver.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'over'), this);
    this.button.onInputOut.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'out'), this);
  };
  ButtonUsingTextureAtlas.prototype.over = function () {
    console.log('button over');
  };
  ButtonUsingTextureAtlas.prototype.out = function () {
    console.log('button out');
  };
  ButtonUsingTextureAtlas.prototype.actionOnClick_wjvb6f$ = function (b) {
    this.background.visible = !this.background.visible;
  };
  ButtonUsingTextureAtlas.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ButtonUsingTextureAtlas',
    baseClasses: []
  };
  function CancelButton() {
    Phaser.State.call(this);
  }
  CancelButton.prototype.preload = function () {
    this.game.load.spritesheet('button', 'assets/buttons/button_sprite_sheet.png', 193, 71);
    this.game.load.image('background', 'assets/misc/starfield.jpg');
  };
  CancelButton.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.background = this.game.add.tileSprite(0, 0, 800, 600, 'background');
    this.button = this.game.add.button(this.game.world.centerX - 95, 400, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'onUp_bckxk2$'), this, 2, 1, 0);
  };
  CancelButton.prototype.onUp_bckxk2$ = function (button, pointer, isOver) {
    if (isOver) {
      this.background.visible = !this.background.visible;
    }
  };
  CancelButton.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CancelButton',
    baseClasses: []
  };
  function ChangingTheFrames() {
    Phaser.State.call(this);
  }
  ChangingTheFrames.prototype.preload = function () {
    this.game.load.spritesheet('button', 'assets/buttons/number-buttons-90x90.png', 90, 90);
    this.game.load.image('background', 'assets/misc/starfield.jpg');
  };
  ChangingTheFrames.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.button = this.game.add.button(this.game.world.centerX, this.game.world.centerY, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'actionOnClick'), this, 1, 0, 2);
    this.button.anchor.setTo(0.5, 0.5);
  };
  ChangingTheFrames.prototype.actionOnClick = function () {
    this.button.setFrames(4, 3, 5);
  };
  ChangingTheFrames.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ChangingTheFrames',
    baseClasses: []
  };
  function DisableButtonOnClick() {
    Phaser.State.call(this);
  }
  DisableButtonOnClick.prototype.preload = function () {
    this.game.load.spritesheet('button', 'assets/buttons/button_sprite_sheet.png', 193, 71);
  };
  DisableButtonOnClick.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.button = this.game.add.button(this.game.world.centerX - 95, 400, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'actionOnClick'), this, 2, 1, 0);
    this.button.onInputOver.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'over'), this);
    this.button.onInputOut.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'out'), this);
  };
  DisableButtonOnClick.prototype.over = function () {
    console.log('button over');
  };
  DisableButtonOnClick.prototype.out = function () {
    console.log('button out');
  };
  DisableButtonOnClick.prototype.actionOnClick = function () {
    console.log('click');
    this.button.inputEnabled = false;
  };
  DisableButtonOnClick.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DisableButtonOnClick',
    baseClasses: []
  };
  function RotatedButtons() {
    Phaser.State.call(this);
  }
  RotatedButtons.prototype.preload = function () {
    this.game.load.spritesheet('button', 'assets/buttons/button_sprite_sheet.png', 193, 71);
    this.game.load.image('background', 'assets/misc/starfield.jpg');
  };
  RotatedButtons.prototype.create = function () {
    this.game.stage.backgroundColor = '#cccccc';
    this.button = this.game.add.button(this.game.world.centerX, this.game.world.centerY, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'actionOnClick'), this, 2, 1, 0);
    this.button.anchor.setTo(0.5, 0.5);
  };
  RotatedButtons.prototype.actionOnClick = function () {
    window.alert("Though I'm turning around, you can still click on me");
  };
  RotatedButtons.prototype.update = function () {
    this.button.angle = this.button.angle + 1;
  };
  RotatedButtons.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RotatedButtons',
    baseClasses: []
  };
  function BasicFollow() {
    Phaser.State.call(this);
  }
  BasicFollow.prototype.preload = function () {
    this.game.load.image('background', 'assets/tests/debug-grid-1920x1920.png');
    this.game.load.image('player', 'assets/sprites/phaser-dude.png');
  };
  BasicFollow.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 1920, 1920, 'background');
    this.game.world.setBounds(0, 0, 1920, 1920);
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'player');
    this.game.physics.p2.enable(this.player);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.camera.follow(this.player);
  };
  BasicFollow.prototype.update = function () {
    this.player.body.setZeroVelocity();
    if (this.cursors.up.isDown) {
      this.player.body.moveUp(300);
    }
     else if (this.cursors.down.isDown) {
      this.player.body.moveDown(300);
    }
    if (this.cursors.left.isDown) {
      this.player.body.velocity.x = -300.0;
    }
     else if (this.cursors.right.isDown) {
      this.player.body.moveRight(300);
    }
  };
  BasicFollow.prototype.render = function () {
    this.game.debug.cameraInfo(this.game.camera, 32, 32);
    this.game.debug.spriteCoords(this.player, 32, 500);
  };
  BasicFollow.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BasicFollow',
    baseClasses: []
  };
  function CameraCull() {
    Phaser.State.call(this);
  }
  CameraCull.prototype.preload = function () {
    this.game.load.image('disk', 'assets/sprites/ra_dont_crack_under_pressure.png');
  };
  CameraCull.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.s = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'disk');
    this.s.anchor.setTo(0.5, 0.5);
  };
  CameraCull.prototype.update = function () {
    this.s.rotation = this.s.rotation + 0.01;
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {
      this.s.x = this.s.x - 4;
    }
     else if (this.game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {
      this.s.x = this.s.x + 4;
    }
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.UP)) {
      this.s.y = this.s.y - 4;
    }
     else if (this.game.input.keyboard.isDown(Phaser.Keyboard.DOWN)) {
      this.s.y = this.s.y + 4;
    }
  };
  CameraCull.prototype.render = function () {
    this.game.debug.spriteBounds(this.s);
    this.game.debug.spriteInfo(this.s, 20, 32);
  };
  CameraCull.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CameraCull',
    baseClasses: []
  };
  function CameraFade() {
    Phaser.State.call(this);
  }
  CameraFade.prototype.preload = function () {
    this.game.load.image('background', 'assets/tests/debug-grid-1920x1920.png');
    this.game.load.image('player', 'assets/sprites/phaser-dude.png');
  };
  CameraFade.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 1920, 1920, 'background');
    this.game.world.setBounds(0, 0, 1920, 1920);
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'player');
    this.game.physics.p2.enable(this.player);
    this.player.body.fixedRotation = true;
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.camera.follow(this.player, Phaser.Camera.FOLLOW_LOCKON, 0.1, 0.1);
    this.game.camera.onFadeComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'resetFade'), this);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'fade'), this);
  };
  CameraFade.prototype.fade = function () {
    this.game.camera.fade(0, 4000);
  };
  CameraFade.prototype.resetFade = function () {
    this.game.camera.resetFX();
  };
  CameraFade.prototype.update = function () {
    this.player.body.setZeroVelocity();
    if (this.cursors.up.isDown) {
      this.player.body.moveUp(300);
    }
     else if (this.cursors.down.isDown) {
      this.player.body.moveDown(300);
    }
    if (this.cursors.left.isDown) {
      this.player.body.velocity.x = -300.0;
    }
     else if (this.cursors.right.isDown) {
      this.player.body.moveRight(300);
    }
  };
  CameraFade.prototype.render = function () {
    this.game.debug.text('Arrows to move. Click to fade', 32, 32);
  };
  CameraFade.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CameraFade',
    baseClasses: []
  };
  function CameraFlash() {
    Phaser.State.call(this);
  }
  CameraFlash.prototype.preload = function () {
    this.game.load.image('background', 'assets/tests/debug-grid-1920x1920.png');
    this.game.load.image('player', 'assets/sprites/phaser-dude.png');
  };
  CameraFlash.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 1920, 1920, 'background');
    this.game.world.setBounds(0, 0, 1920, 1920);
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'player');
    this.game.physics.p2.enable(this.player);
    this.player.body.fixedRotation = true;
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.camera.follow(this.player, Phaser.Camera.FOLLOW_LOCKON, 0.1, 0.1);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'flash'), this);
  };
  CameraFlash.prototype.flash = function () {
    this.game.camera.flash(16711680, 500);
  };
  CameraFlash.prototype.update = function () {
    this.player.body.setZeroVelocity();
    if (this.cursors.up.isDown) {
      this.player.body.moveUp(300);
    }
     else if (this.cursors.down.isDown) {
      this.player.body.moveDown(300);
    }
    if (this.cursors.left.isDown) {
      this.player.body.velocity.x = -300.0;
    }
     else if (this.cursors.right.isDown) {
      this.player.body.moveRight(300);
    }
  };
  CameraFlash.prototype.render = function () {
    this.game.debug.text('Arrows to move. Click to flash', 32, 32);
  };
  CameraFlash.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CameraFlash',
    baseClasses: []
  };
  function CameraLerp() {
    Phaser.State.call(this);
  }
  CameraLerp.prototype.preload = function () {
    this.game.load.image('background', 'assets/tests/debug-grid-1920x1920.png');
    this.game.load.image('player', 'assets/sprites/phaser-dude.png');
  };
  CameraLerp.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 1920, 1920, 'background');
    this.game.world.setBounds(0, 0, 1920, 1920);
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'player');
    this.game.physics.p2.enable(this.player);
    this.player.body.fixedRotation = true;
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.camera.follow(this.player, Phaser.Camera.FOLLOW_LOCKON, 0.1, 0.1);
  };
  CameraLerp.prototype.update = function () {
    this.player.body.setZeroVelocity();
    if (this.cursors.up.isDown) {
      this.player.body.moveUp(300);
    }
     else if (this.cursors.down.isDown) {
      this.player.body.moveDown(300);
    }
    if (this.cursors.left.isDown) {
      this.player.body.velocity.x = -300.0;
    }
     else if (this.cursors.right.isDown) {
      this.player.body.moveRight(300);
    }
  };
  CameraLerp.prototype.render = function () {
    this.game.debug.text('Arrows to move.', 32, 32);
  };
  CameraLerp.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CameraLerp',
    baseClasses: []
  };
  function CameraShake() {
    Phaser.State.call(this);
  }
  CameraShake.prototype.preload = function () {
    this.game.load.image('background', 'assets/tests/debug-grid-1920x1920.png');
    this.game.load.image('player', 'assets/sprites/phaser-dude.png');
  };
  CameraShake.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 1920, 1920, 'background');
    this.game.world.setBounds(0, 0, 1920, 1920);
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'player');
    this.game.physics.p2.enable(this.player);
    this.player.body.fixedRotation = true;
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.camera.follow(this.player, Phaser.Camera.FOLLOW_LOCKON, 0.1, 0.1);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'shake'), this);
  };
  CameraShake.prototype.shake = function () {
    this.game.camera.shake(0.05, 500);
  };
  CameraShake.prototype.update = function () {
    this.player.body.setZeroVelocity();
    if (this.cursors.up.isDown) {
      this.player.body.moveUp(300);
    }
     else if (this.cursors.down.isDown) {
      this.player.body.moveDown(300);
    }
    if (this.cursors.left.isDown) {
      this.player.body.velocity.x = -300.0;
    }
     else if (this.cursors.right.isDown) {
      this.player.body.moveRight(300);
    }
  };
  CameraShake.prototype.render = function () {
    this.game.debug.text('Arrows to move. Click to shake', 32, 32);
  };
  CameraShake.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CameraShake',
    baseClasses: []
  };
  function CameraView() {
    Phaser.State.call(this);
    this.moving = 0;
  }
  CameraView.prototype.preload = function () {
    this.game.load.image('backdrop', 'assets/pics/remember-me.jpg');
    this.game.load.image('card', 'assets/sprites/mana_card.png');
  };
  CameraView.prototype.create = function () {
    this.game.world.setBounds(0, 0, 1920, 1200);
    this.game.add.sprite(0, 0, 'backdrop');
    this.card = this.game.add.sprite(200, 200, 'card');
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'toggle'), this);
  };
  CameraView.prototype.toggle = function () {
    this.moving = this.moving === 0 ? 1 : 0;
  };
  CameraView.prototype.update = function () {
    if (this.moving === 0) {
      if (this.cursors.up.isDown) {
        this.game.camera.y = this.game.camera.y - 4;
      }
       else if (this.cursors.down.isDown) {
        this.game.camera.y = this.game.camera.y + 4;
      }
      if (this.cursors.left.isDown) {
        this.game.camera.x = this.game.camera.x - 4;
      }
       else if (this.cursors.right.isDown) {
        this.game.camera.x = this.game.camera.x + 4;
      }
    }
     else {
      if (this.cursors.left.isDown) {
        this.card.x = this.card.x - 4;
      }
       else if (this.cursors.right.isDown) {
        this.card.x = this.card.x + 4;
      }
      if (this.cursors.up.isDown) {
        this.card.y = this.card.y - 4;
      }
       else if (this.cursors.down.isDown) {
        this.card.y = this.card.y + 4;
      }
    }
  };
  CameraView.prototype.render = function () {
    this.game.debug.cameraInfo(this.game.camera, 500, 32);
    this.game.debug.spriteInfo(this.card, 32, 32);
    this.game.debug.text('Click to toggle sprite / camera movement with cursors', 32, 550);
  };
  CameraView.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CameraView',
    baseClasses: []
  };
  function Deadzone() {
    Phaser.State.call(this);
  }
  Deadzone.prototype.preload = function () {
    this.game.load.image('background', 'assets/tests/debug-grid-1920x1920.png');
    this.game.load.image('player', 'assets/sprites/phaser-dude.png');
  };
  Deadzone.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 1920, 1920, 'background');
    this.game.world.setBounds(0, 0, 1920, 1920);
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'player');
    this.game.physics.p2.enable(this.player);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.camera.follow(this.player);
    this.game.camera.deadzone = new Phaser.Rectangle(100, 100, 600, 400);
  };
  Deadzone.prototype.update = function () {
    this.player.body.setZeroVelocity();
    if (this.cursors.up.isDown) {
      this.player.body.moveUp(300);
    }
     else if (this.cursors.down.isDown) {
      this.player.body.moveDown(300);
    }
    if (this.cursors.left.isDown) {
      this.player.body.velocity.x = -300.0;
    }
     else if (this.cursors.right.isDown) {
      this.player.body.moveRight(300);
    }
  };
  Deadzone.prototype.render = function () {
    var zone = this.game.camera.deadzone;
    this.game.context.fillStyle = 'rgba(255,0,0,0.6)';
    this.game.context.fillRect(zone.x, zone.y, zone.width, zone.height);
    this.game.debug.cameraInfo(this.game.camera, 32, 32);
    this.game.debug.spriteCoords(this.player, 32, 500);
  };
  Deadzone.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Deadzone',
    baseClasses: []
  };
  function FixedToCamera() {
    Phaser.State.call(this);
  }
  FixedToCamera.prototype.preload = function () {
    this.game.stage.backgroundColor = '#007236';
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
    this.game.load.image('sonic', 'assets/sprites/sonic_havok_sanity.png');
    this.game.load.image('phaser', 'assets/sprites/phaser1.png');
  };
  function FixedToCamera$create$ObjectLiteral() {
    this.font = '32px Arial';
    this.fill = '#f26c4f';
    this.align = 'left';
  }
  FixedToCamera$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FixedToCamera$create$ObjectLiteral_0() {
    this.font = '32px Arial';
    this.fill = '#ffffff';
    this.align = 'center';
  }
  FixedToCamera$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FixedToCamera$create$ObjectLiteral_1() {
    this.y = 400;
  }
  FixedToCamera$create$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  FixedToCamera.prototype.create = function () {
    var tmp$;
    this.game.world.resize(6000, 600);
    tmp$ = 200 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'mushroom');
    }
    this.game.add.text(32, 32, 'this text is on the background\nuse arrows to scroll', new FixedToCamera$create$ObjectLiteral());
    this.logo1 = this.game.add.sprite(100, 300, 'phaser');
    this.logo1.fixedToCamera = true;
    this.logo2 = this.game.add.sprite(500, 100, 'phaser');
    this.logo2.fixedToCamera = true;
    var t = this.game.add.text(200, 500, 'this text is fixed to the camera', new FixedToCamera$create$ObjectLiteral_0());
    t.fixedToCamera = true;
    t.cameraOffset.setTo(200, 500);
    this.game.add.tween(this.logo2.cameraOffset).to(new FixedToCamera$create$ObjectLiteral_1(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Back, 'InOut'), true, 0, 2000, true);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  FixedToCamera.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.game.camera.x = this.game.camera.x - 4;
    }
     else if (this.cursors.right.isDown) {
      this.game.camera.x = this.game.camera.x + 4;
    }
  };
  FixedToCamera.prototype.render = function () {
  };
  FixedToCamera.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FixedToCamera',
    baseClasses: []
  };
  function FollowStyles() {
    Phaser.State.call(this);
    this.Keys = Phaser.Keyboard;
    this.speed = 4;
    this.style = 'default';
  }
  FollowStyles.prototype.preload = function () {
    this.game.load.image('ground', 'assets/tests/ground-2x.png');
    this.game.load.image('river', 'assets/tests/river-2x.png');
    this.game.load.image('sky', 'assets/tests/sky-2x.png');
    this.game.load.image('cloud0', 'assets/tests/cloud-big-2x.png');
    this.game.load.image('cloud1', 'assets/tests/cloud-narrow-2x.png');
    this.game.load.image('cloud2', 'assets/tests/cloud-small-2x.png');
    this.game.load.image('ufo', 'assets/sprites/ufo.png');
    this.game.load.image('baddie', 'assets/sprites/space-baddie.png');
    this.game.load.spritesheet('button', 'assets/buttons/follow-style-button.png', 224, 70);
  };
  FollowStyles.prototype.create = function () {
    var tmp$;
    this.game.world.setBounds(0, 0, 1400, 1400);
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'baddie');
    }
    this.game.add.tileSprite(0, 0, 1400, 600, 'sky');
    this.game.add.sprite(0, 360, 'ground');
    this.game.add.sprite(0, 400, 'river');
    this.game.add.sprite(200, 120, 'cloud0');
    this.game.add.sprite(-60, 120, 'cloud1');
    this.game.add.sprite(900, 170, 'cloud2');
    this.ufo = this.game.add.sprite(300, 240, 'ufo');
    this.ufo.anchor.setTo(0.5, 0.5);
    this.game.camera.follow(this.ufo);
    var btn0 = this.game.add.button(6, 40, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'lockonFollow'), this, 0, 0, 0);
    var btn1 = this.game.add.button(6, 120, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'platformerFollow'), this, 1, 1, 1);
    var btn2 = this.game.add.button(6, 200, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'topdownFollow'), this, 2, 2, 2);
    var btn3 = this.game.add.button(6, 280, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'topdownTightFollow'), this, 3, 3, 3);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  FollowStyles.prototype.lockonFollow = function () {
    this.game.camera.follow(this.ufo, Phaser.Camera.FOLLOW_LOCKON);
    this.style = 'STYLE_LOCKON';
  };
  FollowStyles.prototype.platformerFollow = function () {
    this.game.camera.follow(this.ufo, Phaser.Camera.FOLLOW_PLATFORMER);
    this.style = 'STYLE_PLATFORMER';
  };
  FollowStyles.prototype.topdownFollow = function () {
    this.game.camera.follow(this.ufo, Phaser.Camera.FOLLOW_TOPDOWN);
    this.style = 'STYLE_TOPDOWN';
  };
  FollowStyles.prototype.topdownTightFollow = function () {
    this.game.camera.follow(this.ufo, Phaser.Camera.FOLLOW_TOPDOWN_TIGHT);
    this.style = 'STYLE_TOPDOWN_TIGHT';
  };
  FollowStyles.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.ufo.x = this.ufo.x - this.speed;
      this.ufo.angle = -15.0;
    }
     else if (this.cursors.right.isDown) {
      this.ufo.x = this.ufo.x + this.speed;
      this.ufo.angle = 15.0;
    }
     else if (this.cursors.up.isDown) {
      this.ufo.y = this.ufo.y - this.speed;
    }
     else if (this.cursors.down.isDown) {
      this.ufo.y = this.ufo.y + this.speed;
    }
     else {
      this.ufo.angle = 0.0;
    }
  };
  FollowStyles.prototype.render = function () {
    this.game.debug.text('Click buttons to switch follow styles', 32, 32);
    this.game.debug.text('Current style: ' + this.style, 32, 64);
  };
  FollowStyles.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FollowStyles',
    baseClasses: []
  };
  function MassCameraCull() {
    Phaser.State.call(this);
  }
  MassCameraCull.prototype.preload = function () {
    this.game.load.image('backdrop', 'assets/pics/remember-me.jpg');
    this.game.load.image('baddie1', 'assets/sprites/shmup-baddie.png');
    this.game.load.image('baddie2', 'assets/sprites/shmup-baddie2.png');
    this.game.load.image('baddie3', 'assets/sprites/shmup-baddie3.png');
  };
  MassCameraCull.prototype.create = function () {
    var tmp$;
    this.game.world.setBounds(0, 0, 1920, 1200);
    this.game.add.sprite(0, 0, 'backdrop');
    tmp$ = 100 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var s = this.game.add.sprite(this.game.rnd.between(800, 1100), this.game.world.randomY, 'baddie' + this.game.rnd.between(1, 3));
      enable(this.game.physics.arcade, s);
      s.body.velocity.x = this.game.rnd.between(-25, -50);
      s.autoCull = true;
      s.checkWorldBounds = true;
      s.events.onOutOfBounds.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'resetSprite_okw7gk$'), this);
    }
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  MassCameraCull.prototype.resetSprite_okw7gk$ = function (sprite) {
    sprite.x = this.game.world.bounds.right;
  };
  MassCameraCull.prototype.update = function () {
    if (this.cursors.up.isDown) {
      this.game.camera.y = this.game.camera.y - 4;
    }
     else if (this.cursors.down.isDown) {
      this.game.camera.y = this.game.camera.y + 4;
    }
    if (this.cursors.left.isDown) {
      this.game.camera.x = this.game.camera.x - 4;
    }
     else if (this.cursors.right.isDown) {
      this.game.camera.x = this.game.camera.x + 4;
    }
  };
  MassCameraCull.prototype.render = function () {
    this.game.debug.cameraInfo(this.game.camera, 32, 32);
  };
  MassCameraCull.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MassCameraCull',
    baseClasses: []
  };
  function MovingTheCamera() {
    Phaser.State.call(this);
  }
  MovingTheCamera.prototype.preload = function () {
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  MovingTheCamera.prototype.create = function () {
    var tmp$;
    this.game.stage.backgroundColor = '#2d2d2d';
    this.game.world.setBounds(0, 0, 2000, 2000);
    tmp$ = 150 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'mushroom');
    }
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  MovingTheCamera.prototype.update = function () {
    if (this.cursors.up.isDown) {
      this.game.camera.y = this.game.camera.y - 4;
    }
     else if (this.cursors.down.isDown) {
      this.game.camera.y = this.game.camera.y + 4;
    }
    if (this.cursors.left.isDown) {
      this.game.camera.x = this.game.camera.x - 4;
    }
     else if (this.cursors.right.isDown) {
      this.game.camera.x = this.game.camera.x + 4;
    }
  };
  MovingTheCamera.prototype.render = function () {
    this.game.debug.cameraInfo(this.game.camera, 32, 32);
  };
  MovingTheCamera.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MovingTheCamera',
    baseClasses: []
  };
  function SmoothFollow() {
    Phaser.State.call(this);
  }
  SmoothFollow.prototype.preload = function () {
    this.game.load.image('background', 'assets/tests/debug-grid-1920x1920.png');
    this.game.load.image('player', 'assets/sprites/phaser-dude.png');
  };
  SmoothFollow.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 1920, 1920, 'background');
    this.game.world.setBounds(0, 0, 1920, 1920);
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.player = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'player');
    this.game.physics.p2.enable(this.player);
    this.player.body.fixedRotation = true;
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.camera.follow(this.player, Phaser.Camera.FOLLOW_LOCKON, 0.1, 0.1);
  };
  SmoothFollow.prototype.update = function () {
    this.player.body.setZeroVelocity();
    if (this.cursors.up.isDown) {
      this.player.body.moveUp(300);
    }
     else if (this.cursors.down.isDown) {
      this.player.body.moveDown(300);
    }
    if (this.cursors.left.isDown) {
      this.player.body.velocity.x = -300.0;
    }
     else if (this.cursors.right.isDown) {
      this.player.body.moveRight(300);
    }
  };
  SmoothFollow.prototype.render = function () {
    this.game.debug.cameraInfo(this.game.camera, 32, 32);
  };
  SmoothFollow.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SmoothFollow',
    baseClasses: []
  };
  function WorldSprite() {
    Phaser.State.call(this);
  }
  WorldSprite.prototype.preload = function () {
    this.game.load.image('backdrop', 'assets/pics/remember-me.jpg');
    this.game.load.image('card', 'assets/sprites/mana_card.png');
  };
  WorldSprite.prototype.create = function () {
    this.game.forceSingleUpdate = true;
    this.game.world.setBounds(0, 0, 1920, 1200);
    this.game.add.sprite(0, 0, 'backdrop');
    this.card = this.game.add.sprite(200, 200, 'card');
    this.card.anchor.set(0.5);
    this.game.physics.enable(this.card, Phaser.Physics.ARCADE);
    this.card.body.collideWorldBounds = true;
    this.game.camera.follow(this.card);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  WorldSprite.prototype.update = function () {
    this.card.body.velocity.x = 0.0;
    this.card.body.velocity.y = 0.0;
    if (this.cursors.left.isDown) {
      this.card.body.velocity.x = -240.0;
    }
     else if (this.cursors.right.isDown) {
      this.card.body.velocity.x = 240.0;
    }
    if (this.cursors.up.isDown) {
      this.card.body.velocity.y = -240.0;
    }
     else if (this.cursors.down.isDown) {
      this.card.body.velocity.y = 240.0;
    }
  };
  function WorldSprite$render$ObjectLiteral(this$WorldSprite) {
    this.x = 400 + this$WorldSprite.game.camera.x;
    this.y = 0 + this$WorldSprite.game.camera.y;
    this.width = 1;
    this.height = 600;
  }
  WorldSprite$render$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function WorldSprite$render$ObjectLiteral_0(this$WorldSprite) {
    this.x = 0 + this$WorldSprite.game.camera.x;
    this.y = 300 + this$WorldSprite.game.camera.y;
    this.width = 800;
    this.height = 1;
  }
  WorldSprite$render$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  WorldSprite.prototype.render = function () {
    this.game.debug.cameraInfo(this.game.camera, 500, 32);
    this.game.debug.spriteCoords(this.card, 32, 32);
    this.game.debug.rectangle(new WorldSprite$render$ObjectLiteral(this));
    this.game.debug.rectangle(new WorldSprite$render$ObjectLiteral_0(this));
  };
  WorldSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'WorldSprite',
    baseClasses: []
  };
  function ZoomingTheCamera() {
    Phaser.State.call(this);
    this.zooming = false;
    this.zoomAmount = 0.0;
    this.size = new Phaser.Rectangle();
  }
  ZoomingTheCamera.prototype.preload = function () {
    this.game.load.image('backdrop', 'assets/pics/remember-me.jpg');
    this.game.load.image('card', 'assets/sprites/mana_card.png');
  };
  ZoomingTheCamera.prototype.create = function () {
    this.game.world.setBounds(-960, -600, 1920, 1200);
    this.size.setTo(-960, -600, 1920, 1200);
    this.game.add.sprite(-960, -600, 'backdrop');
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.camera.focusOnXY(-960, -600);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'startZoom_pal8wq$'), this);
    this.game.input.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'stopZoom_pal8wq$'), this);
  };
  ZoomingTheCamera.prototype.startZoom_pal8wq$ = function (pointer) {
    this.zooming = true;
    if (pointer.button === Phaser.Mouse.LEFT_BUTTON) {
      this.zoomAmount = 0.005;
    }
     else {
      this.zoomAmount = -0.005;
    }
  };
  ZoomingTheCamera.prototype.stopZoom_pal8wq$ = function (pointer) {
    this.zooming = false;
  };
  ZoomingTheCamera.prototype.update = function () {
    if (this.zooming) {
      this.game.camera.scale.x = this.game.camera.scale.x + this.zoomAmount;
      this.game.camera.scale.y = this.game.camera.scale.y + this.zoomAmount;
      this.game.camera.bounds.x = this.size.x * this.game.camera.scale.x;
      this.game.camera.bounds.y = this.size.y * this.game.camera.scale.y;
      this.game.camera.bounds.width = this.size.width * this.game.camera.scale.x;
      this.game.camera.bounds.height = this.size.height * this.game.camera.scale.y;
      console.log(this.game.camera.view);
    }
    if (this.cursors.up.isDown) {
      this.game.camera.y = this.game.camera.y - 4;
    }
     else if (this.cursors.down.isDown) {
      this.game.camera.y = this.game.camera.y + 4;
    }
    if (this.cursors.left.isDown) {
      this.game.camera.x = this.game.camera.x - 4;
    }
     else if (this.cursors.right.isDown) {
      this.game.camera.x = this.game.camera.x + 4;
    }
  };
  ZoomingTheCamera.prototype.render = function () {
  };
  ZoomingTheCamera.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ZoomingTheCamera',
    baseClasses: []
  };
  function GenerateSprite() {
    Phaser.State.call(this);
  }
  GenerateSprite.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#2d2d2d';
    var dudeData = ['.......3.....', '......333....', '....5343335..', '...332333333.', '..33333333333', '..37773337773', '..38587778583', '..38588888583', '..37888888873', '...333333333.', '.F....5556...', '3E34.6757.6..', '.E.55.666.5..', '......777.5..', '.....6..7....', '.....7..7....'];
    this.game.create.texture('phaserDude', dudeData, 4, 4, 0);
    this.player = this.game.add.sprite(300, 300, 'phaserDude');
    this.player.anchor.set(0.5);
    enable(this.game.physics.arcade, this.player);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  GenerateSprite.prototype.update = function () {
    this.player.body.velocity.x = 0.0;
    this.player.body.velocity.y = 0.0;
    if (this.cursors.left.isDown) {
      this.player.body.velocity.x = -200.0;
      this.player.scale.x = 1.0;
    }
     else if (this.cursors.right.isDown) {
      this.player.body.velocity.x = 200.0;
      this.player.scale.x = -1.0;
    }
    if (this.cursors.up.isDown) {
      this.player.body.velocity.y = -200.0;
    }
     else if (this.cursors.down.isDown) {
      this.player.body.velocity.y = 200.0;
    }
  };
  GenerateSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GenerateSprite',
    baseClasses: []
  };
  function MoreSprites() {
    Phaser.State.call(this);
  }
  MoreSprites.prototype.create = function () {
    var pixelWidth = 6;
    var pixelHeight = 6;
    var chick = ['...55.......', '.....5......', '...7888887..', '..788888887.', '..888088808.', '..888886666.', '..8888644444', '..8888645555', '888888644444', '88788776555.', '78788788876.', '56655677776.', '456777777654', '.4........4.'];
    this.game.create.texture('chick', chick, pixelWidth, pixelHeight);
    var burd = ['..E.............', '.DEEEEEEDDD.....', '..EEEEEEDDD.....', '..EE00EE77778666', '..EEEEEE77777666', '..EEEE7777777666', '..EEEE7655567666', 'EEEEEE7777757666', 'EEEEEEDD555.7666', '..DEEEEEDDD.....', '..EEEEEEDDD.....', '.7EEEEEEDDD.6...', '.77EEEEEDDD66...', '..77......66....'];
    this.game.create.texture('burd', burd, pixelWidth, pixelHeight);
    var alien = ['....44........', '....44........', '......5.......', '......5.......', '....ABBBBA....', '...ABBBBBBA...', '..ABB8228BBA..', '..BB882288BB..', '.ABB885588BBA.', 'BBBB885588BBBB', 'BBBB788887BBBB', '.ABBB7777BBBA.', '.ABBBBBBBBBBA.', '.AABBBBBBBBAA.', '.AAAAAAAAAAAA.', '.5AAAAAAAAAA5.'];
    this.game.create.texture('alien', alien, pixelWidth, pixelHeight);
    var ufo = ['....DDDDDDDD....', '...DDEEDDDDDD...', '..DDDEEDDDDDDD..', '..DDDDDDDDDDDD..', '..DDDD5555DDDD..', '..DDD555555DDD..', '..DDD555555DDD..', '..DDD555555DDD..', '..334244333333..', '.33344443333333.', '3333444433333333', '....5...5..5....', '...5....5...5...', '.66....66....66.', '.66....66....66.'];
    this.game.create.texture('ufo', ufo, pixelWidth, pixelHeight);
    var star = ['.....828.....', '....72227....', '....82228....', '...7222227...', '2222222222222', '8222222222228', '.72222222227.', '..787777787..', '..877777778..', '.78778887787.', '.27887.78872.', '.787.....787.'];
    this.game.create.texture('star', star, pixelWidth, pixelHeight);
    var ship = ['.....DEEEEEED...', '.....EEEEEFFE...', '.....EEEDDFFE...', '334..EEDDDDEE...', '3333.EEDDDDEE...', '33333EEDDDDEE...', '.FF2222222222F..', '.F222222222222F.', '.22222222222222F', '4443322222222222', '44433FFFFFFFFFFF', '.111FFFFFFFFFFF.', '.11FFFFFFFFFFF..', '.1FFFFFFFFFF1...', '...3333.........', '...333..........'];
    this.game.create.texture('ship', ship, pixelWidth, pixelHeight);
    var cat = ['....443...443.', '...4433..4433.', '..44333.48333.', '88888888244444', '44444444433333', '44444444433333', '44044404433333', '44488844433333', '44400044433333', '44F202F4433333', '44202024433333', '44F222F4433333', '44444444433333', '4433...4433.33', '4433...4433.33'];
    this.game.create.texture('cat', cat, pixelWidth, pixelHeight);
    var joypad = ['........65....5.', '.......5..5..5..', '.......5...55...', '.......5........', '.51FFFFFFFFFF15.', '51FFFFFFFFEEFF15', '1FF55FFFFFEEFFF1', 'FF5555FFFFFFF33F', 'FF0000FFAAFFF33F', 'FF1001FFAAFFFFFF', 'FFF11FFFFFF88FFF', '2FFFFF2222F88FF2', '1222221111222221', '11FFF111111FFF11', '.1FFF1....1FFF1.', '..111......111..'];
    this.game.create.texture('joypad', joypad, pixelWidth, pixelHeight);
    var joystick = ['..............', '....533335....', '....348333....', '....344333....', '....333533....', '....533335....', '......55......', '......33......', '......33......', '......55......', '....551155....', '.343556655343.', '61111111111116', '50000000000005', '50000000000005', '55555555555555', '.555......555.'];
    this.game.create.texture('joystick', joystick, pixelWidth, pixelHeight);
    this.game.add.sprite(150, 200, 'chick').anchor.y = 1.0;
    this.game.add.sprite(350, 200, 'burd').anchor.y = 1.0;
    this.game.add.sprite(550, 200, 'alien').anchor.y = 1.0;
    this.game.add.sprite(150, 350, 'ufo').anchor.y = 1.0;
    this.game.add.sprite(350, 350, 'star').anchor.y = 1.0;
    this.game.add.sprite(550, 350, 'ship').anchor.y = 1.0;
    this.game.add.sprite(150, 500, 'cat').anchor.y = 1.0;
    this.game.add.sprite(350, 500, 'joystick').anchor.y = 1.0;
    this.game.add.sprite(550, 500, 'joypad').anchor.y = 1.0;
  };
  MoreSprites.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MoreSprites',
    baseClasses: []
  };
  function RatAttack() {
    Phaser.State.call(this);
  }
  RatAttack.prototype.create = function () {
    var tmp$;
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#2d2d2d';
    var endData = ['2222'];
    this.game.create.texture('endTexture', endData, 1, 1, 1);
    var ratData = ['.D...........', '18...........', '1D...........', '18.....1111..', '1D..111DDEE1.', '1811EEE18E0E1', '.1DEEEEEEEEED', '..1EEEEEE41..', '.11E41E1411..', '1111E1E1E111.', '.1111111111..'];
    this.game.create.texture('ratTexture', ratData, 4, 4, 4);
    var dudeData = ['.......3.....', '......333....', '....5343335..', '...332333333.', '..33333333333', '..37773337773', '..38587778583', '..38588888583', '..37888888873', '...333333333.', '.F....5556...', '3E34.6757.6..', '.E.55.666.5..', '......777.5..', '.....6..7....', '.....7..7....'];
    this.game.create.texture('phaserDude', dudeData, 4, 4, 0);
    var end = this.game.add.sprite(0, 600 - 64, 'endTexture');
    end.width = 800.0;
    end.height = 64.0;
    this.rats = this.game.add.physicsGroup();
    var y = 80;
    tmp$ = 9 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var rat = this.rats.create(this.game.world.randomX, y, 'ratTexture');
      rat.body.velocity.x = this.game.rnd.between(100, 300);
      y += 48;
    }
    this.player = this.game.add.sprite(400, 32, 'phaserDude');
    this.player.anchor.set(0.5);
    enable(this.game.physics.arcade, this.player);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  RatAttack.prototype.update = function () {
    this.rats.forEach(Kotlin.getBoundCallableRefForMemberFunction(this, 'checkPos_okw7gk$'), this);
    this.game.physics.arcade.overlap(this.player, this.rats, Kotlin.getBoundCallableRefForMemberFunction(this, 'collisionHandler_ge0c0c$'), null, this);
    this.player.body.velocity.x = 0.0;
    this.player.body.velocity.y = 0.0;
    if (this.cursors.left.isDown) {
      this.player.body.velocity.x = -200.0;
      this.player.scale.x = 1.0;
    }
     else if (this.cursors.right.isDown) {
      this.player.body.velocity.x = 200.0;
      this.player.scale.x = -1.0;
    }
    if (this.cursors.up.isDown) {
      this.player.body.velocity.y = -200.0;
    }
     else if (this.cursors.down.isDown) {
      this.player.body.velocity.y = 200.0;
    }
  };
  RatAttack.prototype.checkPos_okw7gk$ = function (rat) {
    if (rat.x > 800) {
      rat.x = -100.0;
    }
  };
  RatAttack.prototype.collisionHandler_ge0c0c$ = function (player, rat) {
    player.x = 400.0;
    player.y = 320.0;
  };
  RatAttack.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RatAttack',
    baseClasses: []
  };
  function DebugCamera() {
    Phaser.State.call(this);
    this.counter = 0.0;
    this.step = get_PI(Phaser.Math) * 2 / 360;
  }
  DebugCamera.prototype.preload = function () {
    this.game.load.image('sprite', 'assets/sprites/phaser2.png');
  };
  DebugCamera.prototype.create = function () {
    this.sprite = this.game.add.sprite(0, 0, 'sprite');
    this.sprite.alpha = 0.5;
    this.sprite.x = this.game.width / 2;
    this.sprite.anchor.x = 0.5;
    this.sprite.anchor.y = 0.5;
  };
  DebugCamera.prototype.update = function () {
    console.log('counter: ', this.counter);
    var tStep = sin(Phaser.Math, this.counter);
    console.log('tStep: ', tStep);
    this.sprite.y = this.game.height / 2 + tStep * 30;
    this.sprite.rotation = this.sprite.rotation + Phaser.Math.degToRad(0.1 * tStep);
    this.counter += this.step;
  };
  DebugCamera.prototype.render = function () {
    this.game.debug.cameraInfo(this.game.camera, 32, 32);
  };
  DebugCamera.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DebugCamera',
    baseClasses: []
  };
  function DebugDisplay() {
    Phaser.State.call(this);
    this.counter = 0.0;
    this.step = get_PI(Phaser.Math) * 2 / 360;
  }
  DebugDisplay.prototype.preload = function () {
    this.game.load.image('sprite', 'assets/sprites/phaser2.png');
  };
  DebugDisplay.prototype.create = function () {
    this.sprite = this.game.add.sprite(0, 0, 'sprite');
    this.sprite.alpha = 0.5;
    this.sprite.x = this.game.width / 2;
    this.sprite.anchor.x = 0.5;
    this.sprite.anchor.y = 0.5;
  };
  DebugDisplay.prototype.update = function () {
    var tStep = sin(Phaser.Math, this.counter);
    this.sprite.y = this.game.height / 2 + tStep * 30;
    this.sprite.rotation = this.sprite.rotation + Phaser.Math.degToRad(0.1 * tStep);
    this.counter += this.step;
  };
  DebugDisplay.prototype.render = function () {
    this.game.debug.spriteBounds(this.sprite);
  };
  DebugDisplay.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DebugDisplay',
    baseClasses: []
  };
  function DebugDraw() {
    Phaser.State.call(this);
    this.rect = new Phaser.Rectangle(100, 100, 100, 100);
    this.circle = new Phaser.Circle(280, 150, 100);
    this.point = new Phaser.Point(100.0, 280.0);
  }
  DebugDraw.prototype.render = function () {
    this.game.debug.geom(this.rect, 'rgba(255,0,0,1)');
    this.game.debug.geom(this.circle, 'rgba(255,255,0,1)');
    this.game.debug.geom(this.point, 'rgba(255,255,255,1)');
    this.game.debug.pixel(200, 280, 'rgba(0,255,255,1)');
    this.game.debug.text('This is debug text', 100, 380);
  };
  DebugDraw.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DebugDraw',
    baseClasses: []
  };
  function DebugInput() {
    Phaser.State.call(this);
    this.counter = 0.0;
    this.step = get_PI(Phaser.Math) * 2 / 360;
  }
  DebugInput.prototype.preload = function () {
    this.game.load.image('sprite', 'assets/sprites/phaser2.png');
  };
  DebugInput.prototype.create = function () {
    this.sprite = this.game.add.sprite(0, 0, 'sprite');
    this.sprite.alpha = 0.5;
    this.sprite.x = this.game.width / 2;
    this.sprite.anchor.x = 0.5;
    this.sprite.anchor.y = 0.5;
    this.sprite.inputEnabled = true;
  };
  DebugInput.prototype.update = function () {
    var tStep = sin(Phaser.Math, this.counter);
    this.sprite.y = this.game.height / 2 + tStep * 30;
    this.sprite.rotation = this.sprite.rotation + Phaser.Math.degToRad(0.1 * tStep);
    this.counter += this.step;
  };
  DebugInput.prototype.render = function () {
    this.game.debug.inputInfo(32, 32);
    this.game.debug.spriteInputInfo(this.sprite, 32, 130);
    this.game.debug.pointer(this.game.input.activePointer);
  };
  DebugInput.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DebugInput',
    baseClasses: []
  };
  function DebugPhysics() {
    Phaser.State.call(this);
    this.counter = 0.0;
    this.step = get_PI(Phaser.Math) * 2 / 360;
  }
  DebugPhysics.prototype.preload = function () {
    this.game.load.image('sprite', 'assets/sprites/phaser2.png');
  };
  DebugPhysics.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.sprite = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'sprite');
    this.sprite.anchor.set(0.5);
    enable(this.game.physics.arcade, this.sprite);
  };
  DebugPhysics.prototype.update = function () {
    var tStep = sin(Phaser.Math, this.counter);
    this.sprite.body.y = 120 + tStep * 60;
    this.counter += this.step;
  };
  DebugPhysics.prototype.render = function () {
    this.game.debug.body(this.sprite);
  };
  DebugPhysics.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DebugPhysics',
    baseClasses: []
  };
  function DebugSprite() {
    Phaser.State.call(this);
    this.counter = 0.0;
    this.step = get_PI(Phaser.Math) * 2 / 360;
  }
  DebugSprite.prototype.preload = function () {
    this.game.load.image('sprite', 'assets/sprites/phaser2.png');
  };
  DebugSprite.prototype.create = function () {
    this.sprite = this.game.add.sprite(0, 0, 'sprite');
    this.sprite.alpha = 0.5;
    this.sprite.x = this.game.width / 2;
    this.sprite.anchor.x = 0.5;
    this.sprite.anchor.y = 0.5;
  };
  DebugSprite.prototype.update = function () {
    var tStep = sin(Phaser.Math, this.counter);
    this.sprite.y = this.game.height / 2 + tStep * 30;
    this.sprite.rotation = this.sprite.rotation + Phaser.Math.degToRad(0.1 * tStep);
    this.counter += this.step;
  };
  DebugSprite.prototype.render = function () {
    this.game.debug.spriteInfo(this.sprite, 32, 32);
  };
  DebugSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DebugSprite',
    baseClasses: []
  };
  function AtariIntro() {
    Phaser.State.call(this);
    this.mask = new Phaser.Rectangle();
  }
  AtariIntro.prototype.preload = function () {
    this.game.load.image('atari', 'assets/demoscene/atari.png');
    this.game.load.image('raster', 'assets/demoscene/pink-raster.png');
    this.game.load.image('floor', 'assets/demoscene/checker-floor.png');
  };
  function AtariIntro$create$ObjectLiteral(this$AtariIntro) {
    this.y = -(this$AtariIntro.mask.height - this$AtariIntro.effect.height);
  }
  AtariIntro$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function AtariIntro$create$ObjectLiteral_0() {
    this.x = 4;
    this.y = 4;
  }
  AtariIntro$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  AtariIntro.prototype.create = function () {
    this.game.stage.backgroundColor = '#000042';
    var floor_0 = this.game.add.image(0, this.game.height, 'floor');
    floor_0.width = 800.0;
    floor_0.anchor.y = 1.0;
    this.effect = this.game.make.bitmapData();
    this.effect.load('atari');
    this.image = this.game.add.image(this.game.world.centerX, this.game.world.centerY, this.effect);
    this.image.anchor.set(0.5);
    this.image.smoothed = false;
    this.mask.setTo(0, 0, this.effect.width, this.game.cache.getImage('raster').height);
    this.game.add.tween(this.mask).to(new AtariIntro$create$ObjectLiteral(this), 3000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Sinusoidal, 'InOut'), true, 0, 100, true);
    this.game.add.tween(this.image.scale).to(new AtariIntro$create$ObjectLiteral_0(), 3000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Quartic, 'InOut'), true, 0, 100, true);
  };
  AtariIntro.prototype.update = function () {
    this.effect.alphaMask('raster', this.effect, this.mask);
    this.image.rotation = this.image.rotation + 0.01;
  };
  AtariIntro.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AtariIntro',
    baseClasses: []
  };
  function FontFromBitmapdata() {
    Phaser.State.call(this);
    this.mask = new Phaser.Rectangle();
  }
  FontFromBitmapdata.prototype.preload = function () {
    this.game.load.image('knightHawks', 'assets/demoscene/knighthawks.png');
    this.game.load.image('raster', 'assets/demoscene/multi-color-raster.png');
  };
  function FontFromBitmapdata$create$ObjectLiteral(this$FontFromBitmapdata) {
    this.y = -(this$FontFromBitmapdata.mask.height - this$FontFromBitmapdata.font.height);
  }
  FontFromBitmapdata$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  FontFromBitmapdata.prototype.create = function () {
    this.retroFont = this.game.add.retroFont('knightHawks', 31, 25, Phaser.RetroFont.TEXT_SET2, 10, 1, 0);
    this.font = this.game.make.bitmapData();
    this.alpha = this.game.make.bitmapData();
    this.raster = this.game.make.bitmapData();
    this.font.load('knightHawks');
    this.font.extract(this.alpha, 237, 0, 140, 255, true);
    this.raster.resize(this.font.width, this.font.height);
    this.game.add.image(0, 0, 'knightHawks');
    this.game.add.image(360, 0, this.alpha);
    this.game.add.image(0, 200, this.raster);
    this.game.add.image(360, 200, this.font);
    this.mask.setTo(0, 0, this.font.width, this.game.cache.getImage('raster').height);
    console.log(this.font.texture.frame);
    var s1 = this.game.add.sprite(32, 500, this.font);
    s1.animations.copyFrameData(this.retroFont.frameData, 1);
    var s2 = this.game.add.sprite(100, 500, this.font);
    s2.animations.copyFrameData(this.retroFont.frameData, 2);
    console.log(this.font.texture.frame);
    this.game.add.tween(this.mask).to(new FontFromBitmapdata$create$ObjectLiteral(this), 4000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Sinusoidal, 'InOut'), true, 0, 100, true);
  };
  FontFromBitmapdata.prototype.update = function () {
    this.raster.cls();
    this.raster.alphaMask('raster', this.alpha, this.mask);
    this.font.draw(this.raster);
  };
  FontFromBitmapdata.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FontFromBitmapdata',
    baseClasses: []
  };
  function RasterCarpet() {
    Phaser.State.call(this);
    this.sx = 0.0;
    this.speed = 0.1;
  }
  RasterCarpet.prototype.preload = function () {
    this.game.load.baseURL = 'http://files.phaser.io.s3.amazonaws.com/misc/';
    this.game.load.crossOrigin = 'anonymous';
    this.game.load.image('raster', 'rastercarpet.png');
  };
  RasterCarpet.prototype.create = function () {
    var tmp$;
    this.bmd = this.game.make.bitmapData(480, 480);
    tmp$ = 480 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.bmd.draw('raster', 0, i);
    }
    this.fx = this.game.make.bitmapData(640, 480);
    var a = this.fx.addToWorld();
    a.y = 48.0;
  };
  RasterCarpet.prototype.update = function () {
    var tmp$;
    this.fx.cls();
    tmp$ = 30 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var x = i * 16;
      var y = 0;
      var w = i * 16 + 16;
      var h = 480 - i * 16;
      var tx = 232 + sin(Phaser.Math, this.sx) * (i * 8);
      var ty = i * 6;
      var blendMode = null;
      var roundPx = true;
      this.fx.copy(this.bmd, x, y, w, h, tx, ty, w, h, 0, 0, 0, 1, 1, 1, blendMode, roundPx);
    }
    this.sx += this.speed;
  };
  RasterCarpet.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RasterCarpet',
    baseClasses: []
  };
  function RasterFont() {
    Phaser.State.call(this);
    this.mask = new Phaser.Rectangle();
  }
  RasterFont.prototype.preload = function () {
    this.game.load.image('knightHawks', 'assets/demoscene/knighthawks.png');
    this.game.load.image('raster', 'assets/demoscene/multi-color-raster.png');
  };
  function RasterFont$create$ObjectLiteral(this$RasterFont) {
    this.y = -(this$RasterFont.mask.height - this$RasterFont.font.height);
  }
  RasterFont$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  RasterFont.prototype.create = function () {
    this.font = this.game.make.bitmapData();
    this.alpha = this.game.make.bitmapData();
    this.raster = this.game.make.bitmapData();
    this.font.load('knightHawks');
    this.font.extract(this.alpha, 237, 0, 140, 255, true);
    this.raster.resize(this.font.width, this.font.height);
    this.game.add.image(0, 0, 'knightHawks');
    this.game.add.image(360, 0, this.alpha);
    this.game.add.image(0, 200, this.raster);
    this.game.add.image(360, 200, this.font);
    this.mask.setTo(0, 0, this.font.width, this.game.cache.getImage('raster').height);
    this.game.add.tween(this.mask).to(new RasterFont$create$ObjectLiteral(this), 4000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Sinusoidal, 'InOut'), true, 0, 100, true);
  };
  RasterFont.prototype.update = function () {
    this.raster.cls();
    this.raster.alphaMask('raster', this.alpha, this.mask);
    this.font.draw(this.raster);
  };
  RasterFont.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RasterFont',
    baseClasses: []
  };
  function Springy() {
    Phaser.State.call(this);
    this.sx = 0.0;
    this.step = 3;
    this.speed = 0.1;
  }
  Springy.prototype.preload = function () {
    this.game.load.image('raster', 'assets/demoscene/rastercarpet.png');
  };
  Springy.prototype.create = function () {
    var tmp$;
    this.bmd = this.game.make.bitmapData(480, 480);
    tmp$ = 480 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.bmd.draw('raster', 0, i);
    }
    this.fx = this.game.make.bitmapData(640, 480);
    this.fx.addToWorld();
  };
  Springy.prototype.update = function () {
    var tmp$;
    this.fx.cls();
    tmp$ = 30 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var x = i * 16;
      var y = 0;
      var w = i * 16 + 16;
      var h = 480 - i * 16;
      var tx = 200 + sin(Phaser.Math, this.sx) * i * 6;
      var ty = i * 2;
      var alpha = 1;
      var blendMode = null;
      var roundPx = true;
      this.fx.copy(this.bmd, x, y, w, h, tx, ty, w, h, 0, 0, 0, 1, 1, alpha, blendMode, roundPx);
    }
    this.sx += this.speed;
  };
  Springy.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Springy',
    baseClasses: []
  };
  function Starfield() {
    Phaser.State.call(this);
    this.distance = 300.0;
    this.speed = 6.0;
    this.max = 400;
    this.xx = [];
    this.yy = [];
    this.zz = [];
  }
  Starfield.prototype.floor_14dthe$ = function (value) {
    return Phaser.Math.floorTo(value, null, null);
  };
  Starfield.prototype.preload = function () {
    this.game.load.image('tinystar', 'assets/demoscene/star2.png');
  };
  function Starfield$create$lambda(this$Starfield) {
    return function (it) {
      return this$Starfield.floor_14dthe$(random(Phaser.Math) * 800) - 400;
    };
  }
  function Starfield$create$lambda_0(this$Starfield) {
    return function (it) {
      return this$Starfield.floor_14dthe$(random(Phaser.Math) * 600) - 300;
    };
  }
  function Starfield$create$lambda_1(this$Starfield) {
    return function (it) {
      return this$Starfield.floor_14dthe$(random(Phaser.Math) * 1700) - 100;
    };
  }
  Starfield.prototype.create = function () {
    this.star = this.game.make.sprite(0, 0, 'tinystar');
    this.texture = this.game.add.renderTexture(800, 600, 'texture');
    this.game.add.sprite(0, 0, this.texture);
    this.xx = Kotlin.arrayFromFun(this.max, Starfield$create$lambda(this));
    this.yy = Kotlin.arrayFromFun(this.max, Starfield$create$lambda_0(this));
    this.zz = Kotlin.arrayFromFun(this.max, Starfield$create$lambda_1(this));
  };
  Starfield.prototype.update = function () {
    var tmp$;
    this.texture.clear();
    tmp$ = this.max - 1;
    for (var i = 0; i <= tmp$; i++) {
      var perspective = this.distance / (this.distance - this.zz[i]);
      var x = this.game.world.centerX + this.xx[i] * perspective;
      var y = this.game.world.centerY + this.yy[i] * perspective;
      this.zz[i] = this.zz[i] + this.speed;
      if (this.zz[i] > 300) {
        this.zz[i] = this.zz[i] - 600.0;
      }
      this.texture.renderXY(this.star, x, y);
    }
  };
  Starfield.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Starfield',
    baseClasses: []
  };
  function UnlimitedBobs() {
    Phaser.State.call(this);
    this.i = 0;
  }
  UnlimitedBobs.prototype.preload = function () {
    this.game.load.image('bob', 'assets/demoscene/ball-tlb.png');
    this.game.load.image('floor', 'assets/demoscene/checker-floor.png');
  };
  UnlimitedBobs.prototype.create = function () {
    this.game.stage.backgroundColor = '#000042';
    this.floor = this.game.add.image(0, this.game.height, 'floor');
    this.floor.width = 800.0;
    this.floor.anchor.y = 1.0;
    this.bmd = this.game.make.bitmapData(this.game.width, this.game.height);
    this.bmdDest = this.game.make.bitmapData(this.game.width, this.game.height);
    this.bmdDest.addToWorld();
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'paint_rxq7re$'), this);
    this.i = 0;
    this.r = new Phaser.Rectangle(0, 0, this.game.width, this.game.height);
  };
  UnlimitedBobs.prototype.paint_rxq7re$ = function (pointer, x, y) {
    if (pointer.isDown) {
      this.bmd.draw('bob', x, y);
    }
  };
  UnlimitedBobs.prototype.update = function () {
    this.bmd.fill(0, 0, 0, 0.05);
    this.bmdDest.copy(this.bmd, 0, 0);
  };
  UnlimitedBobs.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'UnlimitedBobs',
    baseClasses: []
  };
  function Arc() {
    Phaser.State.call(this);
  }
  Arc.prototype.create = function () {
    var graphics = this.game.add.graphics(this.game.world.centerX, this.game.world.centerY);
    graphics.lineStyle(8, 16767232);
    graphics.arc(0, 0, 135, 0, 1.5707963267948966, false);
    graphics.lineStyle(0);
    graphics.beginFill(16724736);
    graphics.arc(-100, -100, 135, Phaser.Math.degToRad(0), Phaser.Math.degToRad(90), true);
    graphics.endFill();
  };
  Arc.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Arc',
    baseClasses: []
  };
  function ArcadePhysicsGraphicsShape() {
    Phaser.State.call(this);
  }
  ArcadePhysicsGraphicsShape.prototype.create = function () {
    var graphics = this.game.add.graphics(0, 0);
    graphics.beginFill(11118852);
    graphics.lineStyle(4, 16581355, 1);
    graphics.moveTo(0, 0);
    graphics.lineTo(125, 0);
    graphics.lineTo(125, 100);
    graphics.lineTo(62, 50);
    graphics.lineTo(0, 100);
    graphics.lineTo(0, 0);
    graphics.endFill();
    enable_7(this.game.physics.arcade, graphics);
    graphics.body.velocity.x = 100;
    graphics.body.gravity.y = 100;
    graphics.body.bounce.set(1);
    graphics.body.collideWorldBounds = true;
  };
  ArcadePhysicsGraphicsShape.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ArcadePhysicsGraphicsShape',
    baseClasses: []
  };
  function ArcDetails() {
    Phaser.State.call(this);
    this.angle = new ArcDetails$angle$ObjectLiteral();
  }
  function ArcDetails$create$ObjectLiteral() {
    this.max = 360;
  }
  ArcDetails$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  ArcDetails.prototype.create = function () {
    this.game.stage.backgroundColor = 2960685;
    this.graphics1 = this.game.add.graphics(0, 0);
    this.graphics2 = this.game.add.graphics(0, 0);
    var style = TextStyle('24px Arial', void 0, void 0, void 0, void 0, void 0, '#ffffff', 'center');
    this.info = this.game.add.text(32, 32, 'Arc', style);
    this.game.add.text(130, 500, 'Clockwise', style);
    this.game.add.text(530, 500, 'Anticlockwise', style);
    this.add.tween(this.angle).to(new ArcDetails$create$ObjectLiteral(), 6000, 'Linear', true, 0, -1, true);
  };
  ArcDetails.prototype.update = function () {
    this.info.text = 'Arc maxAngle: ' + round(Phaser.Math, this.angle.max);
    this.graphics1.clear();
    this.graphics1.lineStyle(2, 16777215);
    this.graphics1.beginFill(49139);
    this.graphics1.arc(200, 300, 160, this.angle.min, Phaser.Math.degToRad(this.angle.max), false);
    this.graphics1.endFill();
    this.graphics2.clear();
    this.graphics2.lineStyle(2, 16777215);
    this.graphics2.beginFill(10486003);
    this.graphics2.arc(600, 300, 160, this.angle.min, Phaser.Math.degToRad(this.angle.max), true);
    this.graphics2.endFill();
  };
  function ArcDetails$angle$ObjectLiteral() {
    this.min = 0;
    this.max = 0;
  }
  ArcDetails$angle$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  ArcDetails.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ArcDetails',
    baseClasses: []
  };
  function CircleExample() {
    Phaser.State.call(this);
  }
  CircleExample.prototype.create = function () {
    var graphics = this.game.add.graphics(0, 0);
    graphics.beginFill(16711680, 1);
    graphics.drawCircle(300, 300, 100);
  };
  CircleExample.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CircleExample',
    baseClasses: []
  };
  function Ellipse() {
    Phaser.State.call(this);
  }
  Ellipse.prototype.create = function () {
    var graphics = this.game.add.graphics(this.game.world.centerX, this.game.world.centerY);
    graphics.lineStyle(8, 16767232);
    graphics.drawEllipse(100, 100, 200, 60);
  };
  Ellipse.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Ellipse',
    baseClasses: []
  };
  function ExtractMask() {
    Phaser.State.call(this);
  }
  ExtractMask.prototype.preload = function () {
    this.game.load.image('font', 'assets/demoscene/knighthawks.png');
  };
  ExtractMask.prototype.create = function () {
    this.font = this.game.make.bitmapData(320, 150);
    this.mask = this.game.make.bitmapData(320, 150);
    this.mask.fill(50, 50, 50);
    this.font.draw('font');
    this.font.update();
    this.game.add.sprite(0, 0, this.font);
    this.game.add.sprite(0, 150, this.mask);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'getMask'), this);
  };
  ExtractMask.prototype.getMask = function () {
    this.font.extract(this.mask, 237, 0, 140);
  };
  ExtractMask.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ExtractMask',
    baseClasses: []
  };
  function Fullscreen() {
    Phaser.State.call(this);
  }
  Fullscreen.prototype.preload = function () {
    this.game.load.image('dragon', 'assets/pics/cougar_dragonsun.png');
    this.game.load.image('star', 'assets/pics/monika_krawinkel-amberstar_title.png');
    this.game.load.image('nanoha', 'assets/pics/nanoha_taiken_pink.png');
  };
  Fullscreen.prototype.create = function () {
    var i = this.game.add.image(this.game.world.centerX, this.game.world.centerY, 'nanoha');
    i.anchor.set(0.5);
    this.game.stage.backgroundColor = '#4d4d4d';
    this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT;
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'gofull'), this);
  };
  Fullscreen.prototype.gofull = function () {
    if (this.game.scale.isFullScreen) {
      this.game.scale.stopFullScreen();
    }
     else {
      this.game.scale.startFullScreen(false);
    }
  };
  Fullscreen.prototype.update = function () {
  };
  Fullscreen.prototype.render = function () {
    this.game.debug.inputInfo(32, 32);
  };
  Fullscreen.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Fullscreen',
    baseClasses: []
  };
  function FullscreenButtons() {
    Phaser.State.call(this);
  }
  FullscreenButtons.prototype.preload = function () {
    this.game.load.image('dragon', 'assets/pics/cougar_dragonsun.png');
    this.game.load.spritesheet('button', 'assets/buttons/button_sprite_sheet.png', 193, 71);
  };
  FullscreenButtons.prototype.create = function () {
    this.sprite = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'dragon');
    this.sprite.anchor.set(0.5);
    this.game.stage.backgroundColor = '#000';
    this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT;
    this.button = this.game.add.button(this.game.world.centerX - 95, 500, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'actionOnClick'), this, 2, 1, 0);
    this.button.visible = false;
    this.game.scale.onFullScreenChange.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onChangeFullScreen_nwh8sm$'), this);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'gofull'), this);
  };
  FullscreenButtons.prototype.onChangeFullScreen_nwh8sm$ = function (scale) {
    if (scale.isFullScreen) {
      this.onEnterFullScreen();
    }
     else {
      this.onLeaveFullScreen();
    }
  };
  FullscreenButtons.prototype.onEnterFullScreen = function () {
    this.button.visible = true;
  };
  FullscreenButtons.prototype.onLeaveFullScreen = function () {
    this.button.visible = false;
  };
  FullscreenButtons.prototype.gofull = function () {
    this.game.scale.startFullScreen();
  };
  FullscreenButtons.prototype.actionOnClick = function () {
    this.sprite.tint = random(Phaser.Math) * 16777215;
  };
  FullscreenButtons.prototype.update = function () {
  };
  FullscreenButtons.prototype.render = function () {
    if (this.game.scale.isFullScreen) {
      this.game.debug.text('ESC to leave fullscreen', 270, 16);
    }
     else {
      this.game.debug.text('Click / Tap to go fullscreen', 270, 16);
    }
  };
  FullscreenButtons.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FullscreenButtons',
    baseClasses: []
  };
  function GameBackgroundColor() {
    Phaser.State.call(this);
  }
  GameBackgroundColor.prototype.preload = function () {
    this.game.load.image('hotdog', 'assets/sprites/hotdog.png');
  };
  GameBackgroundColor.prototype.create = function () {
    this.game.stage.backgroundColor = '#4488AA';
    this.game.add.image(this.game.world.centerX, this.game.world.centerY, 'hotdog').anchor.set(0.5);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'changeColor'), this);
  };
  GameBackgroundColor.prototype.changeColor = function () {
    var c = Phaser.Color.getRandomColor(50, 255, 255);
    this.game.stage.backgroundColor = c;
  };
  GameBackgroundColor.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GameBackgroundColor',
    baseClasses: []
  };
  function GenerateTextureFromGraphics() {
    Phaser.State.call(this);
  }
  GenerateTextureFromGraphics.prototype.create = function () {
    var graphics = this.game.add.graphics(0, 0);
    graphics.beginFill(16724736);
    graphics.lineStyle(10, 16767232, 1);
    graphics.moveTo(50, 50);
    graphics.lineTo(250, 50);
    graphics.lineTo(100, 100);
    graphics.lineTo(250, 220);
    graphics.lineTo(50, 220);
    graphics.lineTo(50, 50);
    graphics.endFill();
    graphics.lineStyle(10, 16711680, 0.8);
    graphics.beginFill(16740363, 1);
    graphics.moveTo(210, 300);
    graphics.lineTo(450, 320);
    graphics.lineTo(570, 350);
    graphics.quadraticCurveTo(600, 0, 480, 100);
    graphics.lineTo(330, 120);
    graphics.lineTo(410, 200);
    graphics.lineTo(210, 300);
    graphics.endFill();
    graphics.lineStyle(2, 255, 1);
    graphics.drawRect(50, 250, 100, 100);
    graphics.lineStyle(0);
    graphics.beginFill(16776971, 0.5);
    graphics.drawCircle(470, 200, 200);
    graphics.endFill();
    graphics.lineStyle(20, 3407616);
    graphics.moveTo(30, 30);
    graphics.lineTo(600, 300);
    this.sprite = this.game.add.sprite(400, 300, graphics.generateTexture());
    this.sprite.anchor.set(0.5);
    graphics.destroy();
  };
  GenerateTextureFromGraphics.prototype.update = function () {
    this.sprite.rotation = this.sprite.rotation + 0.01;
  };
  GenerateTextureFromGraphics.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GenerateTextureFromGraphics',
    baseClasses: []
  };
  function Gradient() {
    Phaser.State.call(this);
  }
  Gradient.prototype.preload = function () {
  };
  Gradient.prototype.create = function () {
    var tmp$, tmp$_0;
    this.game.stage.backgroundColor = '#0c9fc7';
    var out = mutableListOf([]);
    var bmd = this.game.add.bitmapData(800, 600);
    bmd.addToWorld();
    var y = 0;
    tmp$ = 30 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var c = Phaser.Color.interpolateColor(6740339, 4240717, 30, i);
      bmd.rect(0, y, 800, y + 2, Phaser.Color.getWebRGB(c));
      out.add_za3rmp$(Phaser.Color.getWebRGB(c));
      y += 2;
    }
    tmp$_0 = 60 - 1;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      var c_0 = Phaser.Color.interpolateColor(4240717, 1938987, 60, i_0);
      bmd.rect(0, y, 800, y + 2, Phaser.Color.getWebRGB(c_0));
      out.add_za3rmp$(Phaser.Color.getWebRGB(c_0));
      y += 2;
    }
    console.log(JSON.stringify(out));
  };
  Gradient.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Gradient',
    baseClasses: []
  };
  function Graphics2() {
    Phaser.State.call(this);
  }
  Graphics2.prototype.create = function () {
    var graphics = this.game.add.graphics(300, 200);
    graphics.lineStyle(1, 16711680, 1);
    graphics.moveTo(0, 0);
    graphics.lineTo(100, 0);
    graphics.lineStyle(1, 65280, 1);
    graphics.moveTo(100, 0);
    graphics.lineTo(100, 100);
    graphics.lineStyle(1, 255, 1);
    graphics.moveTo(100, 100);
    graphics.lineTo(0, 100);
    graphics.lineStyle(1, 16711935, 1);
    graphics.moveTo(0, 100);
    graphics.lineTo(0, 0);
  };
  Graphics2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Graphics2',
    baseClasses: []
  };
  function GraphicsChild() {
    Phaser.State.call(this);
  }
  GraphicsChild.prototype.preload = function () {
    this.game.load.image('atari', 'assets/demoscene/atari.png');
  };
  GraphicsChild.prototype.create = function () {
    var graphics = this.game.add.graphics(260, 260);
    graphics.beginFill(162417);
    graphics.lineStyle(4, 196075, 1);
    graphics.moveTo(0, 0);
    graphics.lineTo(250, 0);
    graphics.lineTo(250, 200);
    graphics.lineTo(125, 100);
    graphics.lineTo(0, 200);
    graphics.lineTo(0, 0);
    graphics.endFill();
    var sprite = this.game.make.sprite(32, -48, 'atari');
    graphics.addChild(sprite);
  };
  GraphicsChild.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GraphicsChild',
    baseClasses: []
  };
  function GraphicsExample() {
    Phaser.State.call(this);
  }
  GraphicsExample.prototype.create = function () {
    var graphics = this.game.add.graphics(100, 100);
    graphics.beginFill(16724736);
    graphics.lineStyle(10, 16767232, 1);
    graphics.moveTo(50, 50);
    graphics.lineTo(250, 50);
    graphics.lineTo(100, 100);
    graphics.lineTo(250, 220);
    graphics.lineTo(50, 220);
    graphics.lineTo(50, 50);
    graphics.endFill();
    graphics.lineStyle(10, 16711680, 0.8);
    graphics.beginFill(16740363, 1);
    graphics.moveTo(210, 300);
    graphics.lineTo(450, 320);
    graphics.lineTo(570, 350);
    graphics.quadraticCurveTo(600, 0, 480, 100);
    graphics.lineTo(330, 120);
    graphics.lineTo(410, 200);
    graphics.lineTo(210, 300);
    graphics.endFill();
    graphics.lineStyle(2, 255, 1);
    graphics.drawRect(50, 250, 100, 100);
    graphics.lineStyle(0);
    graphics.beginFill(16776971, 0.5);
    graphics.drawCircle(470, 200, 200);
    graphics.endFill();
    graphics.lineStyle(20, 3407616);
    graphics.moveTo(30, 30);
    graphics.lineTo(600, 300);
  };
  GraphicsExample.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GraphicsExample',
    baseClasses: []
  };
  function GraphicsInputEvents() {
    Phaser.State.call(this);
  }
  GraphicsInputEvents.prototype.create = function () {
    this.graphics = this.game.add.graphics(300, 200);
    this.drawShape_vux9f0$(162417, 196075);
    this.graphics.inputEnabled = true;
    this.graphics.input.useHandCursor = true;
    this.graphics.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDown'), this);
    this.graphics.events.onInputUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onUp'), this);
    this.graphics.events.onInputOver.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onOver'), this);
    this.graphics.events.onInputOut.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onOut'), this);
  };
  GraphicsInputEvents.prototype.drawShape_vux9f0$ = function (fill, style) {
    this.graphics.clear();
    this.graphics.beginFill(fill);
    this.graphics.lineStyle(4, style, 1);
    this.graphics.moveTo(0, 0);
    this.graphics.lineTo(250, 0);
    this.graphics.lineTo(250, 200);
    this.graphics.lineTo(125, 100);
    this.graphics.lineTo(0, 200);
    this.graphics.lineTo(0, 0);
    this.graphics.endFill();
  };
  GraphicsInputEvents.prototype.onOver = function () {
    this.drawShape_vux9f0$(11220482, 15427330);
  };
  GraphicsInputEvents.prototype.onDown = function () {
    this.drawShape_vux9f0$(7436802, 15465730);
  };
  GraphicsInputEvents.prototype.onUp = function () {
    this.drawShape_vux9f0$(162417, 196075);
  };
  GraphicsInputEvents.prototype.onOut = function () {
    this.drawShape_vux9f0$(162417, 196075);
  };
  GraphicsInputEvents.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GraphicsInputEvents',
    baseClasses: []
  };
  function GraphicsPerf() {
    Phaser.State.call(this);
  }
  GraphicsPerf.prototype.create = function () {
    var tmp$;
    var graphics = this.game.add.graphics(0, 0);
    tmp$ = 1000 - 1;
    for (var i = 0; i <= tmp$; i++) {
      graphics.beginFill(4473978);
      graphics.moveTo(i, i);
      graphics.lineTo(i + 1, i + 1);
      graphics.lineTo(i + 2, i + 4);
      graphics.lineTo(i + 3, i + 6);
      graphics.lineTo(i + 4, i + 7);
      graphics.lineTo(i, i);
      graphics.endFill();
    }
  };
  GraphicsPerf.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GraphicsPerf',
    baseClasses: []
  };
  function HsvColorWheel() {
    Phaser.State.call(this);
    this.i = 0;
  }
  HsvColorWheel.prototype.create = function () {
    this.bmd = this.game.add.bitmapData(800, 600);
    this.game.add.sprite(0, 0, this.bmd);
    this.colors = Phaser.Color.HSVColorWheel();
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'paint_rxq7re$'), this);
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'paint2_rxq7re$'), this);
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'paint3_rxq7re$'), this);
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'paint4_rxq7re$'), this);
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'paint5_rxq7re$'), this);
    this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR).onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'remove'), this);
  };
  HsvColorWheel.prototype.remove = function () {
    this.game.input.deleteMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'paint3_rxq7re$'), this);
  };
  HsvColorWheel.prototype.paint_rxq7re$ = function (pointer, x, y) {
    if (pointer.isDown) {
      this.bmd.circle(x, y, 16, this.colors[this.i].rgba);
      this.i = Phaser.Math.wrapValue(this.i, 1, 359);
    }
  };
  HsvColorWheel.prototype.paint2_rxq7re$ = function (pointer, x, y) {
    if (pointer.isDown) {
      this.bmd.circle(x, y + 64, 8, this.colors[this.i].rgba);
    }
  };
  HsvColorWheel.prototype.paint3_rxq7re$ = function (pointer, x, y) {
    if (pointer.isDown) {
      this.bmd.circle(x, y - 64, 8, this.colors[this.i].rgba);
    }
  };
  HsvColorWheel.prototype.paint4_rxq7re$ = function (pointer, x, y) {
    if (pointer.isDown) {
      this.bmd.circle(x - 64, y, 8, this.colors[this.i].rgba);
    }
  };
  HsvColorWheel.prototype.paint5_rxq7re$ = function (pointer, x, y) {
    if (pointer.isDown) {
      this.bmd.circle(x + 64, y, 8, this.colors[this.i].rgba);
    }
  };
  HsvColorWheel.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'HsvColorWheel',
    baseClasses: []
  };
  function PixiRenderTexture() {
    Phaser.State.call(this);
    this.count = 0.0;
  }
  PixiRenderTexture.prototype.preload = function () {
    this.game.load.image('spin1', 'assets/sprites/spinObj_01.png');
    this.game.load.image('spin2', 'assets/sprites/spinObj_02.png');
    this.game.load.image('spin3', 'assets/sprites/spinObj_03.png');
    this.game.load.image('spin4', 'assets/sprites/spinObj_04.png');
    this.game.load.image('spin5', 'assets/sprites/spinObj_05.png');
    this.game.load.image('spin6', 'assets/sprites/spinObj_06.png');
    this.game.load.image('spin7', 'assets/sprites/spinObj_07.png');
    this.game.load.image('spin8', 'assets/sprites/spinObj_08.png');
  };
  PixiRenderTexture.prototype.create = function () {
    var tmp$;
    this.renderTexture = this.game.add.renderTexture(800, 600, 'texture1');
    this.renderTexture2 = this.game.add.renderTexture(800, 600, 'texture2');
    this.currentTexture = this.renderTexture;
    this.outputSprite = this.game.add.sprite(400, 300, this.currentTexture);
    this.outputSprite.anchor.x = 0.5;
    this.outputSprite.anchor.y = 0.5;
    this.stuffContainer = this.game.add.group();
    this.stuffContainer.x = 800 / 2.0;
    this.stuffContainer.y = 600 / 2.0;
    tmp$ = 20 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var item = this.stuffContainer.create(random(Phaser.Math) * 400 - 200, random(Phaser.Math) * 400 - 200, this.game.rnd.pick(this.game.cache.getKeys(Phaser.Cache.IMAGE)));
      item.anchor.setTo(0.5, 0.5);
    }
    this.count = 0.0;
  };
  PixiRenderTexture.prototype.update = function () {
    this.stuffContainer.addAll('rotation', 0.1);
    this.count += 0.01;
    var temp = this.renderTexture;
    this.renderTexture = this.renderTexture2;
    this.renderTexture2 = temp;
    setTexture_0(this.outputSprite, this.renderTexture);
    this.stuffContainer.rotation = this.stuffContainer.rotation - 0.01;
    this.outputSprite.scale.x = 1 + sin(Phaser.Math, this.count) * 0.2;
    this.outputSprite.scale.y = 1 + sin(Phaser.Math, this.count) * 0.2;
    this.renderTexture2.renderXY(this.game.stage, 0, 0, true);
  };
  PixiRenderTexture.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PixiRenderTexture',
    baseClasses: []
  };
  function RenderCrisp() {
    Phaser.State.call(this);
  }
  RenderCrisp.prototype.preload = function () {
    this.game.load.image('boss', 'assets/misc/boss1.png');
    this.game.load.image('melon', 'assets/sprites/melon.png');
    this.game.load.spritesheet('button', 'assets/buttons/button_sprite_sheet.png', 193, 71);
  };
  RenderCrisp.prototype.create = function () {
    this.boss = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'boss');
    this.boss.anchor.setTo(0.5, 0.5);
    this.melon = this.game.add.sprite(500, this.game.world.centerY, 'melon');
    this.melon.anchor.setTo(0.5, 0.5);
    this.boss.smoothed = false;
    this.button = this.game.add.button(32, 32, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'clickedIt'), this, 2, 1, 0);
  };
  RenderCrisp.prototype.clickedIt = function () {
    this.boss.scale.x = this.boss.scale.x + 0.5;
    this.boss.scale.y = this.boss.scale.y + 0.5;
    this.melon.scale.x = this.melon.scale.x + 0.5;
    this.melon.scale.y = this.melon.scale.y + 0.5;
  };
  RenderCrisp.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RenderCrisp',
    baseClasses: []
  };
  function RenderTextureImage() {
    Phaser.State.call(this);
  }
  RenderTextureImage.prototype.preload = function () {
    this.game.load.image('ball', 'assets/sprites/spinObj_01.png');
  };
  RenderTextureImage.prototype.create = function () {
    this.ball = this.game.make.sprite(0, 0, 'ball');
    this.texture = this.game.add.renderTexture(this.game.width, this.game.height);
    this.game.add.sprite(0, 0, this.texture);
  };
  RenderTextureImage.prototype.update = function () {
    if (!this.game.input.activePointer.position.isZero()) {
      this.texture.renderXY(this.ball, this.game.input.activePointer.x, this.game.input.activePointer.y, true);
    }
  };
  RenderTextureImage.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RenderTextureImage',
    baseClasses: []
  };
  function RenderTextureMirror() {
    Phaser.State.call(this);
  }
  RenderTextureMirror.prototype.preload = function () {
    this.game.load.image('ball', 'assets/sprites/pangball.png');
  };
  RenderTextureMirror.prototype.create = function () {
    this.texture = this.game.add.renderTexture(800, 600, 'mousetrail');
    this.ball = this.game.make.sprite(0, 0, 'ball');
    this.ball.anchor.set(0.5);
    this.game.add.sprite(0, 0, this.texture);
  };
  RenderTextureMirror.prototype.update = function () {
    this.texture.renderXY(this.ball, this.game.input.activePointer.x, this.game.input.activePointer.y, true);
    this.texture.renderXY(this.ball, this.game.input.activePointer.x, 600 - this.game.input.activePointer.y, false);
  };
  RenderTextureMirror.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RenderTextureMirror',
    baseClasses: []
  };
  function RenderTextureRotation() {
    Phaser.State.call(this);
  }
  RenderTextureRotation.prototype.preload = function () {
    this.game.load.image('diver', 'assets/sprites/treasure_trap.png');
    this.game.load.image('ball', 'assets/sprites/spinObj_01.png');
  };
  function RenderTextureRotation$create$ObjectLiteral() {
    this.x = 0.2;
    this.y = 0.2;
  }
  RenderTextureRotation$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  RenderTextureRotation.prototype.create = function () {
    this.texture = this.game.add.renderTexture(this.game.width, this.game.height);
    this.game.add.sprite(0, 0, this.texture);
    this.conair = this.game.add.group();
    this.sprite = this.conair.create(256, 256, 'diver');
    this.sprite.anchor.set(0.5);
    this.sprite2 = this.game.make.sprite(200, 200, 'ball');
    this.sprite2.anchor.set(0.5);
    this.game.add.tween(this.sprite.scale).to(new RenderTextureRotation$create$ObjectLiteral(), 2000, 'Sine.easeInOut', true, 500, -1, true);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'drawSprite'), this);
    this.game.add.text(32, 32, 'Click to draw Sprite', TextStyle('24px Arial', void 0, void 0, void 0, void 0, void 0, '#ffffff'));
  };
  RenderTextureRotation.prototype.drawSprite = function () {
    this.texture.render(this.conair);
    this.texture.renderXY(this.sprite2);
  };
  RenderTextureRotation.prototype.update = function () {
    this.sprite.rotation = this.sprite.rotation + 0.01;
    this.sprite2.rotation = this.sprite2.rotation + 0.01;
    this.sprite.x = this.game.input.activePointer.x;
    this.sprite.y = this.game.input.activePointer.y;
  };
  RenderTextureRotation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RenderTextureRotation',
    baseClasses: []
  };
  function RenderTextureTilemap() {
    Phaser.State.call(this);
    this.tx = 0.0;
    this.ty = 0.0;
  }
  RenderTextureTilemap.prototype.preload = function () {
    this.game.load.tilemap('level3', 'assets/tilemaps/maps/cybernoid.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.spritesheet('tiles', 'assets/tilemaps/tiles/cybernoid.png', 16, 16);
    this.game.load.image('phaser', 'assets/sprites/phaser-ship.png');
    this.game.load.image('chunk', 'assets/sprites/chunk.png');
  };
  RenderTextureTilemap.prototype.create = function () {
    this.map = this.game.add.tilemap('level3');
    this.map.setCollisionByExclusion([7, 32, 35, 36, 47]);
    this.game.world.setBounds(0, 0, this.map.widthInPixels, this.map.heightInPixels);
    this.stamp = this.game.add.sprite(0, 0, 'tiles', 3);
    this.texture = this.game.add.renderTexture(this.game.width, this.game.height);
    var rtMap = this.game.add.sprite(0, 0, this.texture);
    rtMap.fixedToCamera = true;
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.emitter = this.game.add.emitter(0, 0, 200);
    this.emitter.makeParticles('chunk');
    this.emitter.minRotation = 0;
    this.emitter.maxRotation = 0;
    this.emitter.gravity = 150;
    this.emitter.bounce.setTo(0.5, 0.5);
    this.sprite = this.game.add.sprite(300, 90, 'phaser');
    this.sprite.anchor.set(0.5);
    this.game.physics.enable(this.sprite);
    this.sprite.body.tilePadding.set(32, 32);
    this.game.camera.follow(this.sprite);
    this.renderMap();
  };
  RenderTextureTilemap.prototype.renderMap = function () {
    var tmp$, tmp$_0;
    var cx = (Phaser.Math.snapToFloor(this.game.camera.x, 16) | 0) / 16 | 0;
    var cy = (Phaser.Math.snapToFloor(this.game.camera.y, 16) | 0) / 16 | 0;
    var tile;
    var w = cx + 50;
    var h = cy + 38;
    var dx = 0;
    var dy = 0;
    var cls = true;
    tmp$ = h - 1;
    for (var y = cy; y <= tmp$; y++) {
      tmp$_0 = w - 1;
      for (var x = cx; x <= tmp$_0; x++) {
        tile = this.map.getTile(x, y);
        if (tile != null) {
          this.stamp.frame = tile.index - 1;
          this.texture.renderXY(this.stamp, dx, dy, cls);
          cls = false;
        }
        dx += 16;
      }
      dx = 0;
      dy += 16;
    }
    this.tx = this.game.camera.x;
    this.ty = this.game.camera.y;
  };
  RenderTextureTilemap.prototype.particleBurst = function () {
    this.emitter.x = this.sprite.x;
    this.emitter.y = this.sprite.y;
    this.emitter.start(true, 2000, null, 1);
  };
  RenderTextureTilemap.prototype.update = function () {
    if (this.game.camera.x !== this.tx || this.game.camera.y !== this.ty) {
      this.renderMap();
    }
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    if (this.cursors.up.isDown) {
      this.sprite.body.velocity.y = -200.0;
      this.particleBurst();
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.velocity.y = 200.0;
      this.particleBurst();
    }
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200.0;
      this.sprite.scale.x = -1.0;
      this.particleBurst();
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200.0;
      this.sprite.scale.x = 1.0;
      this.particleBurst();
    }
  };
  RenderTextureTilemap.prototype.render = function () {
  };
  RenderTextureTilemap.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RenderTextureTilemap',
    baseClasses: []
  };
  function RenderTextureToTilesprite() {
    Phaser.State.call(this);
  }
  RenderTextureToTilesprite.prototype.preload = function () {
    this.game.load.image('ball', 'assets/sprites/spinObj_01.png');
  };
  RenderTextureToTilesprite.prototype.create = function () {
    this.ball = this.game.make.sprite(0, 0, 'ball');
    this.texture = this.game.add.renderTexture(256, 256);
    this.texture.renderXY(this.ball, 0, 0, false);
    this.texture.renderXY(this.ball, 50, 50, false);
    this.texture.renderXY(this.ball, 100, 100, false);
    this.game.cache.addImage('tsTexture', '', this.texture.getImage());
    var ts = this.game.add.tileSprite(0, 0, 800, 600, 'tsTexture');
    ts.textureDebug = true;
  };
  RenderTextureToTilesprite.prototype.update = function () {
  };
  RenderTextureToTilesprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RenderTextureToTilesprite',
    baseClasses: []
  };
  function RenderTextureTrail() {
    Phaser.State.call(this);
  }
  RenderTextureTrail.prototype.preload = function () {
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  RenderTextureTrail.prototype.create = function () {
    this.texture = this.game.add.renderTexture(800, 600, 'mousetrail');
    this.mushroom = this.game.make.sprite(0, 0, 'mushroom');
    this.mushroom.anchor.set(0.5);
    this.game.add.sprite(0, 0, this.texture);
  };
  RenderTextureTrail.prototype.update = function () {
    if (!this.game.input.activePointer.position.isZero()) {
      this.texture.renderXY(this.mushroom, this.game.input.activePointer.x, this.game.input.activePointer.y);
    }
  };
  RenderTextureTrail.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RenderTextureTrail',
    baseClasses: []
  };
  function RoundPixels() {
    Phaser.State.call(this);
  }
  RoundPixels.prototype.preload = function () {
    this.game.load.image('boss', 'assets/misc/boss1.png');
    this.game.load.image('melon', 'assets/sprites/melon.png');
    this.game.load.spritesheet('button', 'assets/buttons/button_sprite_sheet.png', 193, 71);
  };
  RoundPixels.prototype.create = function () {
    this.game.renderer.renderSession.roundPixels = true;
    this.boss = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'boss');
    this.boss.anchor.setTo(0.5, 0.5);
    this.boss.texture.baseTexture.scaleMode = PIXI.scaleModes.NEAREST;
    this.button = this.game.add.button(32, 32, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'clickedIt'), this, 2, 1, 0);
  };
  RoundPixels.prototype.clickedIt = function () {
    this.boss.scale.x = this.boss.scale.x + 0.5;
    this.boss.scale.y = this.boss.scale.y + 0.5;
  };
  RoundPixels.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RoundPixels',
    baseClasses: []
  };
  function SpriteShadow() {
    Phaser.State.call(this);
    this.offset = new Phaser.Point(10.0, 8.0);
  }
  SpriteShadow.prototype.preload = function () {
    this.game.load.image('hotdog', 'assets/sprites/hotdog.png');
  };
  SpriteShadow.prototype.create = function () {
    this.game.stage.backgroundColor = '#0c9fc7';
    this.shadow = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'hotdog');
    this.shadow.anchor.set(0.5);
    this.shadow.tint = 0;
    this.shadow.alpha = 0.6;
    this.sprite = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'hotdog');
    this.sprite.anchor.set(0.5);
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'move_rxq7re$'), this);
  };
  SpriteShadow.prototype.move_rxq7re$ = function (pointer, x, y) {
    this.sprite.x = x;
    this.sprite.y = y;
    this.shadow.x = this.sprite.x + this.offset.x;
    this.shadow.y = this.sprite.y + this.offset.y;
  };
  SpriteShadow.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpriteShadow',
    baseClasses: []
  };
  function SpritesheetFromGraphics() {
    Phaser.State.call(this);
  }
  SpritesheetFromGraphics.prototype.create = function () {
    var tmp$;
    var digitsData = ['0000    1 2222 3333', '0  0    1    2    3', '0  0    1 2222 3333', '0  0    1 2       3', '0000    1 2222 3333', '                   ', '4  4 5555 6666 7777', '4  4 5    6       7', '4444 5555 6666    7', '   4    5 6  6    7', '   4 5555 6666    7', '                   ', '8888 9999          ', '8  8 9  9          ', '8888 9999          ', '8  8    9          ', '8888 9999          '];
    var pixelSize = {v: 8};
    var x = {v: 0};
    var y = {v: 0};
    var g = {v: this.game.add.graphics(0, 0)};
    g.v.beginFill(65280);
    var tmp$_0;
    for (tmp$_0 = 0; tmp$_0 !== digitsData.length; ++tmp$_0) {
      var element = digitsData[tmp$_0];
      var tmp$_1;
      tmp$_1 = element.length - 1;
      for (var i_0 = 0; i_0 <= tmp$_1; i_0++) {
        if (element.charAt(i_0) !== ' ') {
          g.v.drawRect(x.v, y.v, pixelSize.v, pixelSize.v);
        }
        x.v += pixelSize.v;
      }
      x.v = 0;
      y.v += pixelSize.v;
    }
    g.v.endFill();
    var texture = g.v.generateTexture();
    g.v.alpha = 0.5;
    var frameWidth = pixelSize.v * 4;
    var frameHeight = pixelSize.v * 5;
    var frameMax = 10;
    var margin = 0;
    var spacing = pixelSize.v;
    this.game.cache.addSpriteSheet('digits', null, texture.baseTexture.source, frameWidth, frameHeight, frameMax, margin, spacing);
    this.sprites = this.game.add.physicsGroup(Phaser.Physics.ARCADE);
    tmp$ = 30 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var s = this.sprites.create(this.game.world.randomX, this.game.world.randomY, 'digits', this.game.rnd.between(0, 10));
      s.animations.add('spin', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
      s.play('spin', this.game.rnd.between(2, 6), true);
      s.body.velocity.set(this.game.rnd.between(-200, 200), this.game.rnd.between(-200, 200));
      s.body.collideWorldBounds = true;
      s.body.bounce.set(1);
    }
  };
  SpritesheetFromGraphics.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprites);
  };
  SpritesheetFromGraphics.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpritesheetFromGraphics',
    baseClasses: []
  };
  function TintSprite() {
    Phaser.State.call(this);
  }
  TintSprite.prototype.preload = function () {
    this.game.load.image('pic', 'assets/pics/barbarian_loading.png');
  };
  TintSprite.prototype.create = function () {
    this.pic = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'pic');
    this.pic.anchor.set(0.5);
    this.game.time.events.loop(Phaser.Timer.SECOND * 2, Kotlin.getBoundCallableRefForMemberFunction(this, 'changeTint'), this);
  };
  TintSprite.prototype.changeTint = function () {
    this.pic.tint = random(Phaser.Math) * 16777215;
  };
  TintSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TintSprite',
    baseClasses: []
  };
  function TintSpriteFrame() {
    Phaser.State.call(this);
  }
  TintSpriteFrame.prototype.preload = function () {
    this.game.load.atlas('seacreatures', 'assets/sprites/seacreatures_json.png', 'assets/sprites/seacreatures_json.json');
    this.game.load.image('undersea', 'assets/pics/undersea.jpg');
    this.game.load.image('coral', 'assets/pics/seabed.png');
  };
  function TintSpriteFrame$create$ObjectLiteral() {
    this.y = 250;
  }
  TintSpriteFrame$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TintSpriteFrame.prototype.create = function () {
    this.game.add.image(0, 0, 'undersea');
    this.greenJellyfish = this.game.add.sprite(330, 100, 'seacreatures');
    this.greenJellyfish.animations.add('swim', Phaser.Animation.generateFrameNames('greenJellyfish', 0, 39, '', 4), 30, true);
    this.greenJellyfish.animations.play('swim');
    this.stingray = this.game.add.sprite(80, 190, 'seacreatures');
    this.stingray.animations.add('swim', Phaser.Animation.generateFrameNames('stingray', 0, 23, '', 4), 30, true);
    this.stingray.animations.play('swim');
    this.game.add.image(0, 466, 'coral');
    this.game.add.tween(this.greenJellyfish).to(new TintSpriteFrame$create$ObjectLiteral(), 4000, 'Quad.easeInOut', true, 0, 1000, true);
    this.game.time.events.loop(Phaser.Timer.SECOND * 2, Kotlin.getBoundCallableRefForMemberFunction(this, 'changeTint'), this);
  };
  TintSpriteFrame.prototype.changeTint = function () {
    this.greenJellyfish.tint = random(Phaser.Math) * 16777215;
    this.stingray.tint = random(Phaser.Math) * 16777215;
  };
  TintSpriteFrame.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TintSpriteFrame',
    baseClasses: []
  };
  function Viewport() {
    Phaser.State.call(this);
  }
  Viewport.prototype.create = function () {
    this.game.stage.backgroundColor = '#440e62';
  };
  Viewport.prototype.update = function () {
  };
  Viewport.prototype.render = function () {
    var x = 32;
    var y = 0;
    var yi = 32;
    y += yi;
    this.game.debug.text('Viewport', x, y);
    y += yi;
    this.game.debug.text('window.innerWidth: ' + window.innerWidth, x, y);
    y += yi;
    this.game.debug.text('window.outerWidth: ' + window.outerWidth, x, y);
    y += yi;
    this.game.debug.text('window.innerHeight: ' + window.innerHeight, x, y);
    y += yi;
    this.game.debug.text('window.outerHeight: ' + window.outerHeight, x, y);
    y += yi * 2;
    this.game.debug.text('Document', x, y);
    x = 350;
    y = 0;
    y += yi;
    this.game.debug.text('Device', x, y);
    y += yi;
    this.game.debug.text('window.screen.width: ' + window.screen.width, x, y);
    y += yi;
    this.game.debug.text('window.screen.availWidth: ' + window.screen.availWidth, x, y);
    y += yi;
    this.game.debug.text('window.screen.height: ' + window.screen.height, x, y);
    y += yi;
    this.game.debug.text('window.screen.availHeight: ' + window.screen.availHeight, x, y);
  };
  Viewport.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Viewport',
    baseClasses: []
  };
  function Bacteria() {
    Phaser.State.call(this);
  }
  Bacteria.prototype.preload = function () {
    this.game.load.shader('bacteria', 'assets/shaders/bacteria.frag');
  };
  Bacteria.prototype.create = function () {
    this.filter = new Phaser.Filter(this.game, null, this.game.cache.getShader('bacteria'));
    this.filter.addToWorld(0, 0, 800, 600);
  };
  Bacteria.prototype.update = function () {
    this.filter.update();
  };
  Bacteria.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Bacteria',
    baseClasses: []
  };
  function Basic() {
    Phaser.State.call(this);
  }
  Basic.prototype.preload = function () {
    this.game.load.image('metal', 'assets/textures/metal.png');
  };
  Basic.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'varying vec2 vTextureCoord;', 'uniform sampler2D uSampler;', 'void main(void) {', 'vec4 texColor = texture2D(uSampler, vTextureCoord);', 'if (vTextureCoord.x < 0.1) {', 'texColor = vec4(1.0, 0.0, 1.0, 1.0);', '}', 'gl_FragColor = texColor;', '}'];
    this.sprite = this.game.add.sprite(0, 0, 'metal');
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.sprite.filters = [this.filter];
  };
  Basic.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Basic',
    baseClasses: []
  };
  function BlueDots() {
    Phaser.State.call(this);
  }
  BlueDots.prototype.preload = function () {
    this.game.load.shader('blueDots', 'assets/shaders/blue-dots.frag');
  };
  BlueDots.prototype.create = function () {
    this.filter = new Phaser.Filter(this.game, null, this.game.cache.getShader('blueDots'));
    this.filter.setResolution(400, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 400.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  BlueDots.prototype.update = function () {
    this.filter.update();
  };
  BlueDots.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BlueDots',
    baseClasses: []
  };
  function Blur() {
    Phaser.State.call(this);
  }
  Blur.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser2.png');
    this.game.load.script('filterX', 'https://cdn.rawgit.com/photonstorm/phaser/master/filters/BlurX.js');
    this.game.load.script('filterY', 'https://cdn.rawgit.com/photonstorm/phaser/master/filters/BlurY.js');
  };
  Blur.prototype.create = function () {
    var logo = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'phaser');
    logo.anchor.setTo(0.5, 0.5);
    var blurX = this.game.add.filter('BlurX');
    var blurY = this.game.add.filter('BlurY');
    blurX.blur = 100;
    blurY.blur = 1;
    logo.filters = [blurX, blurY];
  };
  Blur.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Blur',
    baseClasses: []
  };
  function CheckerWave() {
    Phaser.State.call(this);
  }
  CheckerWave.prototype.preload = function () {
    this.game.load.image('s', 'assets/pics/undersea.jpg');
    this.game.load.image('phaser', 'assets/sprites/phaser.png');
    this.game.load.script('filter', 'https://cdn.rawgit.com/photonstorm/phaser/master/filters/CheckerWave.js');
  };
  CheckerWave.prototype.create = function () {
    this.game.add.sprite(0, 0, 's');
    this.background = this.game.add.sprite(0, 0);
    this.background.width = 800.0;
    this.background.height = 600.0;
    this.filter = this.game.add.filter('CheckerWave', 800, 600);
    this.filter.alpha = 0.2;
    this.background.filters = [this.filter];
    var logo = this.game.add.sprite(this.game.world.centerX, 100, 'phaser');
    logo.anchor.setTo(0.5, 0.5);
  };
  CheckerWave.prototype.update = function () {
    this.filter.update();
  };
  CheckerWave.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CheckerWave',
    baseClasses: []
  };
  function Dalek() {
    Phaser.State.call(this);
  }
  Dalek.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform vec2      mouse;', '#define pi 3.1415927', '//various primitives, thanks IQ! http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm', 'float Sphere( vec3 p, vec3 c, float r )', '{', 'return length(p-c) - r;', '}', 'float Box( vec3 p, vec3 b )', '{', 'vec3 d = abs(p) - b;', 'return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));', '}', 'float BevelBox(vec3 p, vec3 size, float box_r)', '{', 'vec3 box_edge = size - box_r*0.5;', 'vec3 dd = abs(p) - box_edge;', '//in (dd -ve)', 'float maxdd = max(max(dd.x,dd.y),dd.z);', '//0 away result if outside', 'maxdd = min(maxdd,0.0);', '//out (+ve);', 'dd = max(dd,0.0);', 'float ddd = (length(dd)-box_r);', '//combine the in & out cases', 'ddd += maxdd;', 'return ddd;', '}', 'float CylinderXY( vec3 p, vec3 c ) {', 'return length(p.xy-c.xy)-c.z;', '}', 'float CylinderXZ( vec3 p, vec3 c ) {', 'return length(p.xz-c.xy)-c.z;', '}', 'float CylinderYZ( vec3 p, vec3 c ) {', 'return length(p.yz-c.xy)-c.z;', '}', 'float udHexPrism( vec2 p, float h ) {', 'vec2 q = abs(p);', 'return max(q.x+q.y*0.57735,q.y*1.1547)-h;', '}', 'vec3 RotX(vec3 p, float t) {', 'float c = cos(t); float s = sin(t);', 'return vec3(p.x,', 'p.y*c+p.z*s,', '-p.y*s+p.z*c);', '}', 'vec3 RotY(vec3 p, float t) {', 'float c = cos(t); float s = sin(t);', 'return vec3(p.x*c+p.z*s,', 'p.y,', '-p.x*s+p.z*c);', '}', 'vec3 RotZ(vec3 p, float t) {', 'float c = cos(t); float s = sin(t);', 'return vec3(p.x*c+p.y*s,', '-p.x*s+p.y*c,', 'p.z);', '}', '//initiate time corridor... (aka begin original work)', 'float Plate(vec3 p, float h)', '{', 'p = RotX(p,-pi*0.0625);', 'float hh = 0.25;', 'float w = 0.5 * hh;', 'float bev = 0.02;', 'float base = BevelBox(p-vec3(0.0,0.0,0),vec3(w,h,w), bev);', 'float scallop = BevelBox(RotX(p,-pi*0.0625)-vec3(0.,-.6*h,0.6*hh),vec3(w,2.*h,w)*0.5, bev);', 'base = max(base,-scallop);', 'float hole_size = 0.03;', 'float hole_off = h * 0.8;', 'vec3 reflect_y_p = vec3(p.x,abs(p.y),p.z);', '// float hole = CylinderXY( reflect_y_p, vec3(0.,hole_off,hole_size));', '// base = max(base,-hole);', 'float rivet = Sphere( reflect_y_p, vec3(0.,hole_off,w), hole_size );', 'base = min(base,rivet);', 'return base;', '}', 'float PlateRing(vec3 p, float polar_t, float polar_r)', '{', 'float h = abs(polar_t) < pi*(3.0/8.) ? 0.25 : 0.5;', 'polar_t = mod(polar_t,pi*(1./8.)) - pi*(1./8.)*0.5;', 'vec3 q = vec3(polar_r * sin(polar_t), p.y, polar_r*cos(polar_t));', 'q -= vec3(0.,-(h-0.25),1.0);', 'return Plate(q,h);', '}', 'float Whisk(vec3 p)', '{', 'p = abs(p);', 'float r = 0.075;', 'float c = min(0.4-p.x,0.1) * r * 12.0;', 'return length(p.zy - vec2(c,c)) - r*0.25;', '}', 'float Gun( vec3 p )', '{', 'p -= vec3(1.7,-.55,-0.70);', 'float d = Whisk(p);', 'd = min( d, Whisk(RotX(p,pi*0.25)) );', 'float barrel = length(p.zy)-0.05;', 'barrel = max( barrel, abs(p.x)-0.5); //clip', 'barrel = max( barrel, -(length(p.zy)-0.025));', 'return min(d,barrel);', '}', 'const float suck_end = 1.0;', 'float Plunger(vec3 p )', '{', 'p -= vec3(1.7,-.55,0.70);', 'float barrel = length(p.zy)-0.075;', 'barrel = max( barrel, abs(p.x)-0.75);  //clip!', 'float sucker = Sphere(p, vec3(suck_end,0.0,0.0), 0.3);', 'sucker = max(sucker, -Sphere(p, vec3(suck_end,0.0,0.0), 0.25));', 'sucker = max(sucker, p.x-0.9); //clip', 'return min(barrel,sucker);', '}', 'float GunPort(vec3 p)', '{', 'p.z = abs(p.z);', 'float w = 0.225;', 'float d = 0.5;', 'vec3 c = vec3(.75-0.25,-.55,0.70);', 'float s = Sphere(p, c+vec3(.35+0.25,0,0), w * 0.66);', 'p.x += 0.2 * p.y;', 'float bev = 0.02;', 'float b = BevelBox(p-c,vec3(d,w,w), bev);', 'return min(b,s);', '}', 'float DarkBits(vec3 p)', '{', '//core body', 'float b = CylinderXZ(p, vec3(0.,0.,0.8-0.15*p.y));', 'b = max(b,abs(p.y)-1.2); //clip!', '//sucker', 'vec3 sucker_p = p - vec3(1.7,-.55,0.70);', 'float sucker = Sphere(sucker_p, vec3(suck_end,0.0,0.0), 0.3);', '//bulb', 'vec3 stalk_p = RotZ(p,pi*0.05);', 'float bulb_d = Sphere(stalk_p,vec3(2.4,1.1,0.0),0.2);', 'bulb_d = max(bulb_d,stalk_p.x-2.5); //clip', '//gun ports', 'p.z = abs(p.z);', 'float w = 0.225;', 'float d = 0.5;', 'vec3 c = vec3(.75-0.25,-.55,0.70);', 'float s = Sphere(p, c+vec3(.35+0.25,0,0), w * 0.66);', 'return min(min(bulb_d,s),min(b,sucker));', '}', 'float Balls(vec3 p, float polar_t, float polar_r)', '{', 'p.y += 2.45;', 'float ang_reps = 6.;', 'polar_t = mod(polar_t,pi*(1./ang_reps)) - pi*(1./ang_reps)*0.5;', 'vec3 q = vec3(polar_r * sin(polar_t), p.y, polar_r*cos(polar_t));', 'float k = .5;', 'q.y = mod( q.y, k ) - 0.5 * k;', 'float balls = Sphere(q,vec3(0.0,0,1.25 - 0.1*floor(p.y*2.)),0.2);', 'balls = max(balls,abs(p.y)-1.); //clip!', 'return balls;', '}', 'float Body(vec3 p) {', 'vec3 q = p;', 'p=RotY(p,pi*1.0/12.0);', 'float taper = 1.0+0.1*p.y;', 'taper -= p.y < -3.5 ? .2 * clamp(-(p.y+3.5),0.,0.1) : 0.;', 'p.xz *= taper;', 'float w = 1.15; ///taper;', 'float d = udHexPrism(p.zx,w);', 'd = max(d, udHexPrism(p.xz,w));', 'd /= taper;', 'q.y += +2.45;', 'd = max(d,abs(q.y)-1.5); //clip!', 'return d;', '}', 'float Belt(vec3 p, float polar_t, float polar_r) {', '//belt', 'float r = p.y + 1.05;', 'float d = CylinderXZ(p, vec3(0.,0.,1.25-0.15*r) );', 'vec3 q = p;', 'q.y += 1.05;', 'd = max(d,abs(q.y)-0.125); //clip!', '//core body', 'float b = CylinderXZ(p, vec3(0.,0.,0.8-0.15*p.y));', 'b = max(b,abs(p.y)-1.2); //clip!', '//buckle', 'd = min(d, BevelBox(p+vec3(-0.8,0.60,0.),vec3(.2,.2,.4+0.2*p.y),0.05) );', 'd = min(d,b);', 'return d;', '}', 'float Grill(vec3 p, float polar_t, float polar_r)', '{', 'p += vec3(0.,-0.5,0.);', 'vec3 c = p;', 'float k = .25;', 'c.y = mod( c.y + 0.1, k ) - 0.5 * k;', 'float b = CylinderXZ(c,vec3(0.,0.,0.9));', 'b = max(b,abs(c.y)-0.025); //clip each ring', 'b = max(b,abs(p.y)-0.5); //clip the repetitions', 'float ang_reps = 4.;', 'polar_t = mod(polar_t,pi*(1./ang_reps)) - pi*(1./ang_reps)*0.5;', 'vec3 q = vec3(polar_r * cos(polar_t), p.y, polar_r*sin(polar_t));', 'q = RotZ(q,pi*0.06);', 'float d = BevelBox(q,vec3(0.8,0.5,.05),.045);', 'return min(d,b);', '}', 'float Head(vec3 p)', '{', 'float d = Sphere(p,vec3(0.,0.66,0.),1.0);', 'd = max(d,-p.y+1.0); //clip!', 'return d;', '}', 'float Eye(vec3 p)', '{', '//stalk', 'p = RotZ(p,pi*0.05);', 'float d = CylinderYZ(p,vec3(1.1,0.,0.1));', 'd = max(d,-p.x); //clip', '//bulb', 'd = min(d, Sphere(p,vec3(2.4,1.1,0.0),0.2) );', 'd = max(d,p.x-2.5); //clip', '//lens', 'd = min(d, Sphere(p,vec3(2.4,1.1,0.0),0.15) );', '//mount', 'd = min(d, BevelBox(p+vec3(-0.9,-1.1,0.),vec3(.2,.2,.4-0.2*p.y),0.05) );', 'return d;', '}', 'float Lens(vec3 p)', '{', 'p = RotZ(p,pi*0.05);', 'return Sphere(p,vec3(2.4,1.1,0.0),0.15);', '}', 'float Ears(vec3 p)', '{', 'p.z = abs(p.z);', 'p = RotX(p, -pi * 0.25);', 'float d = CylinderXY(p,vec3(0.0,.5,0.2-0.1*(p.z-0.5)));', 'd = max(d,p.z-1.75); //clip', 'return d;', '}', 'float floor_height = -4.0;', 'float sdf( vec3 p )', '{', 'float polar_t = atan(p.z,p.x);', 'float polar_r = length(p.xz);', 'float d = 1e10;', 'float d_bound = 2.5;', 'if (polar_r < d_bound) //optimize away this stuff if far away from bound cylinder', '{', '// if (p.y < -1.0) //opt?', 'd = min(d, Balls(p, polar_t, polar_r));', 'd = min(d, Belt(p, polar_t, polar_r));', 'd = min(d, PlateRing(p, polar_t, polar_r));', '// if (p.y > 0.25) //opt?', '{', 'd = min(d, Grill(p, polar_t, polar_r));', 'd = min(d, Head(p));', 'd = min(d, Ears(p));', '}', '}', '// if (p.y < -1.0) //opt ?', 'd = min(d, Body(p));', '// else            //opt ? glitches shadows though', 'if (abs(polar_t) < pi * 0.5) //optimize away this stuff if far away from front', '{', 'd = min(d, Eye(p));', 'd = min(d,GunPort(p));', 'd = min(d, Gun(p));', 'd = min(d, Plunger(p));', '}', '//floor!', 'd = min(d,p.y-floor_height);', 'return d;', '}', 'vec3 nor(vec3 X)', '{', 'vec2 e = vec2(0.01,0.0); //fatter filter looks like bevelled edges on hard CSG shapes', '#if 0', '//guh glitchy on silhouettes!', 'float d = sdf(X);', 'vec3 N = vec3(sdf(X-e.xyy),sdf(X-e.yxy),sdf(X-e.yyx) - vec3(d,d,d) );', '#else', 'vec3 N = vec3(sdf(X-e.xyy),sdf(X-e.yxy),sdf(X-e.yyx)) -', 'vec3(sdf(X+e.xyy),sdf(X+e.yxy),sdf(X+e.yyx));', '#endif', 'return -normalize(N);', '}', 'float Ao(vec3 p, vec3 n, float d) {', 'float vis = 0.0;', 'for (int i=0; i<6; i++)', '{', 'float d = sdf(p);', '//this made more sense to me as volume of sphere that is clear of stuff blocking light ??', 'vis += d*d*d * (4.*pi/3.);', 'p += n * d;', '}', 'return pow(clamp(vis,0.,1.),0.2);', '}', '//thanks BRDF guys!', '//http://hal.inria.fr/docs/00/70/23/04/PDF/paper.pdf', 'float gamma = //1.8;', '2.2;', '//2.0;', 'float one_pi = 0.31830988618;', 'float lightIntensity = 8.0;', '// gold-paint', '#if 1', 'vec3 rho_d = vec3(0.147708, 0.0806975, 0.033172);', 'vec3 rho_s = vec3(0.160592, 0.217282, 0.236425);', 'vec3 alpha = vec3(0.122506, 0.108069, 0.12187);', 'vec3 p = vec3(0.795078, 0.637578, 0.936117);', 'vec3 F_0 = vec3(9.16095e-12, 1.81225e-12, 0.0024589);', 'vec3 F_1 = vec3(-0.596835, -0.331147, -0.140729);', 'vec3 K_ap = vec3(5.98176, 7.35539, 5.29722);', 'vec3 sh_lambda = vec3(2.64832, 3.04253, 2.3013);', 'vec3 sh_c = vec3(9.3111e-08, 8.80143e-08, 9.65288e-08);', 'vec3 sh_k = vec3(24.3593, 24.4037, 25.3623);', 'vec3 sh_theta0 = vec3(-0.284195, -0.277297, -0.245352);', '#endif', 'float envAmount = 1.0;', 'void dark_specular_fabric()', '{', '// dark-specular-fabric', 'rho_d = vec3(0.0197229, 0.00949167, 0.00798414);', 'rho_s = vec3(0.556218, 0.401495, 0.378651);', 'alpha = vec3(0.140344, 0.106541, 0.166715);', 'p = vec3(0.249059, 0.177611, 0.434167);', 'F_0 = vec3(0.0351133, 0.0387177, 0.0370533);', 'F_1 = vec3(0.0243153, 0.0293178, 0.0264913);', 'K_ap = vec3(7.60492, 9.81673, 6.19307);', 'sh_lambda = vec3(3.93869, 4.23097, 4.3775);', 'sh_c = vec3(0.00122421, 0.00238545, 8.47126e-06);', 'sh_k = vec3(13.889, 14.5743, 17.2049);', 'sh_theta0 = vec3(0.114655, 0.210179, -0.227628);', 'envAmount = 0.;', '}', 'void gold_paint()', '{', 'rho_d = vec3(0.147708, 0.0806975, 0.033172);', 'rho_s = vec3(0.160592, 0.217282, 0.236425);', 'alpha = vec3(0.122506, 0.108069, 0.12187);', 'p = vec3(0.795078, 0.637578, 0.936117);', 'F_0 = vec3(9.16095e-12, 1.81225e-12, 0.0024589);', 'F_1 = vec3(-0.596835, -0.331147, -0.140729);', 'K_ap = vec3(5.98176, 7.35539, 5.29722);', 'sh_lambda = vec3(2.64832, 3.04253, 2.3013);', 'sh_c = vec3(9.3111e-08, 8.80143e-08, 9.65288e-08);', 'sh_k = vec3(24.3593, 24.4037, 25.3623);', 'sh_theta0 = vec3(-0.284195, -0.277297, -0.245352);', '}', 'void two_layer_silver()', '{', 'rho_d = vec3(0.0657916, 0.0595705, 0.0581288);', 'rho_s = vec3(1.55275, 2.00145, 1.93045);', 'alpha = vec3(0.0149977, 0.0201665, 0.0225062);', 'p = vec3(0.382631, 0.35975, 0.361657);', 'F_0 = vec3(4.93242e-13, 1.00098e-14, 0.0103259);', 'F_1 = vec3(-0.0401315, -0.0395054, -0.0312454);', 'K_ap = vec3(50.1263, 38.8508, 34.9978);', 'sh_lambda = vec3(3.41873, 3.77545, 3.78138);', 'sh_c = vec3(6.09709e-08, 1.02036e-07, 1.01016e-07);', 'sh_k = vec3(46.6236, 40.8229, 39.1812);', 'sh_theta0 = vec3(0.183797, 0.139103, 0.117092);', '}', 'void specular_violet_phenolic()', '{', 'rho_d = vec3(0.0686035, 0.0181856, 0.0210368);', 'rho_s = vec3(0.108459, 0.0471612, 0.171691);', 'alpha = vec3(0.00123271, 0.000443974, 0.00149517);', 'p = vec3(0.657484, 0.546753, 0.653065);', 'F_0 = vec3(0.0403569, 0.121081, 0.035323);', 'F_1 = vec3(-0.0295013, 0.0563904, -0.0275623);', 'K_ap = vec3(351.208, 1193.45, 294.897);', 'sh_lambda = vec3(3.17585e-05, 1.3817, 2.44051e-05);', 'sh_c = vec3(3.02028e-07, 6.19706e-08, 3.40809e-07);', 'sh_k = vec3(31.3319, 234.879, 28.7237);', 'sh_theta0 = vec3(-0.168991, 0.500354, -0.252626);', '}', 'void orange_paint()', '{', 'rho_d = vec3(0.368088, 0.147113, 0.00692426);', 'rho_s = vec3(0.524979, 0.116386, 0.199437);', 'alpha = vec3(0.818115, 0.064743, 0.229391);', 'p = vec3(1.44385, 0.0709512, 0.483597);', 'F_0 = vec3(6.92565e-13, 0.106161, 0.102279);', 'F_1 = vec3(-0.174318, 0.0934385, 0.0625648);', 'K_ap = vec3(4.57466, 16.0185, 4.96427);', 'sh_lambda = vec3(1.84547, 4.70387, 3.6232);', 'sh_c = vec3(0.072629, 0.0299825, 0.000333551);', 'sh_k = vec3(5.96872, 14.9466, 13.2194);', 'sh_theta0 = vec3(0.222125, 0.438216, -0.0759733);', '}', 'vec3 Fresnel(vec3 F0, vec3 F1, float V_H)', '{', 'return F0 - V_H * F1  + (1. - F0)*pow(1. - V_H, 5.);', '}', 'vec3 D(vec3 _alpha, vec3 _p, float cos_h, vec3 _K)', '{', 'float cos2 = cos_h*cos_h;', 'float tan2 = (1.-cos2)/cos2;', 'vec3 ax = _alpha + tan2/_alpha;', 'ax = max(ax,0.); //bug?', 'return one_pi * _K * exp(-ax)/(pow(ax,_p) * cos2 * cos2);', '// return vec3( 0.0 / (cos2 * cos2));', '}', 'vec3 G1(float theta)', '{', 'theta = clamp(theta,-1.,1.); //bug?', 'return 1.0 + sh_lambda * (1. - exp(sh_c * pow(max(acos(theta) - sh_theta0,0.), sh_k)));', '}', 'vec3 shade(float inLight, float n_h, float n_l, float n_v, float v_h)', '{', 'return  one_pi * inLight * ( n_l * rho_d', '+ rho_s * D(alpha, p, n_h, K_ap) * G1(n_l) * G1 (n_v) * Fresnel(F_0, F_1, v_h));', '}', 'vec3 brdf(vec3 lv, vec3 ev, vec3 n)', '{', 'vec3 halfVector = normalize(lv + ev);', 'float v_h = dot(ev, halfVector);', 'float n_h = dot(n, halfVector);', 'float n_l = dot(n, lv);', 'float inLight = 1.0;', 'if (n_l < 0.) inLight = 0.0;', 'float n_v = dot(n, ev);', 'vec3 sh = shade(inLight, n_h, n_l, n_v, v_h);', 'sh = clamp( sh, 0., 1.); //bug?', 'vec3 retColor = lightIntensity * sh;', 'return retColor;', '}', 'void ChooseMat(vec3 p)', '{', 'if (p.y < -3.5 || (DarkBits(p)) < 0.01)', '{', '// black_soft_plastic();', '// blue_acrylic();', 'dark_specular_fabric();', '}', '#if 1', 'float polar_t = atan(p.z,p.x);', 'float polar_r = length(p.xz);', 'if ( abs(Balls(p, polar_t, polar_r)) < 0.01)', '{', '//     gold_paint();', 'two_layer_silver();', '}', '#endif', 'if (Lens(p)<0.01)', '{', 'specular_violet_phenolic();', '}', 'if (Ears(p)<0.01)', '{', 'orange_paint();', 'lightIntensity+=max(sin(time*10.0),0.)*10.0;', '}', '}', 'void MakeViewRay(out vec3 viewP, out vec3 viewD)', '{', 'vec2 xy = gl_FragCoord.xy;', 'xy.y=resolution.y-gl_FragCoord.y;', 'vec2 filmUv = (xy + vec2(0.5,0.5))/resolution.xy;', 'float tx = (2.0*filmUv.x - 1.0)*(resolution.x/resolution.y);', 'float ty = (1.0 - 2.0*filmUv.y);', 'float tz = 0.0;', 'viewP = vec3(0.0, 0.0, 5.0);', 'viewD = vec3(tx, ty, tz) - viewP;', 'viewD = normalize(viewD);', 'float t = pi*0.5 + sin(time);', 'viewD=RotX(viewD,pi*0.1);', 'viewP.y += 4.0;', 'viewP.z += 12.0; // - sin(iGlobalTime)*8.0;', 'viewP = RotY(viewP,t);', 'viewD = RotY(viewD,t);', '}', '//thanks again IQ http://www.iquilezles.org/www/articles/rmshadows/rmshadows.htm', 'float shadow( in vec3 X, in vec3 n, in vec3 L )', '{', 'float mint = 0.001;', 'float maxt = 20.0;', 'X += n*.01;', 'float h=0.2;', 'float sharpness = 25.;', 'float soft=1.0;', 'float t = mint;', 'for (int i=0; i<32; i++)', '{', 'float d = sdf(X + L*t);', 'if( d<-0.1 )', 'return h; //t*h;', 'soft = min( soft, (sharpness*d)*(1./t));', 'if (t > maxt) break;', 't += d * 0.9;', '}', 'return clamp(soft,h,1.0);', '}', 'void main(void)', '{', 'vec3 viewP, viewD;', 'MakeViewRay(viewP, viewD);', 'float t = 0.;', 'float d;', 'for (int i=0; i<64; i++)', '{', 'vec3 X = viewP + viewD * t;', 'd = sdf(X);', 'if (abs(d) < 0.00001) break; //near enough surface for normals to look OK.', '#if 1', "if (t>20.) //too far - won't converge: just go to ground plane.", '{', 't = (-viewP.y + floor_height) / (viewD.y);', 'break;', '}', '#endif', 't += d*0.9; //bounding volumes make the distance a bit wrong so slow down', '}', 'vec3 X = viewP + viewD * t;', 'vec3 n = nor(X);', '// vec3 c = vec3(i,i,i)*1.0/32.0;', '// vec3 c = vec3(t,t,t);', '// vec3 c = n*0.5+0.5;', 'vec3 lightDir = normalize(vec3(3,8,2));', '#if 1', 'float ao = Ao(X+n*0.03, n, sdf(n*0.03+X));', 'lightIntensity *= ao;', '#endif', 'ChooseMat(X);', 'float sha= 0.2;', '// if (dot(n,lightDir)>0.)', 'sha = shadow(X,n,lightDir);', 'lightIntensity *= sha;', '#if 0', 'gl_FragColor = vec4(vec3(sha,sha,sha),1.0);', '#else', 'vec3 c = brdf(lightDir, -viewD, n);', 'lightDir = normalize(vec3(2,8,-3));', 'if (dot(n,lightDir)>0.)        sha = shadow(X,n,lightDir);', 'lightIntensity = ao * 4. * sha;', 'c += brdf(lightDir, -viewD, n) * vec3(1., 0.,0.7);', 'vec3 env = vec3(1.5, 0.5, 0.5);', '//textureCube(iChannel0,reflect(viewD,n)).xyz;', '// c += c * env * envAmount;', '// c = vec3(ao,ao,ao);', '// c = pow(c, vec3(1./gamma));', '// c = vec3(sha,sha,sha);', '// c = n*0.5+0.5;', 'gl_FragColor = vec4(c,1.0);', '#endif', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  Dalek.prototype.update = function () {
    this.filter.update();
  };
  Dalek.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Dalek',
    baseClasses: []
  };
  function Dotwave() {
    Phaser.State.call(this);
  }
  Dotwave.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform vec2      resolution;', 'uniform float     time;', '#define PI 90', 'void main( void ) {', 'vec2 p = ( gl_FragCoord.xy / resolution.xy ) - 0.0;', 'float sx = 0.5 + 0.5 * sin( 100.0 * p.x - 1. * pow(time, 0.5)*5.) * sin( 5.0 * p.x - 1. * pow(time, 0.9)*5.);', 'float dy = 1.0/ ( 1000. * abs(p.y - sx));', 'dy += 1./ (25. * length(p - vec2(p.x, 0.)));', 'gl_FragColor = vec4( (p.x + 0.3) * dy, 0.3 * dy, dy, 1.1 );', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    var sprite = this.game.add.sprite();
    sprite.width = 800.0;
    sprite.height = 600.0;
    sprite.filters = [this.filter];
  };
  Dotwave.prototype.update = function () {
    this.filter.update();
  };
  Dotwave.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Dotwave',
    baseClasses: []
  };
  function Dotwave2() {
    Phaser.State.call(this);
  }
  Dotwave2.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform vec2      resolution;', 'uniform float     time;', '#define PI 90', 'void main( void ) {', 'vec2 p = ( gl_FragCoord.xy / resolution.xy ) - 0.5;', 'float sx = 0.3 * (p.x + 0.8) * sin( 900.0 * p.x - 1. * pow(time, 0.55)*5.);', 'float dy = 4./ ( 500.0 * abs(p.y - sx));', 'dy += 1./ (25. * length(p - vec2(p.x, 0.)));', 'gl_FragColor = vec4( (p.x + 0.1) * dy, 0.3 * dy, dy, 1.1 );', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  Dotwave2.prototype.update = function () {
    this.filter.update();
  };
  Dotwave2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Dotwave2',
    baseClasses: []
  };
  function Fire() {
    Phaser.State.call(this);
  }
  Fire.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser2.png');
    this.game.load.script('filter', 'https://cdn.rawgit.com/photonstorm/phaser/master/filters/Fire.js');
  };
  Fire.prototype.create = function () {
    var logo = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'phaser');
    logo.anchor.setTo(0.5, 0.5);
    this.background = this.game.add.sprite(0, 0);
    this.background.width = 800.0;
    this.background.height = 600.0;
    this.filter = this.game.add.filter('Fire', 800, 600);
    this.filter.alpha = 0.0;
    this.background.filters = [this.filter];
  };
  Fire.prototype.update = function () {
    this.filter.update();
  };
  Fire.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Fire',
    baseClasses: []
  };
  function Fireball() {
    Phaser.State.call(this);
  }
  Fireball.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform vec2      mouse;', '// Yuldashev Mahmud Effect took from shaderToy mahmud9935@gmail.com', 'float snoise(vec3 uv, float res)', '{', 'const vec3 s = vec3(1e0, 1e2, 1e3);', 'uv *= res;', 'vec3 uv0 = floor(mod(uv, res))*s;', 'vec3 uv1 = floor(mod(uv+vec3(1.), res))*s;', 'vec3 f = fract(uv); f = f*f*(3.0-2.0*f);', 'vec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,', 'uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);', 'vec4 r = fract(sin(v*1e-1)*1e3);', 'float r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);', 'r = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);', 'float r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);', 'return mix(r0, r1, f.z)*2.-1.;', '}', 'void main( void ) {', 'vec2 p = -.5 + gl_FragCoord.xy / resolution.xy;', 'p.x *= resolution.x/resolution.y;', 'float color = 3.0 - (3.*length(2.*p));', 'vec3 coord = vec3(atan(p.x,p.y)/6.2832+.5, length(p)*.4, .5);', 'for(int i = 1; i <= 7; i++)', '{', 'float power = pow(2.0, float(i));', 'color += (1.5 / power) * snoise(coord + vec3(0.,-time*.05, time*.01), power*16.);', '}', 'gl_FragColor = vec4( color, pow(max(color,0.),2.)*0.4, pow(max(color,0.),3.)*0.15 , 1.0);', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  Fireball.prototype.update = function () {
    this.filter.update();
  };
  Fireball.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Fireball',
    baseClasses: []
  };
  function Gray() {
    Phaser.State.call(this);
  }
  Gray.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser2.png');
    this.game.load.script('gray', 'https://cdn.rawgit.com/photonstorm/phaser/master/filters/Gray.js');
  };
  function Gray$create$ObjectLiteral() {
    this.y = '+300';
  }
  Gray$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Gray.prototype.create = function () {
    var tmp$;
    tmp$ = 8 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var logo = this.game.add.sprite(this.game.world.randomX, -150 + this.game.world.randomY, 'phaser');
      logo.anchor.set(0.5);
      logo.scale.set(this.game.rnd.realInRange(0.2, 1));
      this.game.add.tween(logo).to(new Gray$create$ObjectLiteral(), 1000 + this.game.rnd.between(1000, 2000), 'Bounce.easeOut', true, 0, -1, true);
    }
    var gray = this.game.add.filter('Gray');
    this.game.world.filters = [gray];
  };
  Gray.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Gray',
    baseClasses: []
  };
  function Kaleidoscope() {
    Phaser.State.call(this);
  }
  Kaleidoscope.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform vec2      mouse;', '//MrOMGWTF', 'float line(vec2 a, float rot, float height, float width, vec2 p)', '{', 'p = vec2(p.x * cos(rot) + p.y * -sin(rot), p.x * sin(rot) + p.y * cos(rot));', 'vec2 pos = p-a;', 'float radius = width * 0.5 * (2.5+sin(atan(pos.y, pos.x)*5.0));', 'float v = max(0.0, min(1.0, (radius-length(p-a))*40.0));', 'return v;', '}', 'void main( void )', '{', 'vec2 position = ( gl_FragCoord.xy / resolution.xy * 2.0 - 1.0 );', 'position.x *= resolution.x / resolution.y;', 'position*=3.0;', 'vec2 origin = vec2(mouse)*2.0 - 1.0;', 'origin *= 5.0;', 'float rot = 0.0;', 'float height = 0.5;', 'float width = 0.1;', 'vec3 color = vec3(0.0, 0.0, 0.0);', 'for(float i = 0.; i < 80.; i++)', '{', 'float lit = line(origin, rot, height, width, position * (7.0/(1.0+i*.12)))*(.95-i*.004)*1.5;', 'float ang = i/50.0*3.14+time;', 'color.r += max(0.0, sin(ang)+0.5)*lit;', 'color.g += max(0.0, sin(ang+2.09)+0.5)*lit;', 'color.b += max(0.0, sin(ang-2.09)+0.5)*lit;', 'width += 0.01;', 'height += 0.05;', 'rot += time*0.1;', '}', 'color*=0.3;', 'gl_FragColor = vec4( color , 1.0 );', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  Kaleidoscope.prototype.update = function () {
    this.filter.update(this.game.input.activePointer);
  };
  Kaleidoscope.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Kaleidoscope',
    baseClasses: []
  };
  function Lightbeams() {
    Phaser.State.call(this);
  }
  Lightbeams.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser2.png');
    this.game.load.script('filter', '../filters/LightBeam.js');
  };
  Lightbeams.prototype.create = function () {
    var logo = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'phaser');
    logo.anchor.setTo(0.5, 0.5);
    this.background = this.game.add.sprite(0, 0);
    this.background.width = 800.0;
    this.background.height = 600.0;
    this.filter = this.game.add.filter('LightBeam', 800, 600);
    this.filter.alpha = 0.0;
    this.background.filters = [this.filter];
  };
  Lightbeams.prototype.update = function () {
    this.filter.update();
  };
  Lightbeams.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Lightbeams',
    baseClasses: []
  };
  function Lightwave() {
    Phaser.State.call(this);
  }
  Lightwave.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2     resolution;', '#define PI 3.1415926535897932384626433832795', 'const float position = 0.0;', 'const float scale = 1.0;', 'const float intensity = 1.0;', 'float band(vec2 pos, float amplitude, float frequency) {', 'float wave = scale * amplitude * sin(1.0 * PI * frequency * pos.x + time) / 2.05;', 'float light = clamp(amplitude * frequency * 0.02, 0.001 + 0.001 / scale, 5.0) * scale / abs(wave - pos.y);', 'return light;', '}', 'void main() {', 'vec3 color = vec3(1.5, 0.5, 10.0);', 'color = color == vec3(0.0)? vec3(10.5, 0.5, 1.0) : color;', 'vec2 pos = (gl_FragCoord.xy / resolution.xy);', 'pos.y += - 0.5;', 'float spectrum = 0.0;', 'const float lim = 28.0;', '#define time time*0.037 + pos.x*10.', 'for(float i = 0.0; i < lim; i++){', 'spectrum += band(pos, 1.0*sin(time*0.1/PI), 1.0*sin(time*i/lim))/pow(lim, 0.25);', '}', 'spectrum += band(pos, cos(10.7), 2.5);', 'spectrum += band(pos, 0.4, sin(2.0));', 'spectrum += band(pos, 0.05, 4.5);', 'spectrum += band(pos, 0.1, 7.0);', 'spectrum += band(pos, 0.1, 1.0);', 'gl_FragColor = vec4(color * spectrum, spectrum);', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  Lightwave.prototype.update = function () {
    this.filter.update();
  };
  Lightwave.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Lightwave',
    baseClasses: []
  };
  function Marble() {
    Phaser.State.call(this);
  }
  Marble.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser2.png');
    this.game.load.script('filter', 'https://cdn.rawgit.com/photonstorm/phaser/master/filters/Marble.js');
  };
  Marble.prototype.create = function () {
    var logo = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'phaser');
    logo.anchor.setTo(0.5, 0.5);
    this.background = this.game.add.sprite(0, 0);
    this.background.width = 800.0;
    this.background.height = 600.0;
    this.filter = this.game.add.filter('Marble', 800, 600);
    this.filter.alpha = 0.2;
    this.background.filters = [this.filter];
  };
  Marble.prototype.update = function () {
    this.filter.update();
  };
  Marble.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Marble',
    baseClasses: []
  };
  function MouseRay() {
    Phaser.State.call(this);
  }
  MouseRay.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform vec2      mouse;', 'float rand(int seed, float ray) {', 'return mod(sin(float(seed)*1.0+ray*1.0)*1.0, 1.0);', '}', 'void main( void ) {', 'float pi = 3.14159265359;', 'vec2 position = ( gl_FragCoord.xy / resolution.xy ) - mouse;', 'position.y *= resolution.y/resolution.x;', 'float ang = atan(position.y, position.x);', 'float dist = length(position);', 'gl_FragColor.rgb = vec3(0.5, 0.5, 0.5) * (pow(dist, -1.0) * 0.05);', 'for (float ray = 0.0; ray < 18.0; ray += 1.0) {', '//float rayang = rand(5234, ray)*6.2+time*5.0*(rand(2534, ray)-rand(3545, ray));', '//float rayang = time + ray * (1.0 * (1.0 - (1.0 / 1.0)));', 'float rayang = (((ray) / 9.0) * 3.14) + (time * 0.1            );', 'rayang = mod(rayang, pi*2.0);', 'if (rayang < ang - pi) {rayang += pi*2.0;}', 'if (rayang > ang + pi) {rayang -= pi*2.0;}', 'float brite = 0.3 - abs(ang - rayang);', 'brite -= dist * 0.2;', 'if (brite > 0.0) {', 'gl_FragColor.rgb += vec3(sin(ray*mouse.y+0.0)+1.0, sin(ray*mouse.y+2.0)+1.0, sin(ray*mouse.y+4.0)+1.0) * brite;', '}', '}', 'gl_FragColor.a = 1.0;', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  MouseRay.prototype.update = function () {
    this.filter.update(this.game.input.activePointer);
  };
  MouseRay.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MouseRay',
    baseClasses: []
  };
  function MouseWave() {
    Phaser.State.call(this);
  }
  MouseWave.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform vec2      mouse;', '#define PI 3.1415926535897932384626433832795', 'float rand(vec2 v)', '{', 'return fract(sin(dot(v.xy,vec2(33.9898,78.233))) * 43758.5453);', '}', 'void main()', '{', 'vec2 pos = (gl_FragCoord.xy / resolution) * 2. - 1.;', 'float m = mouse.y * 2. - 1.;', 'float amp = 0.50;          // amplitud', 'float offset = m * .01 * 50. * time;   // periodo en segundos', 'vec3 color;', 'const float wide = 0.5;', 'for(float n = -wide; n <= wide; n += .05){', 'float rnd1 = rand(vec2(1.,n));', 'float rnd2 = rand(vec2(n,1.));', 'float rnd3 = rand(vec2(n,n));', 'float r = 0.006 / abs(sin(PI * pos.x * pow(3., rnd1) + offset * rnd1) + ((pos.y + (rnd1 * n)) / amp));', 'float g = 0.006 / abs(sin(PI * pos.x * pow(3., rnd2) + offset * rnd2) + ((pos.y + (rnd2 * n)) / amp));', 'float b = 0.006 / abs(sin(PI * pos.x * pow(3., rnd3) + offset * rnd3) + ((pos.y + (rnd3 * n)) / amp));', 'color += vec3(r, g, b);', '}', 'gl_FragColor = vec4(color, 1);', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  MouseWave.prototype.update = function () {
    this.filter.update(this.game.input.mousePointer);
  };
  MouseWave.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MouseWave',
    baseClasses: []
  };
  function MultipleShaders() {
    Phaser.State.call(this);
  }
  MultipleShaders.prototype.preload = function () {
    this.game.load.shader('blueDots', 'assets/shaders/blue-dots.frag');
    this.game.load.shader('bacteria', 'assets/shaders/bacteria.frag');
  };
  MultipleShaders.prototype.create = function () {
    this.filter = new Phaser.Filter(this.game, null, this.game.cache.getShader('blueDots'));
    this.filter.setResolution(400, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 400.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
    this.filter2 = new Phaser.Filter(this.game, null, this.game.cache.getShader('bacteria'));
    this.filter2.setResolution(400, 600);
    var sprite2 = this.game.add.sprite(400);
    sprite2.width = 400.0;
    sprite2.height = 600.0;
    sprite2.filters = [this.filter2];
  };
  MultipleShaders.prototype.update = function () {
    this.filter.update();
    this.filter2.update();
  };
  MultipleShaders.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MultipleShaders',
    baseClasses: []
  };
  function Pixelate() {
    Phaser.State.call(this);
  }
  Pixelate.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/pics/mighty_no_09_cover_art_by_robduenas.jpg');
    this.game.load.shader('pixelate', 'assets/shaders/pixelate.frag');
  };
  function Pixelate$create$ObjectLiteral() {
    this.sizeX = 100;
    this.sizeY = 100;
  }
  Pixelate$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Pixelate.prototype.create = function () {
    var logo = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'phaser');
    logo.anchor.set(0.5);
    var pixelate = this.game.add.filter('Pixelate', null, this.game.cache.getShader('pixelate'));
    logo.filters = [pixelate];
    this.game.add.tween(pixelate).to(new Pixelate$create$ObjectLiteral(), 5000, 'Quad.easeInOut', true, 0, -1, true);
  };
  Pixelate.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Pixelate',
    baseClasses: []
  };
  function PixiFilter() {
    Phaser.State.call(this);
  }
  PixiFilter.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser2.png');
    this.game.load.script('filter1', 'https://cdn.rawgit.com/photonstorm/phaser/master/filters/pixi/RGBSplitFilter.js');
  };
  function PixiFilter$create$ObjectLiteral() {
    this.y = '+300';
  }
  PixiFilter$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  PixiFilter.prototype.create = function () {
    var tmp$;
    tmp$ = 8 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var logo = this.game.add.sprite(this.game.world.randomX, -150 + this.game.world.randomY, 'phaser');
      logo.anchor.set(0.5);
      logo.scale.set(this.game.rnd.realInRange(0.2, 1));
      this.game.add.tween(logo).to(new PixiFilter$create$ObjectLiteral(), 1000 + this.game.rnd.between(1000, 2000), 'Bounce.easeOut', true, 0, -1, true);
    }
    var rgb = new PIXI.RGBSplitFilter();
    this.game.world.filters = [rgb];
  };
  PixiFilter.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PixiFilter',
    baseClasses: []
  };
  function PlaneDeformation() {
    Phaser.State.call(this);
  }
  PlaneDeformation.prototype.preload = function () {
    this.game.load.image('cyberglow', 'assets/textures/cyberglow.png');
    this.game.load.image('tron', 'assets/textures/tron.png');
    this.game.load.image('metal', 'assets/textures/metal.png');
    this.game.load.image('factory', 'assets/textures/factory.png');
    this.game.load.image('ooze', 'assets/textures/ooze.png');
  };
  function PlaneDeformation$create$ObjectLiteral(this$PlaneDeformation) {
    this.iChannel0 = new PlaneDeformation$create$ObjectLiteral$iChannel0$ObjectLiteral(this$PlaneDeformation);
  }
  function PlaneDeformation$create$ObjectLiteral$iChannel0$ObjectLiteral(this$PlaneDeformation) {
    this.type = 'sampler2D';
    this.value = this$PlaneDeformation.sprite.texture;
    this.textureData = new PlaneDeformation$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral();
  }
  function PlaneDeformation$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral() {
    this.repeat = true;
  }
  PlaneDeformation$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  PlaneDeformation$create$ObjectLiteral$iChannel0$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  PlaneDeformation$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  PlaneDeformation.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform sampler2D iChannel0;', 'void main( void ) {', 'float t = time;', 'vec2 uv = gl_FragCoord.xy / resolution.xy;', 'vec2 texcoord = gl_FragCoord.xy / vec2(resolution.y);', 'texcoord.y -= t*0.2;', 'float zz = 1.0/(1.0-uv.y*1.7);', 'texcoord.y -= zz * sign(zz);', 'vec2 maa = texcoord.xy * vec2(zz, 1.0) - vec2(zz, 0.0) ;', 'vec2 maa2 = (texcoord.xy * vec2(zz, 1.0) - vec2(zz, 0.0))*0.3 ;', 'vec4 stone = texture2D(iChannel0, maa);', 'vec4 blips = texture2D(iChannel0, maa);', 'vec4 mixer = texture2D(iChannel0, maa2);', 'float shade = abs(1.0/zz);', 'vec3 outp = mix(shade*stone.rgb, mix(1.0, shade, abs(sin(t+maa.y-sin(maa.x))))*blips.rgb, min(1.0, pow(mixer.g*2.1, 2.0)));', 'gl_FragColor = vec4(outp,1.0);', '}'];
    this.sprite = this.game.add.sprite(0, 0, 'cyberglow');
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    var customUniforms = new PlaneDeformation$create$ObjectLiteral(this);
    this.filter = new Phaser.Filter(this.game, customUniforms, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite.filters = [this.filter];
  };
  PlaneDeformation.prototype.update = function () {
    this.filter.update();
  };
  PlaneDeformation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PlaneDeformation',
    baseClasses: []
  };
  function Plasma() {
    Phaser.State.call(this);
  }
  Plasma.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser2.png');
    this.game.load.script('filter', 'https://cdn.rawgit.com/photonstorm/phaser/master/filters/Plasma.js');
  };
  Plasma.prototype.create = function () {
    this.background = this.game.add.sprite(0, 0);
    this.background.width = 800.0;
    this.background.height = 600.0;
    this.filter = this.game.add.filter('Plasma', 800, 600);
    this.background.filters = [this.filter];
    var logo = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'phaser');
    logo.anchor.setTo(0.5, 0.5);
  };
  Plasma.prototype.update = function () {
    this.filter.update();
  };
  Plasma.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Plasma',
    baseClasses: []
  };
  function RainbowBars() {
    Phaser.State.call(this);
  }
  RainbowBars.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform vec2      resolution;', 'uniform float     time;', 'void main( void )', '{', 'vec2 p = ( gl_FragCoord.xy / resolution.xy ) * 2.0 - 1.0;', 'vec3 c = vec3( 0.0 );', 'float amplitude = 0.50;', 'float glowT = sin(time) * 0.5 + 0.5;', 'float glowFactor = mix( 0.15, 0.35, glowT );', 'c += vec3(0.02, 0.03, 0.13) * ( glowFactor * abs( 1.0 / sin(p.x + sin( p.y + time ) * amplitude ) ));', 'c += vec3(0.02, 0.10, 0.03) * ( glowFactor * abs( 1.0 / sin(p.x + cos( p.y + time+1.00 ) * amplitude+0.1 ) ));', 'c += vec3(0.15, 0.05, 0.20) * ( glowFactor * abs( 1.0 / sin(p.y + sin( p.x + time+1.30 ) * amplitude+0.15 ) ));', 'c += vec3(0.20, 0.05, 0.05) * ( glowFactor * abs( 1.0 / sin(p.y + cos( p.x + time+3.00 ) * amplitude+0.3 ) ));', 'c += vec3(0.17, 0.17, 0.05) * ( glowFactor * abs( 1.0 / sin(p.y + cos( p.x + time+5.00 ) * amplitude+0.2 ) ));', 'gl_FragColor = vec4( c, 1.0 );', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  RainbowBars.prototype.update = function () {
    this.filter.update();
  };
  RainbowBars.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RainbowBars',
    baseClasses: []
  };
  function RetroPlasma() {
    Phaser.State.call(this);
  }
  RetroPlasma.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', '// Oldskool plasm shader. (c) Victor Korsun, bitekas@gmail.com; 1996-2013.', '//', '// Attribution-ShareAlike CC License.', '//----------------', 'const int ps = 8; // use values > 1..10 for oldskool', '//----------------', 'void main( void ) {', 'float x = gl_FragCoord.x / resolution.x * 640.;', 'float y = gl_FragCoord.y / resolution.y * 480.;', 'if (ps > 0)', '{', 'x = float(int(x / float(ps)) * ps);', 'y = float(int(y / float(ps)) * ps);', '}', 'float mov0 = x+y+sin(time)*10.+sin(x/90.)*70.+time*2.;', 'float mov1 = (mov0 / 5. + sin(mov0 / 30.))/ 10. + time * 3.;', 'float mov2 = mov1 + sin(mov1)*5. + time*1.0;', 'float cl1 = sin(sin(mov1/4. + time)+mov1);', 'float c1 = cl1 +mov2/2.-mov1-mov2+time;', 'float c2 = sin(c1+sin(mov0/100.+time)+sin(y/57.+time/50.)+sin((x+y)/200.)*2.);', 'float c3 = abs(sin(c2+cos((mov1+mov2+c2) / 10.)+cos((mov2) / 10.)+sin(x/80.)));', 'float dc = float(16-ps);', 'if (ps > 0)', '{', 'cl1 = float(int(cl1*dc))/dc;', 'c2 = float(int(c2*dc))/dc;', 'c3 = float(int(c3*dc))/dc;', '}', 'gl_FragColor = vec4( cl1,c2,c3,1.0);', '}'];
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite.filters = [this.filter];
  };
  RetroPlasma.prototype.update = function () {
    this.filter.update();
  };
  RetroPlasma.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RetroPlasma',
    baseClasses: []
  };
  function Rotozoomer() {
    Phaser.State.call(this);
  }
  Rotozoomer.prototype.preload = function () {
    this.game.load.image('texture', 'assets/pics/lance-overdose-loader_eye.png');
  };
  function Rotozoomer$create$ObjectLiteral(this$Rotozoomer) {
    this.iChannel0 = new Rotozoomer$create$ObjectLiteral$iChannel0$ObjectLiteral(this$Rotozoomer);
  }
  function Rotozoomer$create$ObjectLiteral$iChannel0$ObjectLiteral(this$Rotozoomer) {
    this.type = 'sampler2D';
    this.value = this$Rotozoomer.sprite.texture;
    this.textureData = new Rotozoomer$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral();
  }
  function Rotozoomer$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral() {
    this.repeat = true;
  }
  Rotozoomer$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Rotozoomer$create$ObjectLiteral$iChannel0$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Rotozoomer$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Rotozoomer.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform sampler2D iChannel0;', 'float speed = time * 0.2;', 'float pi = 3.14159265;', 'void main( void ) {', 'vec2 position = vec2(640.0/2.0+640.0/2.0*sin(speed*2.0), 360.0/2.0+360.0/2.0*cos(speed*3.0));', 'vec2 position2 = vec2(640.0/2.0+640.0/2.0*sin((speed+2000.0)*2.0), 360.0/2.0+360.0/2.0*cos((speed+2000.0)*3.0));', 'vec2 offset = vec2(640.0/2.0, 360.0/2.0) ;', 'vec2 offset2 = vec2(6.0*sin(speed*1.1), 3.0*cos(speed*1.1));', 'vec2 oldPos = (gl_FragCoord.xy-offset);', 'float angle = speed*2.0;', 'vec2 newPos = vec2(oldPos.x *cos(angle) - oldPos.y *sin(angle),', 'oldPos.y *cos(angle) + oldPos.x *sin(angle));', 'newPos = (newPos)*(0.0044+0.004*sin(speed*3.0))-offset2;', 'vec2 temp = newPos;', 'newPos.x = temp.x + 0.4*sin(temp.y*2.0+speed*8.0);', 'newPos.y = (-temp.y + 0.4*sin(temp.x*2.0+speed*8.0));', 'vec4 final = texture2D(iChannel0,newPos);', '//final = texture2D(texCol,gl_FragCoord.xy*vec2(1.0/640, -1.0/360));', 'gl_FragColor = vec4(final.xyz, 1.0);', '}'];
    this.sprite = this.game.add.sprite(0, 0, 'texture');
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    var customUniforms = new Rotozoomer$create$ObjectLiteral(this);
    this.filter = new Phaser.Filter(this.game, customUniforms, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite.filters = [this.filter];
  };
  Rotozoomer.prototype.update = function () {
    this.filter.update();
  };
  Rotozoomer.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Rotozoomer',
    baseClasses: []
  };
  function Seascape() {
    Phaser.State.call(this);
  }
  Seascape.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform vec2      mouse;', '// Seascape by Alexander Alekseev aka TDM - 2014', '// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.', '// Mahmud Yuldashev modified', 'float iGlobalTime=time;', 'vec2 iResolution=resolution;', 'vec3 iMouse=vec3(mouse,-3.0);', 'const int NUM_STEPS = 38;', 'const float PI     = 3.14159265;', 'const float EPSILON    = 1e-4;', 'float EPSILON_NRM  = 0.1 / iResolution.x;', '// sea', 'const int ITER_FRAGMENT = 5;', 'const float SEA_HEIGHT = 1.6;', 'const float SEA_CHOPPY = 2.0;', 'const float SEA_SPEED = 1.8;', 'const float SEA_FREQ = 0.16;', 'const vec3 SEA_BASE = vec3(0.1,0.19,0.22);', 'const vec3 SEA_WATER_COLOR = vec3(0.8,0.9,0.6);', 'const float SKY_INTENSITY = 1.0;', 'float SEA_TIME = iGlobalTime * SEA_SPEED;', '// math', 'mat4 fromEuler(vec3 ang) {', 'vec2 a1 = vec2(sin(ang.x),cos(ang.x));', 'vec2 a2 = vec2(sin(ang.y),cos(ang.y));', 'vec2 a3 = vec2(sin(ang.z),cos(ang.z));', 'mat4 m;', 'm[0] = vec4(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x,0.0);', 'm[1] = vec4(-a2.y*a1.x,a1.y*a2.y,a2.x,0.0);', 'm[2] = vec4(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y,0.0);', 'm[3] = vec4(0.0,0.0,0.0,1.0);', 'return m;', '}', 'vec3 rotate(vec3 v, mat4 m) {', 'return vec3(dot(v,m[0].xyz),dot(v,m[1].xyz),dot(v,m[2].xyz));', '}', 'float hash( vec2 p ) {', 'float h = dot(p,vec2(127.1,311.7));', 'return fract(sin(h)*43758.5453123);', '}', 'float noise( in vec2 p ) {', 'vec2 i = floor( p );', 'vec2 f = fract( p );', 'vec2 u = f*f*(3.0-2.0*f);', 'return -1.0+2.0*mix( mix( hash( i + vec2(0.0,0.0) ),', 'hash( i + vec2(1.0,0.0) ), u.x),', 'mix( hash( i + vec2(0.0,1.0) ),', 'hash( i + vec2(1.0,1.0) ), u.x), u.y);', '}', '// lighting', 'float diffuse(vec3 n,vec3 l,float p) { return pow(dot(n,l) * 0.4 + 0.6,p); }', 'float specular(vec3 n,vec3 l,vec3 e,float s) {', 'float nrm = (s + 8.0) / (3.1415 * 8.0);', 'return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;', '}', '// sky', 'vec3 sky_color(vec3 e) {', 'e.y = max(e.y,0.0);', 'vec3 ret;', 'ret.x = pow(1.0-e.y,2.0);', 'ret.y = 1.0-e.y;', 'ret.z = 0.6+(1.0-e.y)*0.4;', 'return ret * SKY_INTENSITY;', '}', '// sea', 'float sea_octave(vec2 uv, float choppy) {', 'uv += noise(uv);', 'vec2 wv = 1.0-abs(sin(uv));', 'vec2 swv = abs(cos(uv));', 'wv = mix(wv,swv,wv);', 'return pow(1.0-pow(wv.x * wv.y,0.65),choppy);', '}', 'float map_detailed(vec3 p) {', 'float freq = SEA_FREQ;', 'float amp = SEA_HEIGHT;', 'float choppy = SEA_CHOPPY;', 'vec2 uv = p.xz; uv.x *= 0.75;', 'mat2 m = mat2(1.6,1.2,-1.2,1.6);', 'float d, h = 0.0;', 'for(int i = 0; i < ITER_FRAGMENT; i++) {', 'd = sea_octave((uv+SEA_TIME)*freq,choppy);', 'd += sea_octave((uv-SEA_TIME)*freq,choppy);', 'h += d * amp;', 'uv *= m; freq *= 1.9; amp *= 0.22;', 'choppy = mix(choppy,1.0,0.2);', '}', 'return p.y - h;', '}', 'float map(vec3 p) {', 'return map_detailed(p);', '}', 'vec3 sea_color(in vec3 p, in vec3 n, in vec3 eye, in vec3 dist) {', 'float fresnel_o = 1.0 - max(dot(n,-eye),0.0);', 'float fresnel = pow(fresnel_o,3.0) * 0.65;', '// reflection', 'vec3 refl = sky_color(reflect(eye,n));', '// color', 'vec3 ret = SEA_BASE;', 'ret = mix(ret,refl,fresnel);', '// wave peaks', 'float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);', 'ret += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;', 'return ret;', '}', '// tracing', 'vec3 getNormal(vec3 p, float eps) {', 'vec3 n;', 'n.y = map_detailed(p);', 'n.x = map_detailed(vec3(p.x+eps,p.y,p.z)) - n.y;', 'n.z = map_detailed(vec3(p.x,p.y,p.z+eps)) - n.y;', 'n.y = eps;', 'return normalize(n);', '}', 'float hftracing(vec3 ori, vec3 dir, out vec3 p) {', 'float tm = 0.0;', 'float tx = 1000.0;', 'float hx = 1.0;', 'float hm = 0.0;', 'float tmid = 1.0;', 'for(int i = 0; i < NUM_STEPS; i++) {', '//tmid = mix(tm,tx, hm/(hm-hx));', 'p = ori + dir * tmid;', 'tmid += map(p);', '}', 'return tmid;', '}', '// main', 'void main(void) {', 'vec2 uv = gl_FragCoord.xy / iResolution.xy;', 'uv = uv * 2.0 - 1.0;', 'uv.x *= iResolution.x / iResolution.y;', 'float time = iGlobalTime * 0.3;', '// ray', 'vec3 ang = vec3(sin(time*3.0)*0.1,sin(time)*0.2+0.4,time);', 'if(iMouse.z > 0.0) ang = vec3(0.0,clamp(2.0-iMouse.y*0.01,-0.3,PI),iMouse.x*0.01);', 'mat4 rot = fromEuler(ang);', 'vec3 ori = vec3(0.0,0.2,time*1.0);', 'ori.y += abs(map_detailed(-ori));', 'vec3 dir = normalize(vec3(uv.xy,-1.0));', 'dir = rotate(normalize(dir),rot);', '// tracing', 'vec3 p;', 'float dens = hftracing(ori,dir,p);', 'vec3 dist = p - ori;', 'vec3 n = getNormal(p, dot(dist,dist)*EPSILON_NRM);', '// color', 'vec3 color = sea_color(p,n,dir,dist);', 'vec3 light = normalize(vec3(0.0,1.0,0.8));', 'color += vec3(diffuse(n,light,80.0) * SEA_WATER_COLOR) * 0.12;', 'color += vec3(specular(n,light,dir,60.0));', '// post', 'color = mix(sky_color(dir),color, clamp(1.0-length(dist)/100.0,0.0,1.0));', 'color = pow(color,vec3(0.75));', 'gl_FragColor = vec4(color,1.0);', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  Seascape.prototype.update = function () {
    this.filter.update();
  };
  Seascape.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Seascape',
    baseClasses: []
  };
  function Sinewave() {
    Phaser.State.call(this);
  }
  Sinewave.prototype.preload = function () {
    this.game.load.image('texture', 'assets/pics/alex-bisleys_horsy_512x512.png');
  };
  function Sinewave$create$ObjectLiteral(this$Sinewave) {
    this.iChannel0 = new Sinewave$create$ObjectLiteral$iChannel0$ObjectLiteral(this$Sinewave);
  }
  function Sinewave$create$ObjectLiteral$iChannel0$ObjectLiteral(this$Sinewave) {
    this.type = 'sampler2D';
    this.value = this$Sinewave.sprite.texture;
    this.textureData = new Sinewave$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral();
  }
  function Sinewave$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral() {
    this.repeat = true;
  }
  Sinewave$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Sinewave$create$ObjectLiteral$iChannel0$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Sinewave$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Sinewave.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform sampler2D iChannel0;', 'void main( void ) {', 'vec2 uv = gl_FragCoord.xy / resolution.xy;', 'uv.y *= -1.0;', 'uv.y += (sin((uv.x + (time * 0.5)) * 10.0) * 0.1) + (sin((uv.x + (time * 0.2)) * 32.0) * 0.01);', 'vec4 texColor = texture2D(iChannel0, uv);', 'gl_FragColor = texColor;', '}'];
    this.sprite = this.game.add.sprite(0, 0, 'texture');
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    var customUniforms = new Sinewave$create$ObjectLiteral(this);
    this.filter = new Phaser.Filter(this.game, customUniforms, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite.filters = [this.filter];
  };
  Sinewave.prototype.update = function () {
    this.filter.update();
  };
  Sinewave.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Sinewave',
    baseClasses: []
  };
  function SinewaveFixedBase() {
    Phaser.State.call(this);
  }
  SinewaveFixedBase.prototype.preload = function () {
    this.game.load.image('texture', 'assets/pics/alex-bisleys_horsy_512x512.png');
  };
  function SinewaveFixedBase$create$ObjectLiteral(this$SinewaveFixedBase) {
    this.iChannel0 = new SinewaveFixedBase$create$ObjectLiteral$iChannel0$ObjectLiteral(this$SinewaveFixedBase);
  }
  function SinewaveFixedBase$create$ObjectLiteral$iChannel0$ObjectLiteral(this$SinewaveFixedBase) {
    this.type = 'sampler2D';
    this.value = this$SinewaveFixedBase.sprite.texture;
    this.textureData = new SinewaveFixedBase$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral();
  }
  function SinewaveFixedBase$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral() {
    this.repeat = true;
  }
  SinewaveFixedBase$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SinewaveFixedBase$create$ObjectLiteral$iChannel0$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SinewaveFixedBase$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SinewaveFixedBase.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform sampler2D iChannel0;', 'void main( void ) {', 'vec2 uv = gl_FragCoord.xy / resolution.xy;', '// Flip-a-roo.', 'uv.y *= -1.0;', '// Represents the v/y coord(0 to 1) that will not sway.', 'float fixedBasePosY = 0.0;', '// Configs for you to get the sway just right.', 'float speed = 3.0;', 'float verticleDensity = 6.0;', 'float swayIntensity = 0.2;', '// Putting it all together.', 'float offsetX = sin(uv.y * verticleDensity + time * speed) * swayIntensity;', '// Offsettin the u/x coord.', 'uv.x += offsetX * (uv.y - fixedBasePosY);', 'gl_FragColor = texture2D(iChannel0, uv);', '}'];
    this.sprite = this.game.add.sprite(0, 0, 'texture');
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    var customUniforms = new SinewaveFixedBase$create$ObjectLiteral(this);
    this.filter = new Phaser.Filter(this.game, customUniforms, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite.filters = [this.filter];
  };
  SinewaveFixedBase.prototype.update = function () {
    this.filter.update();
  };
  SinewaveFixedBase.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SinewaveFixedBase',
    baseClasses: []
  };
  function SphereTracer() {
    Phaser.State.call(this);
  }
  SphereTracer.prototype.create = function () {
    var fragmentSrc = ['#ifdef GL_ES', 'precision mediump float;', 'const vec3 df = vec3(0.05, 0.0, 0.0);', '#else', 'const vec3 df = vec3(0.01, 0.0, 0.0);', '#endif', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform vec2      mouse;', '// Sphere tracer by mzeo', '// inspired by http://www.youtube.com/watch?v=kuesTvUYsSc#t=377', '// waves by @hintz', '#define AUTO_CAMERA', '// Constants', '// Camera', 'const vec3 origin = vec3(0, 0, 0);', 'const int steps = 128;', 'const vec3 sun = vec3(1.0, .5, -1.0);', 'const int miterations = 32;', '// Ball', 'struct Ball', '{', 'vec3 pos;', 'float size;', '};', 'const Ball ball = Ball(vec3(0, 0, 5), 0.5);', 'struct Balls', '{', 'vec3 dir;', 'vec3 p;', 'float dist;', '};', 'const Balls balls = Balls(vec3(1, 0, 0), vec3(0, 0, 0), 1.0);', '// Floor', 'struct Plane', '{', 'vec3 n;', 'float d;', '};', 'const Plane plane = Plane(vec3(0, 1, 0), -1.0);', '// Distance', 'struct Dist', '{', 'float dist;', 'int id;', '};', 'Dist and(Dist a, Dist b)', '{', 'if (a.dist < b.dist)', '{', 'return a;', '}', 'return b;', '}', 'Dist fBall(Ball ball, vec3 p)', '{', 'return Dist(length(ball.pos - p) - ball.size, 0);', '}', 'Ball get(Balls balls, float t)', '{', 'float a = abs(mod(t, 6.0) - 3.0);', 'vec3 p = balls.p + balls.dir * t * balls.dist + a * a * vec3(0, -0.15, 0);', 'return Ball(p, ball.size);', '}', 'Dist fBalls(Balls balls, vec3 p)', '{', 'float t = dot(p - balls.p, balls.dir) / balls.dist;', 'float t0 = t - fract(t + fract(time) * 2.0);', 'float t1 = t0 + 1.0;', 'return and(', 'fBall(get(balls, t0), p),', 'fBall(get(balls, t1), p));', '}', 'Dist fPlane(Plane plane, vec3 p)', '{', 'return Dist(dot(plane.n, p) - plane.d - 0.4*cos(length(p.xz) - time), 1);', '}', 'Dist f(vec3 p)', '{', 'return and(', 'fBalls(balls, p),', 'fPlane(plane, p));', '}', 'vec3 grad(vec3 p)', '{', 'float f0 = f(p).dist;', 'return normalize(vec3(', 'f(p + df.xyz).dist,', 'f(p + df.yxz).dist,', 'f(p + df.yzx).dist) - f0);', '}', 'float mandel(vec2 c)', '{', 'vec2 z = c;', 'for(int i = 0; i < miterations; ++i)', '{', 'z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;', 'if (length(z) > 40.0) return float(i) / float(miterations);', '}', 'return 0.0;', '}', 'vec3 floorTexture(vec3 p)', '{', 'mat2 rot = mat2(vec2(1, 1), vec2(1, -1));', 'vec2 c = rot * (p.xz + vec2(-0.7, -1.0)) * 0.2;', 'float i = mandel(c);', 'return clamp(vec3(i * 10.0, i * i *10.0, i*i*i*5.0).zyx, vec3(0,0,0), vec3(2,2,2));', '}', 'vec4 shade(vec3 p, vec3 ray, int id)', '{', 'vec3 n = grad(p);', 'float diffuse = clamp(dot(normalize(sun), n), 0.0, 1.0);', 'vec3 color;', 'float ref;', 'if (id == 0)', '{', 'color = vec3(0,1,0);', 'ref = 0.1;', '}', 'else', '{', 'color = floorTexture(p);', 'ref = 0.5;', '}', 'return vec4(color * diffuse, 1) * ref;', '}', 'vec4 combine(vec4 a, vec4 b)', '{', 'return a + b * (1.0 - a.w);', '}', 'vec4 sky(vec3 ray)', '{', 'float sun = dot(ray, normalize(sun));', 'sun = (sun > 0.0) ? pow(sun, 100.0) * 3.0 : 0.0;', 'float horizon = 1.0 - abs(ray.y);', 'vec3 blue = vec3(0.1, 0.3, 0.6);', 'vec3 red = vec3(0.6, 0.3, 0.) * 2.0;', 'return vec4(vec3(0.9, 0.8, 0.5) * sun + blue * horizon + red * pow(horizon, 8.0), 1);', '}', 'vec4 trace(vec3 origin, vec3 ray)', '{', 'vec3 p = origin;', 'Dist dist = Dist(10000.0, 2);', 'vec4 result = vec4(0, 0, 0, 0);', 'for(int i = 0; i < steps; ++i)', '{', 'dist = f(p);', 'if (dist.dist > 0.01)', '{', 'p += ray * dist.dist;', 'float absorb = exp(-dist.dist * 0.05);', 'vec4 s = sky(ray) * (1.0 - absorb);', 'result = combine(result, s);', '}', 'else if (result.w < 0.99)', '{', 'vec3 n = grad(p);', 'vec4 s = shade(p, ray, dist.id);', 'ray = reflect(ray, n);', 'p += n * 0.01;', 'result = combine(result, s);', '}', 'else', '{', 'break;', '}', '}', 'return combine(result, sky(ray));', '}', 'void main(void)', '{', 'float scale = 2.0 / max(resolution.x, resolution.y);', 'vec3 ray = vec3((gl_FragCoord.xy - resolution.xy / 2.0) * scale, 1);', '#ifdef AUTO_CAMERA', 'float yaw = cos(time) * -0.25 + 0.1;', 'float angle = time * 0.5;', '#else', 'float yaw = mouse.y - 0.15;', 'float angle = mouse.x * 8.0;', '#endif', 'vec3 from = (vec3(sin(angle), 0, cos(angle)) * cos(yaw) + vec3(0, sin(yaw) * 1.0, 0)) * 5.0;', '//vec3 from = origin + vec3((mouse.xy - vec2(0.5,0.0)) * vec2(15.0, 3.0), -5);', 'vec3 to = vec3(0, -1, 0);', 'vec3 up = vec3(0, 1, 0);', 'vec3 dir = normalize(to - from);', 'vec3 left = normalize(cross(up, dir));', 'mat3 rot = mat3(left, cross(dir, left), dir);', 'gl_FragColor = trace(from, rot * normalize(ray));', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  SphereTracer.prototype.update = function () {
    this.filter.update(this.game.input.activePointer);
  };
  SphereTracer.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SphereTracer',
    baseClasses: []
  };
  function SpiralGalaxy() {
    Phaser.State.call(this);
  }
  SpiralGalaxy.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform vec2      mouse;', '// https://www.shadertoy.com/view/MdXSzS', 'void main()', '{', 'vec2 uv = (gl_FragCoord.xy/resolution.xy)-.5;', 'float time = time * .1 + ((.25+.05*sin(time*.1))/(length(uv.xy)+.07))* 2.2;', 'float si = sin(time);', 'float co = cos(time);', 'mat2 ma = mat2(co, si, -si, co);', 'float c = 0.0;', 'float v1 = 0.0;', 'float v2 = 0.0;', 'for (int i = 0; i < 100; i++)', '{', 'float s = float(i) * .035;', 'vec3 p = s * vec3(uv, 0.0);', 'p.xy *= ma;', 'p += vec3(.22,.3, s-1.5-sin(time*.13)*.1);', 'for (int i = 0; i < 8; i++)', '{', 'p = abs(p) / dot(p,p) - 0.659;', '}', 'v1 += dot(p,p)*.0015 * (1.8+sin(length(uv.xy*13.0)+.5-time*.2));', 'v2 += dot(p,p)*.0015 * (1.5+sin(length(uv.xy*13.5)+2.2-time*.3));', 'c = length(p.xy*.5) * .35;', '}', 'float len = length(uv);', 'v1 *= smoothstep(.7, .0, len);', 'v2 *= smoothstep(.6, .0, len);', 'float re = clamp(c, 0.0, 1.0);', 'float gr = clamp((v1+c)*.25, 0.0, 1.0);', 'float bl = clamp(v2, 0.0, 1.0);', 'vec3 col = vec3(re, gr, bl) + smoothstep(0.15, .0, len) * .9;', 'gl_FragColor=vec4(col, 1.0);', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  SpiralGalaxy.prototype.update = function () {
    this.filter.update(this.game.input.mousePointer);
  };
  SpiralGalaxy.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpiralGalaxy',
    baseClasses: []
  };
  function StarfieldFilterExample() {
    Phaser.State.call(this);
  }
  StarfieldFilterExample.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform vec2      mouse;', 'const float Tau        = 6.2832;', 'const float speed  = .02;', 'const float density    = .04;', 'const float shape  = .04;', 'float random( vec2 seed ) {', 'return fract(sin(seed.x+seed.y*1e3)*1e5);', '}', 'float Cell(vec2 coord) {', 'vec2 cell = fract(coord) * vec2(.5,2.) - vec2(.0,.5);', 'return (1.-length(cell*2.-1.))*step(random(floor(coord)),density)*2.;', '}', 'void main( void ) {', 'vec2 p = gl_FragCoord.xy / resolution  - mouse;', 'float a = fract(atan(p.x, p.y) / Tau);', 'float d = length(p);', 'vec2 coord = vec2(pow(d, shape), a)*256.;', 'vec2 delta = vec2(-time*speed*256., .5);', '//vec2 delta = vec2(-time*speed*256., cos(length(p)*10.)*2e0+time*5e-1); // wavy wavy', 'float c = 0.;', 'for(int i=0; i<3; i++) {', 'coord += delta;', 'c = max(c, Cell(coord));', '}', 'gl_FragColor = vec4(c*d);', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  StarfieldFilterExample.prototype.update = function () {
    this.filter.update(this.game.input.activePointer);
  };
  StarfieldFilterExample.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'StarfieldFilterExample',
    baseClasses: []
  };
  function Starlight() {
    Phaser.State.call(this);
  }
  Starlight.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform vec2      mouse;', '// Posted by Trisomie21', '// modified by @hintz', '// from http://glsl.heroku.com/e#5248.0', '#define BLADES 6.0', '#define BIAS 0.1', '#define SHARPNESS 3.0', 'vec3 star(vec2 position, float t)', '{', 'float d2D = 4.0 / length(position) + t * 5.0;', 'float a2D = atan(position.y, position.x);', 'float qq = d2D * 0.1 + sin(d2D) * 0.2 * cos(a2D * 3.0) + sin(d2D * 0.2) * 0.3 * cos(a2D * 8.0)', '+ max(0.0, sin(d2D * 0.1 + 10.0) - 0.5) * cos(a2D * 20.0 + sin(d2D * 0.2) * 5.0)', '+ max(0.0, sin(d2D * 0.03 + 18.0) - 0.5) * cos(a2D * 5.0 + sin(d2D * 0.2) * 5.0);', 'vec3 color = vec3(sin(qq * 2.0), sin(qq * 3.0), sin(qq * 5.0));', 'color = color * 0.2;', 'float blade = clamp(pow(sin(atan(position.y,position.x )*BLADES)+BIAS, SHARPNESS), 0.0, 1.0);', 'color += mix(vec3(-0.34, -0.5, -1.0), vec3(0.0, -0.5, -1.0), (position.y + 1.0) * 0.25);', 'color += (vec3(0.95, 0.65, 0.30) * 1.0 / distance(vec2(0.0), position) * 0.075);', 'color += vec3(0.95, 0.45, 0.30) * min(1.0, blade *0.7) * (1.0 / distance(vec2(0.0, 0.0), position)*0.075);', 'return color;', '}', '// Tweaked from http://glsl.heroku.com/e#4982.0', 'float hash(float n) { return fract(sin(n)*43758.5453); }', 'float noise(in vec2 x)', '{', 'vec2 p = floor(x);', 'vec2 f = fract(x);', 'f = f*f*(3.0-2.0*f);', 'float n = p.x + p.y*57.0;', 'float res = mix(mix(hash(n+0.0), hash(n+1.0),f.x), mix(hash(n+57.0), hash(n+58.0),f.x),f.y);', 'return res;', '}', 'vec3 cloud(vec2 p)', '{', 'float f = 0.0;', 'f += 0.50000*noise(p*1.0*10.0);', 'f += 0.25000*noise(p*2.0*10.0);', 'f += 0.12500*noise(p*4.0*10.0);', 'f += 0.06250*noise(p*8.0*10.0);', 'f *= f;', 'return vec3(f*.65, f*.45, f)*.6;', '}', 'const float LAYERS = 7.0;', 'const float SPEED  = 0.005;', 'const float SCALE  = 8.0;', 'const float DENSITY    = 0.5;', 'const float BRIGHTNESS = 2.0;', 'vec2 ORIGIN    = resolution.xy*.5;', 'float rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }', 'void main(void)', '{', 'vec2   pos = gl_FragCoord.xy - ORIGIN;', 'float dist = length(pos) / resolution.y;', 'vec2 coord = vec2(pow(dist, 0.1), atan(pos.x, pos.y) / (3.1415926*2.0));', '// Nebulous cloud', 'vec3 color = cloud(pos/resolution);', '// Background stars', 'float a = pow((1.0-dist), 20.0);', 'float t = time*-0.05;', 'float r = coord.x - (t*SPEED);', 'float c = fract(a+coord.y + 0.0*0.543);', 'vec2  p = vec2(r, c*0.5)*4000.0;', 'vec2 uv = fract(p)*2.0-1.0;', 'float m = clamp((rand(floor(p))-0.9)*BRIGHTNESS, 0.0, 1.0);', 'color +=  clamp((1.0-length(uv*2.0))*m*dist, 0.0, 1.0);', '// Flying stars into black hole', 'for (float i = 1.0; i < (LAYERS+1.0); ++i)', '{', 'float a = pow((1.0-dist),20.0);', 'float t = i*10.0 + time*i*i;', 'float r = coord.x - (t*SPEED);', 'float c = fract(a+coord.y + i*.543);', 'vec2  p = vec2(r, c*.5)*SCALE*(LAYERS/(i*i));', 'vec2 uv = fract(p)*2.0-1.0;', 'float m = clamp((rand(floor(p))-DENSITY/i)*BRIGHTNESS, 0.0, 1.0);', 'color +=  clamp(star(uv*0.5, time+i*10.0)*m*dist, 0.0, 1.0);', '}', 'gl_FragColor = vec4(color, 1.0);', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  Starlight.prototype.update = function () {
    this.filter.update(this.game.input.mousePointer);
  };
  Starlight.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Starlight',
    baseClasses: []
  };
  function Tunnel() {
    Phaser.State.call(this);
  }
  Tunnel.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser.png');
    this.game.load.image('texture', 'assets/textures/ooze.png');
    this.game.load.script('filter', 'https://cdn.rawgit.com/photonstorm/phaser/master/filters/Tunnel.js');
  };
  Tunnel.prototype.create = function () {
    this.background = this.game.add.sprite(0, 0, 'texture');
    this.background.width = 800.0;
    this.background.height = 600.0;
    this.filter = this.game.add.filter('Tunnel', 800, 600, this.background.texture);
    this.filter.origin = 1.0;
    this.background.filters = [this.filter];
    var logo = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'phaser');
    logo.anchor.setTo(0.5, 0.5);
  };
  Tunnel.prototype.update = function () {
    this.filter.update();
  };
  Tunnel.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Tunnel',
    baseClasses: []
  };
  function Undersea() {
    Phaser.State.call(this);
  }
  Undersea.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform vec2      mouse;', '#define MAX_ITER 4', 'void main( void )', '{', 'vec2 v_texCoord = gl_FragCoord.xy / resolution;', 'vec2 p =  v_texCoord * 8.0 - vec2(20.0);', 'vec2 i = p;', 'float c = 1.0;', 'float inten = .05;', 'for (int n = 0; n < MAX_ITER; n++)', '{', 'float t = time * (1.0 - (3.0 / float(n+1)));', 'i = p + vec2(cos(t - i.x) + sin(t + i.y),', 'sin(t - i.y) + cos(t + i.x));', 'c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),', 'p.y / (cos(i.y+t)/inten)));', '}', 'c /= float(MAX_ITER);', 'c = 1.5 - sqrt(c);', 'vec4 texColor = vec4(0.0, 0.01, 0.015, 1.0);', 'texColor.rgb *= (1.0 / (1.0 - (c + 0.05)));', 'gl_FragColor = texColor;', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  Undersea.prototype.update = function () {
    this.filter.update(this.game.input.activePointer);
  };
  Undersea.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Undersea',
    baseClasses: []
  };
  function VduNoise() {
    Phaser.State.call(this);
  }
  VduNoise.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform vec2      mouse;', 'float noise(vec2 pos) {', 'return fract(sin(dot(pos, vec2(12.9898 - time,78.233 + time))) * 43758.5453);', '}', 'void main( void ) {', 'vec2 normalPos = gl_FragCoord.xy / resolution.xy;', 'float pos = (gl_FragCoord.y / resolution.y);', 'float mouse_dist = length(vec2((mouse.x - normalPos.x) * (resolution.x / resolution.y) , mouse.y - normalPos.y));', 'float distortion = clamp(1.0 - (mouse_dist + 0.1) * 3.0, 0.0, 1.0);', 'pos -= (distortion * distortion) * 0.1;', 'float c = sin(pos * 400.0) * 0.4 + 0.4;', 'c = pow(c, 0.2);', 'c *= 0.2;', 'float band_pos = fract(time * 0.1) * 3.0 - 1.0;', 'c += clamp( (1.0 - abs(band_pos - pos) * 10.0), 0.0, 1.0) * 0.1;', 'c += distortion * 0.08;', '// noise', 'c += (noise(gl_FragCoord.xy) - 0.5) * (0.09);', 'gl_FragColor = vec4( 0.0, c, 0.0, 1.0 );', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  VduNoise.prototype.update = function () {
    this.filter.update(this.game.input.mousePointer);
  };
  VduNoise.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'VduNoise',
    baseClasses: []
  };
  function VerticalBars() {
    Phaser.State.call(this);
  }
  VerticalBars.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', '#define PI 0.01', 'void main( void ) {', 'vec2 p = ( gl_FragCoord.xy / resolution.xy ) - 0.5;', 'float sx = 0.2*sin( 25.0 * p.y - time * 5.);', 'float dy = 0.9/ ( 50. * abs(p.y - sx));', 'gl_FragColor = vec4( (p.x + 0.5) * dy, 0.5 * dy, dy-1.65, 5.0 );', '}'];
    this.filter = new Phaser.Filter(this.game, null, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite = this.game.add.sprite();
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    this.sprite.filters = [this.filter];
  };
  VerticalBars.prototype.update = function () {
    this.filter.update(this.game.input.activePointer);
  };
  VerticalBars.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'VerticalBars',
    baseClasses: []
  };
  function Vortex() {
    Phaser.State.call(this);
  }
  Vortex.prototype.preload = function () {
    this.game.load.image('metal', 'assets/textures/metal.png');
  };
  function Vortex$create$ObjectLiteral(this$Vortex) {
    this.iChannel0 = new Vortex$create$ObjectLiteral$iChannel0$ObjectLiteral(this$Vortex);
  }
  function Vortex$create$ObjectLiteral$iChannel0$ObjectLiteral(this$Vortex) {
    this.type = 'sampler2D';
    this.value = this$Vortex.sprite.texture;
    this.textureData = new Vortex$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral();
  }
  function Vortex$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral() {
    this.repeat = true;
  }
  Vortex$create$ObjectLiteral$iChannel0$ObjectLiteral$textureData$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Vortex$create$ObjectLiteral$iChannel0$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Vortex$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Vortex.prototype.create = function () {
    var fragmentSrc = ['precision mediump float;', 'uniform float     time;', 'uniform vec2      resolution;', 'uniform sampler2D iChannel0;', '#ifdef GL_ES', 'precision highp float;', '#endif', '#define PI 3.1416', 'void main( void ) {', '//map the xy pixel co-ordinates to be between -1.0 to +1.0 on x and y axes', "//and alter the x value according to the aspect ratio so it isn't 'stretched'", 'vec2 p = (2.0 * gl_FragCoord.xy / resolution.xy - 1.0) * vec2(resolution.x / resolution.y, 1.0);', '//now, this is the usual part that uses the formula for texture mapping a ray-', '//traced cylinder using the vector p that describes the position of the pixel', '//from the centre.', 'vec2 uv = vec2(atan(p.y, p.x) * 1.0/PI, 1.0 / sqrt(dot(p, p))) * vec2(2.0, 1.0);', "//now this just 'warps' the texture read by altering the u coordinate depending on", '//the val of the v coordinate and the current time', 'uv.x += sin(2.0 * uv.y + time * 0.5);', "//this divison makes the color value 'darker' into the distance, otherwise", '//everything will be a uniform brightness and no sense of depth will be present.', 'vec3 c = texture2D(iChannel0, uv).xyz / (uv.y * 0.5 + 1.0);', 'gl_FragColor = vec4(c, 1.0);', '}'];
    this.sprite = this.game.add.sprite(0, 0, 'metal');
    this.sprite.width = 800.0;
    this.sprite.height = 600.0;
    var customUniforms = new Vortex$create$ObjectLiteral(this);
    this.filter = new Phaser.Filter(this.game, customUniforms, fragmentSrc);
    this.filter.setResolution(800, 600);
    this.sprite.filters = [this.filter];
  };
  Vortex.prototype.update = function () {
    this.filter.update();
  };
  Vortex.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Vortex',
    baseClasses: []
  };
  function WorldFilter() {
    Phaser.State.call(this);
  }
  WorldFilter.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser2.png');
    this.game.load.script('filter', 'https://cdn.rawgit.com/photonstorm/phaser/master/filters/pixi/DotScreenFilter.js');
  };
  function WorldFilter$create$ObjectLiteral() {
    this.y = '+300';
  }
  WorldFilter$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  WorldFilter.prototype.create = function () {
    var tmp$;
    tmp$ = 8 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var logo = this.game.add.sprite(this.game.world.randomX, -150 + this.game.world.randomY, 'phaser');
      logo.anchor.set(0.5);
      logo.scale.set(this.game.rnd.realInRange(0.2, 1));
      this.game.add.tween(logo).to(new WorldFilter$create$ObjectLiteral(), 1000 + this.game.rnd.between(1000, 2000), 'Bounce.easeOut', true, 0, -1, true);
    }
    this.game.world.filters = [new PIXI.DotScreenFilter()];
  };
  WorldFilter.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'WorldFilter',
    baseClasses: []
  };
  function Breakout() {
    Phaser.State.call(this);
    this.ballOnPaddle = true;
    this.lives = 3;
    this.score = 0;
  }
  Breakout.prototype.preload = function () {
    this.game.load.atlas('breakout', 'assets/games/breakout/breakout.png', 'assets/games/breakout/breakout.json');
    this.game.load.image('starfield', 'assets/misc/starfield.jpg');
  };
  function Breakout$create$ObjectLiteral() {
    this.font = '20px Arial';
    this.fill = '#ffffff';
    this.align = 'left';
  }
  Breakout$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function Breakout$create$ObjectLiteral_0() {
    this.font = '20px Arial';
    this.fill = '#ffffff';
    this.align = 'left';
  }
  Breakout$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function Breakout$create$ObjectLiteral_1() {
    this.font = '40px Arial';
    this.fill = '#ffffff';
    this.align = 'center';
  }
  Breakout$create$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Breakout.prototype.create = function () {
    var tmp$, tmp$_0;
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.physics.arcade.checkCollision.down = false;
    this.s = this.game.add.tileSprite(0, 0, 800, 600, 'starfield');
    this.bricks = this.game.add.group();
    this.bricks.enableBody = true;
    this.bricks.physicsBodyType = Phaser.Physics.ARCADE;
    var brick;
    tmp$ = 4 - 1;
    for (var y = 0; y <= tmp$; y++) {
      tmp$_0 = 15 - 1;
      for (var x = 0; x <= tmp$_0; x++) {
        brick = this.bricks.create(120 + x * 36, 100 + y * 52, 'breakout', 'brick_' + (y + 1) + '_1.png');
        brick.body.bounce.set(1);
        brick.body.immovable = true;
      }
    }
    this.paddle = this.game.add.sprite(this.game.world.centerX, 500, 'breakout', 'paddle_big.png');
    this.paddle.anchor.setTo(0.5, 0.5);
    this.game.physics.enable(this.paddle, Phaser.Physics.ARCADE);
    this.paddle.body.collideWorldBounds = true;
    this.paddle.body.bounce.set(1);
    this.paddle.body.immovable = true;
    this.ball = this.game.add.sprite(this.game.world.centerX, this.paddle.y - 16, 'breakout', 'ball_1.png');
    this.ball.anchor.set(0.5);
    this.ball.checkWorldBounds = true;
    this.game.physics.enable(this.ball, Phaser.Physics.ARCADE);
    this.ball.body.collideWorldBounds = true;
    this.ball.body.bounce.set(1);
    this.ball.animations.add('spin', ['ball_1.png', 'ball_2.png', 'ball_3.png', 'ball_4.png', 'ball_5.png'], 50, true, false);
    this.ball.events.onOutOfBounds.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'ballLost'), this);
    this.scoreText = this.game.add.text(32, 550, 'score: 0', new Breakout$create$ObjectLiteral());
    this.livesText = this.game.add.text(680, 550, 'lives: 3', new Breakout$create$ObjectLiteral_0());
    this.introText = this.game.add.text(this.game.world.centerX, 400, '- click to start -', new Breakout$create$ObjectLiteral_1());
    this.introText.anchor.setTo(0.5, 0.5);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'releaseBall'), this);
  };
  Breakout.prototype.update = function () {
    this.paddle.x = this.game.input.x;
    if (this.paddle.x < 24) {
      this.paddle.x = 24.0;
    }
     else if (this.paddle.x > this.game.width - 24) {
      this.paddle.x = this.game.width - 24;
    }
    if (this.ballOnPaddle) {
      this.ball.body.x = this.paddle.x;
    }
     else {
      this.game.physics.arcade.collide(this.ball, this.paddle, Kotlin.getBoundCallableRefForMemberFunction(this, 'ballHitPaddle_ge0c0c$'), null, this);
      this.game.physics.arcade.collide(this.ball, this.bricks, Kotlin.getBoundCallableRefForMemberFunction(this, 'ballHitBrick_ge0c0c$'), null, this);
    }
  };
  Breakout.prototype.releaseBall = function () {
    if (this.ballOnPaddle) {
      this.ballOnPaddle = false;
      this.ball.body.velocity.y = -300.0;
      this.ball.body.velocity.x = -75.0;
      this.ball.animations.play('spin');
      this.introText.visible = false;
    }
  };
  Breakout.prototype.ballLost = function () {
    this.lives--;
    this.livesText.text = 'lives: ' + this.lives;
    if (this.lives === 0) {
      this.gameOver();
    }
     else {
      this.ballOnPaddle = true;
      reset(this.ball, this.paddle.body.x + 16, this.paddle.y - 16);
      this.ball.animations.stop();
    }
  };
  Breakout.prototype.gameOver = function () {
    this.ball.body.velocity.setTo(0, 0);
    this.introText.text = 'Game Over!';
    this.introText.visible = true;
  };
  Breakout.prototype.ballHitBrick_ge0c0c$ = function (_ball, _brick) {
    _brick.kill();
    this.score += 10;
    this.scoreText.text = 'score: ' + this.score;
    if (this.bricks.countLiving() === 0) {
      this.score += 1000;
      this.scoreText.text = 'score: ' + this.score;
      this.introText.text = '- Next Level -';
      this.ballOnPaddle = true;
      this.ball.body.velocity.set(0);
      this.ball.x = this.paddle.x + 16;
      this.ball.y = this.paddle.y - 16;
      this.ball.animations.stop();
      this.bricks.callAll('revive');
    }
  };
  Breakout.prototype.ballHitPaddle_ge0c0c$ = function (_ball, _paddle) {
    var diff = 0.0;
    if (_ball.x < _paddle.x) {
      diff = _paddle.x - _ball.x;
      _ball.body.velocity.x = -10 * diff;
    }
     else if (_ball.x > _paddle.x) {
      diff = _ball.x - _paddle.x;
      _ball.body.velocity.x = 10 * diff;
    }
     else {
      _ball.body.velocity.x = 2 + random(Phaser.Math) * 8;
    }
  };
  Breakout.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Breakout',
    baseClasses: []
  };
  function Defender() {
    Phaser.State.call(this);
    this.bulletTime = 0.0;
    this.frameTime = 0.0;
    this.prevCamX = 0.0;
  }
  Defender.prototype.preload = function () {
    this.game.load.image('player', 'assets/games/defender/ship.png');
    this.game.load.image('star', 'assets/demoscene/star2.png');
    this.game.load.image('baddie', 'assets/sprites/space-baddie.png');
    this.game.load.atlas('lazer', 'assets/games/defender/laser.png', 'assets/games/defender/laser.json');
  };
  Defender.prototype.create = function () {
    var tmp$, tmp$_0;
    this.game.world.setBounds(0, 0, 800 * 4, 600);
    this.frames = toMutableList(Phaser.Animation.generateFrameNames('frame', 2, 30, '', 2));
    this.frames.add_vux3hl$(0, 'frame02');
    this.stars = this.game.add.group();
    tmp$ = 128 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.stars.create(this.game.world.randomX, this.game.world.randomY, 'star');
    }
    this.baddies = this.game.add.group();
    tmp$_0 = 16 - 1;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      this.baddies.create(this.game.world.randomX, this.game.world.randomY, 'baddie');
    }
    this.lazers = this.game.add.group();
    this.player = this.game.add.sprite(100, 300, 'player');
    this.player.anchor.x = 0.5;
    this.game.camera.follow(this.player, Phaser.Camera.FOLLOW_LOCKON, 0.1);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.fireButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
    this.prevCamX = this.game.camera.x;
  };
  Defender.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.player.x = this.player.x - 8;
      this.player.scale.x = -1.0;
    }
     else if (this.cursors.right.isDown) {
      this.player.x = this.player.x + 8;
      this.player.scale.x = 1.0;
    }
    if (this.cursors.up.isDown) {
      this.player.y = this.player.y - 8;
    }
     else if (this.cursors.down.isDown) {
      this.player.y = this.player.y + 8;
    }
    if (this.fireButton.isDown) {
      this.fireBullet();
    }
    this.lazers.forEachAlive(Kotlin.getBoundCallableRefForMemberFunction(this, 'updateBullets_okw7gk$'), this);
    this.prevCamX = this.game.camera.x;
  };
  Defender.prototype.updateBullets_okw7gk$ = function (lazer) {
    var camDelta = this.game.camera.x - this.prevCamX;
    lazer.x = lazer.x + camDelta;
    if (lazer.animations.frameName !== 'frame30') {
      lazer.animations.next();
    }
     else {
      if (lazer.scale.x === 1.0) {
        lazer.x = lazer.x + 16;
        if (lazer.x > this.game.camera.view.right - 224) {
          lazer.kill();
        }
      }
       else {
        lazer.x = lazer.x - 16;
        if (lazer.x < this.game.camera.view.left - 224) {
          lazer.kill();
        }
      }
    }
  };
  Defender.prototype.fireBullet = function () {
    if (this.game.time.now > this.bulletTime) {
      var lazer = this.lazers.getFirstDead(true, this.player.x + 24 * this.player.scale.x, this.player.y + 8, 'lazer');
      var tmp$ = lazer.animations;
      var $receiver = this.frames;
      tmp$.add('fire', Kotlin.kotlin.collections.copyToArray($receiver), 60);
      lazer.animations.frameName = 'frame02';
      lazer.scale.x = this.player.scale.x;
      if (lazer.scale.x === 1.0) {
      }
       else {
      }
      this.bulletTime = this.game.time.now + 250;
    }
  };
  Defender.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Defender',
    baseClasses: []
  };
  function Gemmatch() {
    Phaser.State.call(this);
    this.GEM_SIZE = 64;
    this.GEM_SPACING = 2;
    this.GEM_SIZE_SPACED = this.GEM_SIZE + this.GEM_SPACING;
    this.BOARD_COLS = 0;
    this.BOARD_ROWS = 0;
    this.MATCH_MIN = 3;
    this.selectedGem = null;
    this.selectedGemStartPos = new Gemmatch$selectedGemStartPos$ObjectLiteral();
    this.selectedGemTween = null;
    this.tempShiftedGem = null;
    this.allowInput = false;
  }
  Gemmatch.prototype.floor_14dthe$ = function (value) {
    return Phaser.Math.floorTo(value, null, null) | 0;
  };
  Gemmatch.prototype.floor_za3lpa$ = function (value) {
    return Phaser.Math.floorTo(value, null, null) | 0;
  };
  function Gemmatch$userData$ObjectLiteral() {
    this.posX = 0;
    this.posY = 0;
  }
  Gemmatch$userData$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Gemmatch.prototype.userData = function () {
    return new Gemmatch$userData$ObjectLiteral();
  };
  Gemmatch.prototype.get_posX_jtac9d$ = function ($receiver) {
    return $receiver.userData.posX;
  };
  Gemmatch.prototype.set_posX_1uguvh$ = function ($receiver, value) {
    $receiver.userData.posX = value;
  };
  Gemmatch.prototype.get_posY_jtac9d$ = function ($receiver) {
    return $receiver.userData.posY;
  };
  Gemmatch.prototype.set_posY_1uguvh$ = function ($receiver, value) {
    $receiver.userData.posY = value;
  };
  Gemmatch.prototype.preload = function () {
    this.game.load.spritesheet('GEMS', 'assets/sprites/diamonds32x5.png', this.GEM_SIZE, this.GEM_SIZE);
  };
  function Gemmatch$create$ObjectLiteral() {
    this.x = 0;
    this.y = 0;
  }
  Gemmatch$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Gemmatch.prototype.create = function () {
    this.spawnBoard();
    this.selectedGemStartPos = new Gemmatch$create$ObjectLiteral();
    this.allowInput = true;
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'slideGem_rxq7re$'), this);
  };
  Gemmatch.prototype.releaseGem = function () {
    if (this.tempShiftedGem == null) {
      this.selectedGem = null;
      return;
    }
    this.checkAndKillGemMatches();
    this.removeKilledGems();
    var dropGemDuration = this.dropGems();
    this.game.time.events.add(dropGemDuration * 100, Kotlin.getBoundCallableRefForMemberFunction(this, 'refillBoard'));
    this.allowInput = false;
    this.selectedGem = null;
    this.tempShiftedGem = null;
  };
  Gemmatch.prototype.slideGem_rxq7re$ = function (pointer, x, y) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9;
    var x_0 = x | 0;
    var y_0 = y | 0;
    if (this.selectedGem != null && pointer.isDown) {
      var cursorGemPosX = this.getGemPos_za3lpa$(x_0);
      var cursorGemPosY = this.getGemPos_za3lpa$(y_0);
      if (this.checkIfGemCanBeMovedHere_tjonv8$(this.selectedGemStartPos.x, this.selectedGemStartPos.y, cursorGemPosX, cursorGemPosY)) {
        if (cursorGemPosX !== this.get_posX_jtac9d$((tmp$ = this.selectedGem) != null ? tmp$ : Kotlin.throwNPE()) || cursorGemPosY !== this.get_posY_jtac9d$((tmp$_0 = this.selectedGem) != null ? tmp$_0 : Kotlin.throwNPE())) {
          if (this.selectedGemTween != null) {
            this.game.tweens.remove((tmp$_1 = this.selectedGemTween) != null ? tmp$_1 : Kotlin.throwNPE());
          }
          this.selectedGemTween = this.tweenGemPos_2lsrji$((tmp$_2 = this.selectedGem) != null ? tmp$_2 : Kotlin.throwNPE(), cursorGemPosX, cursorGemPosY);
          this.gems.bringToTop((tmp$_3 = this.selectedGem) != null ? tmp$_3 : Kotlin.throwNPE());
          if (this.tempShiftedGem != null) {
            var tempShiftedGem = (tmp$_4 = this.tempShiftedGem) != null ? tmp$_4 : Kotlin.throwNPE();
            this.swapGemPosition_ge0c0c$((tmp$_5 = this.selectedGem) != null ? tmp$_5 : Kotlin.throwNPE(), tempShiftedGem);
          }
          this.tempShiftedGem = this.getGem_vux9f0$(cursorGemPosX, cursorGemPosY);
          if (Kotlin.equals(this.tempShiftedGem, this.selectedGem)) {
            this.tempShiftedGem = null;
          }
           else {
            var tempShiftedGem_0 = (tmp$_6 = this.tempShiftedGem) != null ? tmp$_6 : Kotlin.throwNPE();
            this.tweenGemPos_2lsrji$(tempShiftedGem_0, this.get_posX_jtac9d$((tmp$_7 = this.selectedGem) != null ? tmp$_7 : Kotlin.throwNPE()), this.get_posY_jtac9d$((tmp$_8 = this.selectedGem) != null ? tmp$_8 : Kotlin.throwNPE()));
            this.swapGemPosition_ge0c0c$((tmp$_9 = this.selectedGem) != null ? tmp$_9 : Kotlin.throwNPE(), tempShiftedGem_0);
          }
        }
      }
    }
  };
  Gemmatch.prototype.spawnBoard = function () {
    var tmp$, tmp$_0;
    this.BOARD_COLS = this.floor_14dthe$(this.game.world.width / this.GEM_SIZE_SPACED);
    this.BOARD_ROWS = this.floor_14dthe$(this.game.world.height / this.GEM_SIZE_SPACED);
    this.gems = this.game.add.group();
    tmp$ = this.BOARD_COLS - 1;
    for (var i = 0; i <= tmp$; i++) {
      tmp$_0 = this.BOARD_ROWS - 1;
      for (var j = 0; j <= tmp$_0; j++) {
        var gem = this.gems.create(i * this.GEM_SIZE_SPACED, j * this.GEM_SIZE_SPACED, 'GEMS');
        gem.userData = this.userData();
        gem.name = 'gem' + i.toString() + 'x' + j.toString();
        gem.inputEnabled = true;
        gem.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'selectGem_okw7gk$'), this);
        gem.events.onInputUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'releaseGem'), this);
        this.randomizeGemColor_okw7gk$(gem);
        this.setGemPos_28f1bw$(gem, i, j);
      }
    }
  };
  Gemmatch.prototype.selectGem_okw7gk$ = function (gem) {
    if (this.allowInput) {
      this.selectedGem = gem;
      this.selectedGemStartPos.x = this.get_posX_jtac9d$(gem);
      this.selectedGemStartPos.y = this.get_posY_jtac9d$(gem);
    }
  };
  Gemmatch.prototype.getGem_vux9f0$ = function (posX, posY) {
    return this.gems.iterate('id', this.calcGemId_vux9f0$(posX, posY), Phaser.Group.RETURN_CHILD);
  };
  Gemmatch.prototype.getGemPos_za3lpa$ = function (coordinate) {
    return this.floor_za3lpa$(coordinate / this.GEM_SIZE_SPACED | 0);
  };
  Gemmatch.prototype.setGemPos_28f1bw$ = function (gem, posX, posY) {
    this.set_posX_1uguvh$(gem, posX);
    this.set_posY_1uguvh$(gem, posY);
    gem.id = this.calcGemId_vux9f0$(posX, posY);
  };
  Gemmatch.prototype.calcGemId_vux9f0$ = function (posX, posY) {
    return posX + posY * this.BOARD_COLS;
  };
  Gemmatch.prototype.getGemColor_okw7gk$ = function (gem) {
    return gem.frame;
  };
  Gemmatch.prototype.randomizeGemColor_okw7gk$ = function (gem) {
    gem.frame = this.game.rnd.integerInRange(0, gem.animations.frameTotal - 1);
  };
  Gemmatch.prototype.checkIfGemCanBeMovedHere_tjonv8$ = function (fromPosX, fromPosY, toPosX, toPosY) {
    if (toPosX < 0 || toPosX >= this.BOARD_COLS || toPosY < 0 || toPosY >= this.BOARD_ROWS) {
      return false;
    }
    if (fromPosX === toPosX && fromPosY >= toPosY - 1 && fromPosY <= toPosY + 1) {
      return true;
    }
    if (fromPosY === toPosY && fromPosX >= toPosX - 1 && fromPosX <= toPosX + 1) {
      return true;
    }
    return false;
  };
  Gemmatch.prototype.countSameColorGems_28f1bw$ = function (startGem, moveX, moveY) {
    var curX = this.get_posX_jtac9d$(startGem) + moveX;
    var curY = this.get_posY_jtac9d$(startGem) + moveY;
    var count = 0;
    while (curX >= 0 && curY >= 0 && curX < this.BOARD_COLS && curY < this.BOARD_ROWS && this.getGemColor_okw7gk$(this.getGem_vux9f0$(curX, curY)) === this.getGemColor_okw7gk$(startGem)) {
      count++;
      curX += moveX;
      curY += moveY;
    }
    return count;
  };
  Gemmatch.prototype.swapGemPosition_ge0c0c$ = function (gem1, gem2) {
    var tempPosX = this.get_posX_jtac9d$(gem1);
    var tempPosY = this.get_posY_jtac9d$(gem1);
    this.setGemPos_28f1bw$(gem1, this.get_posX_jtac9d$(gem2), this.get_posY_jtac9d$(gem2));
    this.setGemPos_28f1bw$(gem2, tempPosX, tempPosY);
  };
  Gemmatch.prototype.resetTempShiftedGem = function () {
    this.tempShiftedGem = null;
  };
  Gemmatch.prototype.checkAndKillGemMatches = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21, tmp$_22, tmp$_23, tmp$_24, tmp$_25;
    if (this.selectedGem == null)
      return;
    if (this.tempShiftedGem == null)
      return;
    var canKill = false;
    var countUp = this.countSameColorGems_28f1bw$((tmp$ = this.selectedGem) != null ? tmp$ : Kotlin.throwNPE(), 0, -1);
    var countDown = this.countSameColorGems_28f1bw$((tmp$_0 = this.selectedGem) != null ? tmp$_0 : Kotlin.throwNPE(), 0, 1);
    var countLeft = this.countSameColorGems_28f1bw$((tmp$_1 = this.selectedGem) != null ? tmp$_1 : Kotlin.throwNPE(), -1, 0);
    var countRight = this.countSameColorGems_28f1bw$((tmp$_2 = this.selectedGem) != null ? tmp$_2 : Kotlin.throwNPE(), 1, 0);
    var countHoriz = countLeft + countRight + 1;
    var countVert = countUp + countDown + 1;
    if (countVert >= this.MATCH_MIN) {
      this.killGemRange_tjonv8$(this.get_posX_jtac9d$((tmp$_3 = this.selectedGem) != null ? tmp$_3 : Kotlin.throwNPE()), this.get_posY_jtac9d$((tmp$_4 = this.selectedGem) != null ? tmp$_4 : Kotlin.throwNPE()) - countUp, this.get_posX_jtac9d$((tmp$_5 = this.selectedGem) != null ? tmp$_5 : Kotlin.throwNPE()), this.get_posY_jtac9d$((tmp$_6 = this.selectedGem) != null ? tmp$_6 : Kotlin.throwNPE()) + countDown);
      canKill = true;
    }
    if (countHoriz >= this.MATCH_MIN) {
      this.killGemRange_tjonv8$(this.get_posX_jtac9d$((tmp$_7 = this.selectedGem) != null ? tmp$_7 : Kotlin.throwNPE()) - countLeft, this.get_posY_jtac9d$((tmp$_8 = this.selectedGem) != null ? tmp$_8 : Kotlin.throwNPE()), this.get_posX_jtac9d$((tmp$_9 = this.selectedGem) != null ? tmp$_9 : Kotlin.throwNPE()) + countRight, this.get_posY_jtac9d$((tmp$_10 = this.selectedGem) != null ? tmp$_10 : Kotlin.throwNPE()));
      canKill = true;
    }
    countUp = this.countSameColorGems_28f1bw$((tmp$_11 = this.tempShiftedGem) != null ? tmp$_11 : Kotlin.throwNPE(), 0, -1);
    countDown = this.countSameColorGems_28f1bw$((tmp$_12 = this.tempShiftedGem) != null ? tmp$_12 : Kotlin.throwNPE(), 0, 1);
    countLeft = this.countSameColorGems_28f1bw$((tmp$_13 = this.tempShiftedGem) != null ? tmp$_13 : Kotlin.throwNPE(), -1, 0);
    countRight = this.countSameColorGems_28f1bw$((tmp$_14 = this.tempShiftedGem) != null ? tmp$_14 : Kotlin.throwNPE(), 1, 0);
    countHoriz = countLeft + countRight + 1;
    countVert = countUp + countDown + 1;
    if (countVert >= this.MATCH_MIN) {
      this.killGemRange_tjonv8$(this.get_posX_jtac9d$((tmp$_15 = this.tempShiftedGem) != null ? tmp$_15 : Kotlin.throwNPE()), this.get_posY_jtac9d$((tmp$_16 = this.tempShiftedGem) != null ? tmp$_16 : Kotlin.throwNPE()) - countUp, this.get_posX_jtac9d$((tmp$_17 = this.tempShiftedGem) != null ? tmp$_17 : Kotlin.throwNPE()), this.get_posY_jtac9d$((tmp$_18 = this.tempShiftedGem) != null ? tmp$_18 : Kotlin.throwNPE()) + countDown);
      canKill = true;
    }
    if (countHoriz >= this.MATCH_MIN) {
      this.killGemRange_tjonv8$(this.get_posX_jtac9d$((tmp$_19 = this.tempShiftedGem) != null ? tmp$_19 : Kotlin.throwNPE()) - countLeft, this.get_posY_jtac9d$((tmp$_20 = this.tempShiftedGem) != null ? tmp$_20 : Kotlin.throwNPE()), this.get_posX_jtac9d$((tmp$_21 = this.tempShiftedGem) != null ? tmp$_21 : Kotlin.throwNPE()) + countRight, this.get_posY_jtac9d$((tmp$_22 = this.tempShiftedGem) != null ? tmp$_22 : Kotlin.throwNPE()));
      canKill = true;
    }
    if (!canKill) {
      var gem = this.selectedGem;
      if (this.get_posX_jtac9d$(gem != null ? gem : Kotlin.throwNPE()) !== this.selectedGemStartPos.x || this.get_posY_jtac9d$(gem) !== this.selectedGemStartPos.y) {
        if (this.selectedGemTween != null) {
          this.game.tweens.remove((tmp$_23 = this.selectedGemTween) != null ? tmp$_23 : Kotlin.throwNPE());
        }
        this.selectedGemTween = this.tweenGemPos_2lsrji$(gem, this.selectedGemStartPos.x, this.selectedGemStartPos.y);
        if (this.tempShiftedGem != null) {
          this.tweenGemPos_2lsrji$((tmp$_24 = this.tempShiftedGem) != null ? tmp$_24 : Kotlin.throwNPE(), this.get_posX_jtac9d$(gem), this.get_posY_jtac9d$(gem));
        }
        this.swapGemPosition_ge0c0c$(gem, (tmp$_25 = this.tempShiftedGem) != null ? tmp$_25 : Kotlin.throwNPE());
        this.resetTempShiftedGem();
      }
    }
  };
  Gemmatch.prototype.killGemRange_tjonv8$ = function (fromX, fromY, toX, toY) {
    var fromX_0 = Phaser.Math.clamp(fromX, 0, this.BOARD_COLS - 1) | 0;
    var fromY_0 = Phaser.Math.clamp(fromY, 0, this.BOARD_ROWS - 1) | 0;
    var toX_0 = Phaser.Math.clamp(toX, 0, this.BOARD_COLS - 1) | 0;
    var toY_0 = Phaser.Math.clamp(toY, 0, this.BOARD_ROWS - 1) | 0;
    for (var i = fromX_0; i <= toX_0; i++) {
      for (var j = fromY_0; j <= toY_0; j++) {
        var gem = this.getGem_vux9f0$(i, j);
        gem.kill();
      }
    }
  };
  function Gemmatch$removeKilledGems$lambda(this$Gemmatch) {
    return function (gem) {
      if (!gem.alive) {
        this$Gemmatch.setGemPos_28f1bw$(gem, -1, -1);
      }
    };
  }
  Gemmatch.prototype.removeKilledGems = function () {
    this.gems.forEach(Gemmatch$removeKilledGems$lambda(this));
  };
  function Gemmatch$tweenGemPos$ObjectLiteral(closure$newPosX, this$Gemmatch, closure$newPosY) {
    this.x = closure$newPosX * this$Gemmatch.GEM_SIZE_SPACED;
    this.y = closure$newPosY * this$Gemmatch.GEM_SIZE_SPACED;
  }
  Gemmatch$tweenGemPos$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Gemmatch.prototype.tweenGemPos_2lsrji$ = function (gem, newPosX, newPosY, durationMultiplier) {
    if (durationMultiplier === void 0)
      durationMultiplier = 1;
    console.log('Tween ', gem.name, ' from ', this.get_posX_jtac9d$(gem), ',', this.get_posY_jtac9d$(gem), ' to ', newPosX, ',', newPosY);
    return this.game.add.tween(gem).to(new Gemmatch$tweenGemPos$ObjectLiteral(newPosX, this, newPosY), 100 * durationMultiplier, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
  };
  Gemmatch.prototype.dropGems = function () {
    var tmp$, tmp$_0;
    var dropRowCountMax = 0;
    tmp$ = this.BOARD_COLS - 1;
    for (var i = 0; i <= tmp$; i++) {
      var dropRowCount = 0;
      tmp$_0 = downTo(this.BOARD_ROWS - 1, 0).iterator();
      while (tmp$_0.hasNext()) {
        var j = tmp$_0.next();
        var gem = this.getGem_vux9f0$(i, j);
        if (gem == null) {
          dropRowCount++;
        }
         else if (dropRowCount > 0) {
          this.setGemPos_28f1bw$(gem, this.get_posX_jtac9d$(gem), this.get_posY_jtac9d$(gem) + dropRowCount);
          this.tweenGemPos_2lsrji$(gem, this.get_posX_jtac9d$(gem), this.get_posY_jtac9d$(gem), dropRowCount);
        }
      }
      dropRowCountMax = Phaser.Math.max(dropRowCount, dropRowCountMax) | 0;
    }
    return dropRowCountMax;
  };
  Gemmatch.prototype.refillBoard = function () {
    var tmp$, tmp$_0, tmp$_1;
    var maxGemsMissingFromCol = 0;
    tmp$ = this.BOARD_COLS - 1;
    for (var i = 0; i <= tmp$; i++) {
      var gemsMissingFromCol = 0;
      tmp$_0 = downTo(this.BOARD_ROWS - 1, 0).iterator();
      while (tmp$_0.hasNext()) {
        var j = tmp$_0.next();
        var gem = this.getGem_vux9f0$(i, j);
        if (gem == null) {
          gemsMissingFromCol++;
          gem = (tmp$_1 = this.gems.getFirstDead()) != null ? tmp$_1 : Kotlin.throwNPE();
          reset(gem, i * this.GEM_SIZE_SPACED, -gemsMissingFromCol * this.GEM_SIZE_SPACED);
          this.randomizeGemColor_okw7gk$(gem);
          this.setGemPos_28f1bw$(gem, i, j);
          this.tweenGemPos_2lsrji$(gem, this.get_posX_jtac9d$(gem), this.get_posY_jtac9d$(gem), gemsMissingFromCol * 2);
        }
      }
      maxGemsMissingFromCol = Phaser.Math.max(maxGemsMissingFromCol, gemsMissingFromCol) | 0;
    }
    this.game.time.events.add(maxGemsMissingFromCol * 2 * 100, Kotlin.getBoundCallableRefForMemberFunction(this, 'boardRefilled'));
  };
  Gemmatch.prototype.boardRefilled = function () {
    this.allowInput = true;
  };
  function Gemmatch$selectedGemStartPos$ObjectLiteral() {
  }
  Gemmatch$selectedGemStartPos$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Gemmatch.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Gemmatch',
    baseClasses: []
  };
  function Invaders() {
    Phaser.State.call(this);
    this.bulletTime = 0.0;
    this.score = 0;
    this.scoreString = '';
    this.enemyBullet = null;
    this.firingTimer = 0.0;
    this.livingEnemies = mutableListOf([]);
  }
  Invaders.prototype.preload = function () {
    this.game.load.image('bullet', 'assets/games/invaders/bullet.png');
    this.game.load.image('enemyBullet', 'assets/games/invaders/enemy-bullet.png');
    this.game.load.spritesheet('invader', 'assets/games/invaders/invader32x32x4.png', 32, 32);
    this.game.load.image('ship', 'assets/games/invaders/player.png');
    this.game.load.spritesheet('kaboom', 'assets/games/invaders/explode.png', 128, 128);
    this.game.load.image('starfield', 'assets/games/invaders/starfield.png');
    this.game.load.image('background', 'assets/games/starstruck/background2.png');
  };
  function Invaders$create$ObjectLiteral() {
    this.font = '34px Arial';
    this.fill = '#fff';
  }
  Invaders$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function Invaders$create$ObjectLiteral_0() {
    this.font = '34px Arial';
    this.fill = '#fff';
  }
  Invaders$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function Invaders$create$ObjectLiteral_1() {
    this.font = '84px Arial';
    this.fill = '#fff';
  }
  Invaders$create$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Invaders.prototype.create = function () {
    var tmp$;
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.starfield = this.game.add.tileSprite(0, 0, 800, 600, 'starfield');
    this.bullets = this.game.add.group();
    this.bullets.enableBody = true;
    this.bullets.physicsBodyType = Phaser.Physics.ARCADE;
    this.bullets.createMultiple(30, 'bullet');
    this.bullets.setAll('anchor.x', 0.5);
    this.bullets.setAll('anchor.y', 1);
    this.bullets.setAll('outOfBoundsKill', true);
    this.bullets.setAll('checkWorldBounds', true);
    this.enemyBullets = this.game.add.group();
    this.enemyBullets.enableBody = true;
    this.enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;
    this.enemyBullets.createMultiple(30, 'enemyBullet');
    this.enemyBullets.setAll('anchor.x', 0.5);
    this.enemyBullets.setAll('anchor.y', 1);
    this.enemyBullets.setAll('outOfBoundsKill', true);
    this.enemyBullets.setAll('checkWorldBounds', true);
    this.player = this.game.add.sprite(400, 500, 'ship');
    this.player.anchor.setTo(0.5, 0.5);
    this.game.physics.enable(this.player, Phaser.Physics.ARCADE);
    this.aliens = this.game.add.group();
    this.aliens.enableBody = true;
    this.aliens.physicsBodyType = Phaser.Physics.ARCADE;
    this.createAliens();
    this.scoreString = 'Score : ';
    this.scoreText = this.game.add.text(10, 10, this.scoreString + this.score, new Invaders$create$ObjectLiteral());
    this.lives = this.game.add.group();
    this.game.add.text(this.game.world.width - 100, 10, 'Lives : ', new Invaders$create$ObjectLiteral_0());
    this.stateText = this.game.add.text(this.game.world.centerX, this.game.world.centerY, ' ', new Invaders$create$ObjectLiteral_1());
    this.stateText.anchor.setTo(0.5, 0.5);
    this.stateText.visible = false;
    tmp$ = 3 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var ship = this.lives.create(this.game.world.width - 100 + 30 * i, 60, 'ship');
      ship.anchor.setTo(0.5, 0.5);
      ship.angle = 90.0;
      ship.alpha = 0.4;
    }
    this.explosions = this.game.add.group();
    this.explosions.createMultiple(30, 'kaboom');
    this.explosions.forEach(Kotlin.getBoundCallableRefForMemberFunction(this, 'setupInvader_okw7gk$'), this);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.fireButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
  };
  function Invaders$createAliens$ObjectLiteral() {
    this.x = 200;
  }
  Invaders$createAliens$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Invaders.prototype.createAliens = function () {
    var tmp$, tmp$_0;
    tmp$ = 4 - 1;
    for (var y = 0; y <= tmp$; y++) {
      tmp$_0 = 10 - 1;
      for (var x = 0; x <= tmp$_0; x++) {
        var alien = this.aliens.create(x * 48, y * 50, 'invader');
        alien.anchor.setTo(0.5, 0.5);
        alien.animations.add('fly', [0, 1, 2, 3], 20, true);
        alien.play('fly');
        alien.body.moves = false;
      }
    }
    this.aliens.x = 100.0;
    this.aliens.y = 50.0;
    var tween = this.game.add.tween(this.aliens).to(new Invaders$createAliens$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true, 0, 1000, true);
    tween.onLoop.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'descend'), this);
  };
  Invaders.prototype.setupInvader_okw7gk$ = function (invader) {
    invader.anchor.x = 0.5;
    invader.anchor.y = 0.5;
    invader.animations.add('kaboom');
  };
  Invaders.prototype.descend = function () {
    this.aliens.y = this.aliens.y + 10;
  };
  Invaders.prototype.update = function () {
    this.starfield.tilePosition.y = this.starfield.tilePosition.y + 2;
    if (this.player.alive) {
      this.player.body.velocity.setTo(0, 0);
      if (this.cursors.left.isDown) {
        this.player.body.velocity.x = -200.0;
      }
       else if (this.cursors.right.isDown) {
        this.player.body.velocity.x = 200.0;
      }
      if (this.fireButton.isDown) {
        this.fireBullet();
      }
      if (this.game.time.now > this.firingTimer) {
        this.enemyFires();
      }
      this.game.physics.arcade.overlap(this.bullets, this.aliens, Kotlin.getBoundCallableRefForMemberFunction(this, 'collisionHandler_ge0c0c$'), null, this);
      this.game.physics.arcade.overlap(this.enemyBullets, this.player, Kotlin.getBoundCallableRefForMemberFunction(this, 'enemyHitsPlayer_ge0c0c$'), null, this);
    }
  };
  Invaders.prototype.render = function () {
  };
  Invaders.prototype.collisionHandler_ge0c0c$ = function (bullet, alien) {
    var tmp$;
    bullet.kill();
    alien.kill();
    this.score += 20;
    this.scoreText.text = this.scoreString + this.score;
    var explosion = (tmp$ = this.explosions.getFirstExists(false)) != null ? tmp$ : Kotlin.throwNPE();
    reset(explosion, alien.body.x, alien.body.y);
    explosion.play('kaboom', 30, false, true);
    if (this.aliens.countLiving() === 0) {
      this.score += 1000;
      this.scoreText.text = this.scoreString + this.score;
      this.enemyBullets.callAll('kill', this);
      this.stateText.text = ' You Won, \n Click to restart';
      this.stateText.visible = true;
      this.game.input.onTap.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'restart'), this);
    }
  };
  Invaders.prototype.enemyHitsPlayer_ge0c0c$ = function (player, bullet) {
    var tmp$;
    bullet.kill();
    var live = this.lives.getFirstAlive();
    if (live != null) {
      live.kill();
    }
    var explosion = (tmp$ = this.explosions.getFirstExists(false)) != null ? tmp$ : Kotlin.throwNPE();
    reset(explosion, player.body.x, player.body.y);
    explosion.play('kaboom', 30, false, true);
    if (this.lives.countLiving() < 1) {
      player.kill();
      this.enemyBullets.callAll('kill');
      this.stateText.text = ' GAME OVER \n Click to restart';
      this.stateText.visible = true;
      this.game.input.onTap.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'restart'), this);
    }
  };
  function Invaders$enemyFires$lambda(this$Invaders) {
    return function (alien) {
      this$Invaders.livingEnemies.add_za3rmp$(alien);
    };
  }
  Invaders.prototype.enemyFires = function () {
    var tmp$, tmp$_0, tmp$_1;
    this.enemyBullet = (tmp$ = this.enemyBullets.getFirstExists(false)) != null ? tmp$ : Kotlin.throwNPE();
    this.livingEnemies.clear();
    this.aliens.forEachAlive(Invaders$enemyFires$lambda(this));
    if (this.enemyBullet != null && this.livingEnemies.size > 0) {
      var random_0 = this.game.rnd.integerInRange(0, this.livingEnemies.size - 1);
      var shooter = this.livingEnemies.get_za3lpa$(random_0);
      reset((tmp$_0 = this.enemyBullet) != null ? tmp$_0 : Kotlin.throwNPE(), shooter.body.x, shooter.body.y);
      this.game.physics.arcade.moveToObject((tmp$_1 = this.enemyBullet) != null ? tmp$_1 : Kotlin.throwNPE(), this.player, 120);
      this.firingTimer = this.game.time.now + 2000;
    }
  };
  Invaders.prototype.fireBullet = function () {
    if (this.game.time.now > this.bulletTime) {
      var bullet = this.bullets.getFirstExists(false);
      if (bullet != null) {
        reset(bullet, this.player.x, this.player.y + 8);
        bullet.body.velocity.y = -400.0;
        this.bulletTime = this.game.time.now + 200;
      }
    }
  };
  Invaders.prototype.resetBullet_wk0l8n$ = function (bullet) {
    bullet.kill();
  };
  Invaders.prototype.restart = function () {
    this.lives.callAll('revive');
    this.aliens.removeAll();
    this.createAliens();
    revive(this.player);
    this.stateText.visible = false;
  };
  Invaders.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Invaders',
    baseClasses: []
  };
  function MatchingPairs() {
    Phaser.State.call(this);
    this.timeCheck = 0.0;
    this.flipFlag = false;
    this.startList = mutableListOf([]);
    this.squareList = mutableListOf([]);
    this.currentNum = 0;
    this.masterCounter = 0;
    this.squareCounter = 0;
    this.currentTilePosition = 0;
    this.tileBack = 25;
    this.timesUp = '+';
    this.youWin = '+';
    this.myCountdownSeconds = 0.0;
  }
  MatchingPairs.prototype.preload = function () {
    this.game.load.tilemap('matching', 'assets/tilemaps/maps/phaser_tiles.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/phaser_tiles.png');
  };
  MatchingPairs.prototype.create = function () {
    this.map = this.game.add.tilemap('matching');
    this.map.addTilesetImage('Desert', 'tiles');
    this.layer = this.map.createLayer('Ground');
    this.marker = this.game.add.graphics();
    this.marker.lineStyle(2, 65280, 1);
    this.marker.drawRect(0, 0, 100, 100);
    this.randomizeTiles();
  };
  MatchingPairs.prototype.update = function () {
    this.countDownTimer();
    if (this.layer.getTileX(this.game.input.activePointer.worldX) <= 5) {
      this.marker.x = this.layer.getTileX(this.game.input.activePointer.worldX) * 100.0;
      this.marker.y = this.layer.getTileY(this.game.input.activePointer.worldY) * 100.0;
    }
    if (Kotlin.equals(this.flipFlag, true)) {
      if (this.game.time.totalElapsedSeconds() - this.timeCheck > 0.5) {
        this.flipBack();
      }
    }
     else {
      this.processClick();
    }
  };
  MatchingPairs.prototype.countDownTimer = function () {
    var timeLimit = 120;
    var mySeconds = this.game.time.totalElapsedSeconds();
    this.myCountdownSeconds = timeLimit - mySeconds;
    if (this.myCountdownSeconds <= 0) {
      this.timesUp = 'Time is up!';
      this.myCountdownSeconds = 0.0;
    }
  };
  MatchingPairs.prototype.processClick = function () {
    var tmp$;
    this.currentTile = (tmp$ = this.map.getTile(this.layer.getTileX(this.marker.x), this.layer.getTileY(this.marker.y))) != null ? tmp$ : Kotlin.throwNPE();
    this.currentTilePosition = ((this.layer.getTileY(this.game.input.activePointer.worldY) | 0) + 1) * 6 - (6 - ((this.layer.getTileX(this.game.input.activePointer.worldX) | 0) + 1));
    if (this.game.input.mousePointer.isDown) {
      if (this.currentTile.index === this.tileBack) {
        this.currentNum = this.squareList.get_za3lpa$(this.currentTilePosition - 1);
        this.flipOver();
        this.squareCounter++;
        if (this.squareCounter === 2) {
          this.squareCounter = 0;
          this.square2Num = this.currentNum;
          if (Kotlin.equals(this.square1Num, this.square2Num)) {
            this.masterCounter++;
            if (this.masterCounter === 18) {
              this.youWin = 'Got them all!';
            }
          }
           else {
            this.savedSquareX2 = this.layer.getTileX(this.marker.x);
            this.savedSquareY2 = this.layer.getTileY(this.marker.y);
            this.flipFlag = true;
            this.timeCheck = this.game.time.totalElapsedSeconds();
          }
        }
         else {
          this.savedSquareX1 = this.layer.getTileX(this.marker.x);
          this.savedSquareY1 = this.layer.getTileY(this.marker.y);
          this.square1Num = this.currentNum;
        }
      }
    }
  };
  MatchingPairs.prototype.flipOver = function () {
    this.map.putTile(this.currentNum, this.layer.getTileX(this.marker.x), this.layer.getTileY(this.marker.y));
  };
  MatchingPairs.prototype.flipBack = function () {
    this.flipFlag = false;
    this.map.putTile(this.tileBack, this.savedSquareX1, this.savedSquareY1);
    this.map.putTile(this.tileBack, this.savedSquareX2, this.savedSquareY2);
  };
  MatchingPairs.prototype.randomizeTiles = function () {
    for (var num = 1; num <= 18; num++) {
      this.startList.add_za3rmp$(num);
    }
    for (var num_0 = 1; num_0 <= 18; num_0++) {
      this.startList.add_za3rmp$(num_0);
    }
    var myString1 = this.startList.toString();
    for (var i = 1; i <= 36; i++) {
      var randomPosition = this.game.rnd.integerInRange(0, this.startList.size - 1);
      var thisNumber = this.startList.get_za3lpa$(randomPosition);
      this.squareList.add_za3rmp$(thisNumber);
      var a = this.startList.indexOf_za3rmp$(thisNumber);
      this.startList.removeAt_za3lpa$(a);
    }
    var myString2 = this.squareList.toString();
    for (var col = 0; col <= 5; col++) {
      for (var row = 0; row <= 5; row++) {
        this.map.putTile(this.tileBack, col, row);
      }
    }
  };
  MatchingPairs.prototype.getHiddenTile = function () {
    var index = this.currentTilePosition - 1;
    if (index < 0 || index > this.squareList.size)
      return 0;
    var thisTile = this.squareList.get_za3lpa$(index);
    return thisTile;
  };
  MatchingPairs.prototype.render = function () {
    this.game.debug.text(this.timesUp, 620, 208, 'rgb(0,255,0)');
    this.game.debug.text(this.youWin, 620, 240, 'rgb(0,255,0)');
    this.game.debug.text('Time: ' + this.myCountdownSeconds, 620, 15, 'rgb(0,255,0)');
    this.game.debug.text('Matched Pairs: ' + this.masterCounter, 620, 304, 'rgb(0,0,255)');
    this.game.debug.text('LayerX: ' + this.layer.getTileX(this.marker.x), 620, 80, 'rgb(255,0,0)');
    this.game.debug.text('LayerY: ' + this.layer.getTileY(this.marker.y), 620, 112, 'rgb(255,0,0)');
    this.game.debug.text('Tile Position: ' + this.currentTilePosition, 620, 144, 'rgb(255,0,0)');
    this.game.debug.text('Hidden Tile: ' + this.getHiddenTile(), 620, 176, 'rgb(255,0,0)');
  };
  MatchingPairs.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MatchingPairs',
    baseClasses: []
  };
  function Simon() {
    Phaser.State.call(this);
    this.N = 1;
    this.userCount = 0;
    this.currentCount = 0;
    this.sequenceCount = 16;
    this.sequenceList = mutableListOf([]);
    this.simonSez = false;
    this.timeCheck = 0.0;
    this.litSquare = 0;
    this.winner = false;
    this.loser = false;
    this.intro = false;
  }
  Simon.prototype.preload = function () {
    this.game.load.spritesheet('item', 'assets/buttons/number-buttons.png', 160, 160);
  };
  function Simon$create$lambda(this$Simon) {
    return function () {
      this$Simon.simonSequence();
      this$Simon.intro = false;
    };
  }
  Simon.prototype.create = function () {
    var tmp$, tmp$_0;
    this.simon = this.game.add.group();
    var item;
    tmp$ = 3 - 1;
    for (var i = 0; i <= tmp$; i++) {
      item = this.simon.create(150 + 168 * i, 150, 'item', i);
      item.inputEnabled = true;
      item.input.start(0, true);
      item.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'select_xslgx6$'));
      item.events.onInputUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'release_xslgx6$'));
      item.events.onInputOut.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'moveOff_xslgx6$'));
      this.simon.getAt(i).alpha = 0;
    }
    tmp$_0 = 3 - 1;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      item = this.simon.create(150 + 168 * i_0, 318, 'item', i_0 + 3);
      item.inputEnabled = true;
      item.input.start(0, true);
      item.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'select_xslgx6$'));
      item.events.onInputUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'release_xslgx6$'));
      item.events.onInputOut.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'moveOff_xslgx6$'));
      this.simon.getAt(i_0 + 3).alpha = 0;
    }
    this.introTween();
    this.setUp();
    window.setTimeout(Simon$create$lambda(this), 6000);
  };
  function Simon$restart$lambda(this$Simon) {
    return function () {
      this$Simon.simonSequence();
      this$Simon.intro = false;
    };
  }
  Simon.prototype.restart = function () {
    this.N = 1;
    this.userCount = 0;
    this.currentCount = 0;
    this.sequenceList.clear();
    this.winner = false;
    this.loser = false;
    this.introTween();
    this.setUp();
    window.setTimeout(Simon$restart$lambda(this), 6000);
  };
  function Simon$introTween$ObjectLiteral() {
    this.alpha = 1;
  }
  Simon$introTween$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function Simon$introTween$ObjectLiteral_0() {
    this.alpha = 0.25;
  }
  Simon$introTween$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Simon.prototype.introTween = function () {
    var tmp$;
    this.intro = true;
    tmp$ = 6 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var flashing = this.game.add.tween(this.simon.getAt(i)).to(new Simon$introTween$ObjectLiteral(), 500, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true, 0, 4, true);
      var final = this.game.add.tween(this.simon.getAt(i)).to(new Simon$introTween$ObjectLiteral_0(), 500, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
      flashing.chain(final);
      flashing.start();
    }
  };
  function Simon$update$lambda(this$Simon) {
    return function () {
      if (this$Simon.currentCount < this$Simon.N) {
        this$Simon.game.paused = false;
        this$Simon.simonSequence();
      }
       else {
        this$Simon.simonSez = false;
        this$Simon.game.paused = false;
      }
    };
  }
  Simon.prototype.update = function () {
    if (this.simonSez) {
      if (this.game.time.now - this.timeCheck > 700 - this.N * 40) {
        this.simon.getAt(this.litSquare).alpha = 0.25;
        this.game.paused = true;
        window.setTimeout(Simon$update$lambda(this), 400 - this.N * 20);
      }
    }
  };
  function Simon$playerSequence$lambda(this$Simon) {
    return function () {
      this$Simon.restart();
    };
  }
  function Simon$playerSequence$lambda_0(this$Simon) {
    return function () {
      this$Simon.restart();
    };
  }
  Simon.prototype.playerSequence_okw7gk$ = function (selected) {
    var correctSquare = this.sequenceList.get_za3lpa$(this.userCount);
    this.userCount++;
    var thisSquare = this.simon.getIndex(selected);
    if (Kotlin.equals(thisSquare, correctSquare)) {
      if (this.userCount === this.N) {
        if (this.N === this.sequenceCount) {
          this.winner = true;
          window.setTimeout(Simon$playerSequence$lambda(this), 3000);
        }
         else {
          this.userCount = 0;
          this.currentCount = 0;
          this.N++;
          this.simonSez = true;
        }
      }
    }
     else {
      this.loser = true;
      window.setTimeout(Simon$playerSequence$lambda_0(this), 3000);
    }
  };
  Simon.prototype.simonSequence = function () {
    this.simonSez = true;
    this.litSquare = this.sequenceList.get_za3lpa$(this.currentCount);
    this.simon.getAt(this.litSquare).alpha = 1;
    this.timeCheck = this.game.time.now;
    this.currentCount++;
  };
  Simon.prototype.setUp = function () {
    var tmp$;
    tmp$ = this.sequenceCount - 1;
    for (var i = 0; i <= tmp$; i++) {
      var thisSquare = this.game.rnd.integerInRange(0, 5);
      this.sequenceList.add_za3rmp$(thisSquare);
    }
  };
  Simon.prototype.select_xslgx6$ = function (item, pointer) {
    if (!this.simonSez && !this.intro && !this.loser && !this.winner) {
      item.alpha = 1.0;
    }
  };
  Simon.prototype.release_xslgx6$ = function (item, pointer) {
    if (!this.simonSez && !this.intro && !this.loser && !this.winner) {
      item.alpha = 0.25;
      this.playerSequence_okw7gk$(item);
    }
  };
  Simon.prototype.moveOff_xslgx6$ = function (item, pointer) {
    if (!this.simonSez && !this.intro && !this.loser && !this.winner) {
      item.alpha = 0.25;
    }
  };
  Simon.prototype.render = function () {
    if (!this.intro) {
      if (this.simonSez) {
        this.game.debug.text('Simon Sez', 360, 96, 'rgb(255,0,0)');
      }
       else {
        this.game.debug.text('Your Turn', 360, 96, 'rgb(0,255,0)');
      }
    }
     else {
      this.game.debug.text('Get Ready', 360, 96, 'rgb(0,0,255)');
    }
    if (this.winner) {
      this.game.debug.text('You Win!', 360, 32, 'rgb(0,0,255)');
    }
     else if (this.loser) {
      this.game.debug.text('You Lose!', 360, 32, 'rgb(0,0,255)');
    }
  };
  Simon.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Simon',
    baseClasses: []
  };
  function SlidingPuzzle() {
    Phaser.State.call(this);
    this.PIECE_WIDTH = 200;
    this.PIECE_HEIGHT = 200;
    this.BOARD_COLS = 0;
    this.BOARD_ROWS = 0;
    this.piecesAmount = 0;
    this.shuffledIndexArray = mutableListOf([]);
  }
  SlidingPuzzle.prototype.floor_14dthe$ = function (value) {
    return Phaser.Math.floorTo(value, null, null) | 0;
  };
  function SlidingPuzzle$userData$ObjectLiteral() {
    this.posX = 0;
    this.posY = 0;
    this.currentIndex = 0;
    this.destIndex = 0;
    this.black = false;
  }
  SlidingPuzzle$userData$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SlidingPuzzle.prototype.userData = function () {
    return new SlidingPuzzle$userData$ObjectLiteral();
  };
  SlidingPuzzle.prototype.get_posX_jtac9d$ = function ($receiver) {
    return $receiver.userData.posX;
  };
  SlidingPuzzle.prototype.set_posX_1uguvh$ = function ($receiver, value) {
    $receiver.userData.posX = value;
  };
  SlidingPuzzle.prototype.get_posY_jtac9d$ = function ($receiver) {
    return $receiver.userData.posY;
  };
  SlidingPuzzle.prototype.set_posY_1uguvh$ = function ($receiver, value) {
    $receiver.userData.posY = value;
  };
  SlidingPuzzle.prototype.get_currentIndex_jtac9d$ = function ($receiver) {
    return $receiver.userData.currentIndex;
  };
  SlidingPuzzle.prototype.set_currentIndex_1uguvh$ = function ($receiver, value) {
    $receiver.userData.currentIndex = value;
  };
  SlidingPuzzle.prototype.get_destIndex_jtac9d$ = function ($receiver) {
    return $receiver.userData.destIndex;
  };
  SlidingPuzzle.prototype.set_destIndex_1uguvh$ = function ($receiver, value) {
    $receiver.userData.destIndex = value;
  };
  SlidingPuzzle.prototype.get_black_jtac9d$ = function ($receiver) {
    return $receiver.userData.black;
  };
  SlidingPuzzle.prototype.set_black_27zap8$ = function ($receiver, value) {
    $receiver.userData.black = value;
  };
  SlidingPuzzle.prototype.preload = function () {
    this.game.load.spritesheet('background', 'assets/games/sliding-puzzle/bl.jpg', this.PIECE_WIDTH, this.PIECE_HEIGHT);
  };
  SlidingPuzzle.prototype.create = function () {
    this.prepareBoard();
  };
  SlidingPuzzle.prototype.prepareBoard = function () {
    var tmp$, tmp$_0;
    var piecesIndex = 0;
    var piece;
    this.BOARD_COLS = this.floor_14dthe$(this.game.world.width / this.PIECE_WIDTH);
    this.BOARD_ROWS = this.floor_14dthe$(this.game.world.height / this.PIECE_HEIGHT);
    this.piecesAmount = this.BOARD_COLS * this.BOARD_ROWS;
    this.shuffledIndexArray = this.createShuffledIndexArray();
    this.piecesGroup = this.game.add.group();
    tmp$ = this.BOARD_ROWS - 1;
    for (var i = 0; i <= tmp$; i++) {
      tmp$_0 = this.BOARD_COLS - 1;
      for (var j = 0; j <= tmp$_0; j++) {
        if (this.shuffledIndexArray.get_za3lpa$(piecesIndex) > 0) {
          piece = this.piecesGroup.create(j * this.PIECE_WIDTH, i * this.PIECE_HEIGHT, 'background', this.shuffledIndexArray.get_za3lpa$(piecesIndex));
          piece.userData = this.userData();
        }
         else {
          piece = this.piecesGroup.create(j * this.PIECE_WIDTH, i * this.PIECE_HEIGHT);
          piece.userData = this.userData();
          this.set_black_27zap8$(piece, true);
        }
        piece.name = 'piece' + i.toString() + 'x' + j.toString();
        this.set_currentIndex_1uguvh$(piece, piecesIndex);
        this.set_destIndex_1uguvh$(piece, this.shuffledIndexArray.get_za3lpa$(piecesIndex));
        piece.inputEnabled = true;
        piece.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'selectPiece_okw7gk$'), this);
        this.set_posX_1uguvh$(piece, j);
        this.set_posY_1uguvh$(piece, i);
        piecesIndex++;
      }
    }
  };
  SlidingPuzzle.prototype.selectPiece_okw7gk$ = function (piece) {
    var blackPiece = this.canMove_okw7gk$(piece);
    if (blackPiece != null) {
      this.movePiece_ge0c0c$(piece, blackPiece);
    }
  };
  SlidingPuzzle.prototype.canMove_okw7gk$ = function (piece) {
    var foundBlackElem = {v: null};
    var $receiver = this.piecesGroup.children;
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
      var element = $receiver[tmp$];
      var tmp$_0;
      if (this.get_posX_jtac9d$(element) === this.get_posX_jtac9d$(piece) - 1 && this.get_posY_jtac9d$(element) === this.get_posY_jtac9d$(piece) && this.get_black_jtac9d$(element) || (this.get_posX_jtac9d$(element) === this.get_posX_jtac9d$(piece) + 1 && this.get_posY_jtac9d$(element) === this.get_posY_jtac9d$(piece) && this.get_black_jtac9d$(element)) || (this.get_posY_jtac9d$(element) === this.get_posY_jtac9d$(piece) - 1 && this.get_posX_jtac9d$(element) === this.get_posX_jtac9d$(piece) && this.get_black_jtac9d$(element)) || (this.get_posY_jtac9d$(element) === this.get_posY_jtac9d$(piece) + 1 && this.get_posX_jtac9d$(element) === this.get_posX_jtac9d$(piece) && this.get_black_jtac9d$(element))) {
        foundBlackElem.v = Kotlin.isType(tmp$_0 = element, Phaser.Sprite) ? tmp$_0 : Kotlin.throwCCE();
      }
    }
    return foundBlackElem.v;
  };
  function SlidingPuzzle$movePiece$ObjectLiteral(closure$piece, this$SlidingPuzzle) {
    this.posX = this$SlidingPuzzle.get_posX_jtac9d$(closure$piece);
    this.posY = this$SlidingPuzzle.get_posY_jtac9d$(closure$piece);
    this.currentIndex = this$SlidingPuzzle.get_currentIndex_jtac9d$(closure$piece);
  }
  SlidingPuzzle$movePiece$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function SlidingPuzzle$movePiece$ObjectLiteral_0(closure$blackPiece, this$SlidingPuzzle) {
    this.x = this$SlidingPuzzle.get_posX_jtac9d$(closure$blackPiece) * this$SlidingPuzzle.PIECE_WIDTH;
    this.y = this$SlidingPuzzle.get_posY_jtac9d$(closure$blackPiece) * this$SlidingPuzzle.PIECE_HEIGHT;
  }
  SlidingPuzzle$movePiece$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SlidingPuzzle.prototype.movePiece_ge0c0c$ = function (piece, blackPiece) {
    var tmpPiece = new SlidingPuzzle$movePiece$ObjectLiteral(piece, this);
    this.game.add.tween(piece).to(new SlidingPuzzle$movePiece$ObjectLiteral_0(blackPiece, this), 300, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
    this.set_posX_1uguvh$(piece, this.get_posX_jtac9d$(blackPiece));
    this.set_posY_1uguvh$(piece, this.get_posY_jtac9d$(blackPiece));
    this.set_currentIndex_1uguvh$(piece, this.get_currentIndex_jtac9d$(blackPiece));
    piece.name = 'piece' + this.get_posX_jtac9d$(piece).toString() + 'x' + this.get_posY_jtac9d$(piece).toString();
    this.set_posX_1uguvh$(blackPiece, tmpPiece.posX);
    this.set_posY_1uguvh$(blackPiece, tmpPiece.posY);
    this.set_currentIndex_1uguvh$(blackPiece, tmpPiece.currentIndex);
    blackPiece.name = 'piece' + this.get_posX_jtac9d$(blackPiece).toString() + 'x' + this.get_posY_jtac9d$(blackPiece).toString();
    this.checkIfFinished();
  };
  SlidingPuzzle.prototype.checkIfFinished = function () {
    var isFinished = {v: true};
    var $receiver = this.piecesGroup.children;
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
      var element = $receiver[tmp$];
      if (this.get_currentIndex_jtac9d$(element) !== this.get_destIndex_jtac9d$(element)) {
        isFinished.v = false;
        return;
      }
    }
    if (isFinished.v) {
      this.showFinishedText();
    }
  };
  SlidingPuzzle.prototype.showFinishedText = function () {
    var style = TextStyle('40px Arial', void 0, void 0, void 0, void 0, void 0, '#FFF', 'center');
    var text_0 = this.game.add.text(this.game.world.centerX, this.game.world.centerY, 'Congratulations! \nYou made it!', style);
    text_0.anchor.set(0.5);
  };
  SlidingPuzzle.prototype.createShuffledIndexArray = function () {
    var tmp$;
    var indexArray = mutableListOf([]);
    tmp$ = this.piecesAmount - 1;
    for (var i = 0; i <= tmp$; i++) {
      indexArray.add_za3rmp$(i);
    }
    return this.shuffle_hens66$(indexArray);
  };
  SlidingPuzzle.prototype.shuffle_hens66$ = function (array) {
    var counter = array.size;
    var temp = 0;
    var index = 0;
    while (counter > 0) {
      index = this.floor_14dthe$(random(Phaser.Math) * counter);
      counter--;
      temp = array.get_za3lpa$(counter);
      array.set_vux3hl$(counter, array.get_za3lpa$(index));
      array.set_vux3hl$(index, temp);
    }
    return array;
  };
  SlidingPuzzle.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SlidingPuzzle',
    baseClasses: []
  };
  function Starstruck() {
    Phaser.State.call(this);
    this.facing = 'left';
    this.jumpTimer = 0.0;
  }
  Starstruck.prototype.preload = function () {
    this.game.load.tilemap('level1', 'assets/games/starstruck/level1.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles-1', 'assets/games/starstruck/tiles-1.png');
    this.game.load.spritesheet('dude', 'assets/games/starstruck/dude.png', 32, 48);
    this.game.load.spritesheet('droid', 'assets/games/starstruck/droid.png', 32, 32);
    this.game.load.image('starSmall', 'assets/games/starstruck/star.png');
    this.game.load.image('starBig', 'assets/games/starstruck/star2.png');
    this.game.load.image('background', 'assets/games/starstruck/background2.png');
  };
  Starstruck.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#000000';
    this.bg = this.game.add.tileSprite(0, 0, 800, 600, 'background');
    this.bg.fixedToCamera = true;
    this.map = this.game.add.tilemap('level1');
    this.map.addTilesetImage('tiles-1');
    this.map.setCollisionByExclusion([13, 14, 15, 16, 46, 47, 48, 49, 50, 51]);
    this.layer = this.map.createLayer('Tile Layer 1');
    this.layer.resizeWorld();
    this.game.physics.arcade.gravity.y = 250.0;
    this.player = this.game.add.sprite(32, 32, 'dude');
    this.game.physics.enable(this.player, Phaser.Physics.ARCADE);
    this.player.body.bounce.y = 0.2;
    this.player.body.collideWorldBounds = true;
    this.player.body.setSize(20, 32, 5, 16);
    this.player.animations.add('left', [0, 1, 2, 3], 10, true);
    this.player.animations.add('turn', [4], 20, true);
    this.player.animations.add('right', [5, 6, 7, 8], 10, true);
    this.game.camera.follow(this.player);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.jumpButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
  };
  Starstruck.prototype.update = function () {
    this.game.physics.arcade.collide(this.player, this.layer);
    this.player.body.velocity.x = 0.0;
    if (this.cursors.left.isDown) {
      this.player.body.velocity.x = -150.0;
      if (!Kotlin.equals(this.facing, 'left')) {
        this.player.animations.play('left');
        this.facing = 'left';
      }
    }
     else if (this.cursors.right.isDown) {
      this.player.body.velocity.x = 150.0;
      if (!Kotlin.equals(this.facing, 'right')) {
        this.player.animations.play('right');
        this.facing = 'right';
      }
    }
     else {
      if (!Kotlin.equals(this.facing, 'idle')) {
        this.player.animations.stop();
        if (Kotlin.equals(this.facing, 'left')) {
          this.player.frame = 0;
        }
         else {
          this.player.frame = 5;
        }
        this.facing = 'idle';
      }
    }
    if (this.jumpButton.isDown && this.player.body.onFloor() && this.game.time.now > this.jumpTimer) {
      this.player.body.velocity.y = -250.0;
      this.jumpTimer = this.game.time.now + 750;
    }
  };
  Starstruck.prototype.render = function () {
  };
  Starstruck.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Starstruck',
    baseClasses: []
  };
  function Tanks() {
    Phaser.State.call(this);
    this.enemies = mutableListOf([]);
    this.enemiesTotal = 0;
    this.enemiesAlive = 0;
    this.currentSpeed = 0;
    this.fireRate = 100;
    this.nextFire = 0.0;
  }
  function Tanks$EnemyTank(index, game, player, bullets) {
    this.index = index;
    this.game = game;
    this.player = player;
    this.bullets = bullets;
    this.x = this.game.world.randomX;
    this.y = this.game.world.randomY;
    this.health = 3;
    this.fireRate = 1000;
    this.nextFire = 0.0;
    this.alive = true;
    this.shadow = this.game.add.sprite(this.x, this.y, 'enemy', 'shadow');
    this.tank = this.game.add.sprite(this.x, this.y, 'enemy', 'tank1');
    this.turret = this.game.add.sprite(this.x, this.y, 'enemy', 'turret');
    this.shadow.anchor.set(0.5);
    this.tank.anchor.set(0.5);
    this.turret.anchor.set(0.3, 0.5);
    this.tank.name = this.index.toString();
    this.game.physics.enable(this.tank, Phaser.Physics.ARCADE);
    this.tank.body.immovable = false;
    this.tank.body.collideWorldBounds = true;
    this.tank.body.bounce.setTo(1, 1);
    this.tank.angle = this.game.rnd.angle();
    this.game.physics.arcade.velocityFromRotation(this.tank.rotation, 100, this.tank.body.velocity);
  }
  Tanks$EnemyTank.prototype.damage = function () {
    this.health -= 1;
    if (this.health <= 0) {
      this.alive = false;
      this.shadow.kill();
      this.tank.kill();
      this.turret.kill();
      return true;
    }
    return false;
  };
  Tanks$EnemyTank.prototype.update = function () {
    var tmp$;
    this.shadow.x = this.tank.x;
    this.shadow.y = this.tank.y;
    this.shadow.rotation = this.tank.rotation;
    this.turret.x = this.tank.x;
    this.turret.y = this.tank.y;
    this.turret.rotation = this.game.physics.arcade.angleBetween(this.tank, this.player);
    if (this.game.physics.arcade.distanceBetween(this.tank, this.player) < 300) {
      if (this.game.time.now > this.nextFire && this.bullets.countDead() > 0) {
        this.nextFire = this.game.time.now + this.fireRate;
        var bullet = (tmp$ = this.bullets.getFirstDead()) != null ? tmp$ : Kotlin.throwNPE();
        reset(bullet, this.turret.x, this.turret.y);
        bullet.rotation = this.game.physics.arcade.moveToObject(bullet, this.player, 500);
      }
    }
  };
  Tanks$EnemyTank.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'EnemyTank',
    baseClasses: []
  };
  Tanks.prototype.preload = function () {
    this.game.load.atlas('tank', 'assets/games/tanks/tanks.png', 'assets/games/tanks/tanks.json');
    this.game.load.atlas('enemy', 'assets/games/tanks/enemy-tanks.png', 'assets/games/tanks/tanks.json');
    this.game.load.image('logo', 'assets/games/tanks/logo.png');
    this.game.load.image('bullet', 'assets/games/tanks/bullet.png');
    this.game.load.image('earth', 'assets/games/tanks/scorched_earth.png');
    this.game.load.spritesheet('kaboom', 'assets/games/tanks/explosion.png', 64, 64, 23);
  };
  Tanks.prototype.create = function () {
    var tmp$, tmp$_0;
    this.game.world.setBounds(-1000, -1000, 2000, 2000);
    this.land = this.game.add.tileSprite(0, 0, 800, 600, 'earth');
    this.land.fixedToCamera = true;
    this.tank = this.game.add.sprite(0, 0, 'tank', 'tank1');
    this.tank.anchor.setTo(0.5, 0.5);
    this.tank.animations.add('move', ['tank1', 'tank2', 'tank3', 'tank4', 'tank5', 'tank6'], 20, true);
    this.game.physics.enable(this.tank, Phaser.Physics.ARCADE);
    this.tank.body.drag.set(0.2);
    this.tank.body.maxVelocity.setTo(400, 400);
    this.tank.body.collideWorldBounds = true;
    this.turret = this.game.add.sprite(0, 0, 'tank', 'turret');
    this.turret.anchor.setTo(0.3, 0.5);
    this.enemyBullets = this.game.add.group();
    this.enemyBullets.enableBody = true;
    this.enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;
    this.enemyBullets.createMultiple(100, 'bullet');
    this.enemyBullets.setAll('anchor.x', 0.5);
    this.enemyBullets.setAll('anchor.y', 0.5);
    this.enemyBullets.setAll('outOfBoundsKill', true);
    this.enemyBullets.setAll('checkWorldBounds', true);
    this.enemies = mutableListOf([]);
    this.enemiesTotal = 20;
    this.enemiesAlive = 20;
    tmp$ = this.enemiesTotal - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.enemies.add_za3rmp$(new Tanks$EnemyTank(i, this.game, this.tank, this.enemyBullets));
    }
    this.shadow = this.game.add.sprite(0, 0, 'tank', 'shadow');
    this.shadow.anchor.setTo(0.5, 0.5);
    this.bullets = this.game.add.group();
    this.bullets.enableBody = true;
    this.bullets.physicsBodyType = Phaser.Physics.ARCADE;
    this.bullets.createMultiple(30, 'bullet', 0, false);
    this.bullets.setAll('anchor.x', 0.5);
    this.bullets.setAll('anchor.y', 0.5);
    this.bullets.setAll('outOfBoundsKill', true);
    this.bullets.setAll('checkWorldBounds', true);
    this.explosions = this.game.add.group();
    tmp$_0 = 10 - 1;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      var explosionAnimation = this.explosions.create(0, 0, 'kaboom', 0, false);
      explosionAnimation.anchor.setTo(0.5, 0.5);
      explosionAnimation.animations.add('kaboom');
    }
    this.tank.bringToTop();
    this.turret.bringToTop();
    this.logo = this.game.add.sprite(0, 200, 'logo');
    this.logo.fixedToCamera = true;
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'removeLogo'), this);
    this.game.camera.follow(this.tank);
    this.game.camera.deadzone = new Phaser.Rectangle(150, 150, 500, 300);
    this.game.camera.focusOnXY(0, 0);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  Tanks.prototype.removeLogo = function () {
    this.game.input.onDown.remove(Kotlin.getBoundCallableRefForMemberFunction(this, 'removeLogo'), this);
    this.logo.kill();
  };
  Tanks.prototype.update = function () {
    var tmp$;
    this.game.physics.arcade.overlap(this.enemyBullets, this.tank, Kotlin.getBoundCallableRefForMemberFunction(this, 'bulletHitPlayer_ge0c0c$'), null, this);
    this.enemiesAlive = 0;
    tmp$ = this.enemies.size - 1;
    for (var i = 0; i <= tmp$; i++) {
      if (this.enemies.get_za3lpa$(i).alive) {
        this.enemiesAlive++;
        this.game.physics.arcade.collide(this.tank, this.enemies.get_za3lpa$(i).tank);
        this.game.physics.arcade.overlap(this.bullets, this.enemies.get_za3lpa$(i).tank, Kotlin.getBoundCallableRefForMemberFunction(this, 'bulletHitEnemy_ge0c0c$'), null, this);
        this.enemies.get_za3lpa$(i).update();
      }
    }
    if (this.cursors.left.isDown) {
      this.tank.angle = this.tank.angle - 4;
    }
     else if (this.cursors.right.isDown) {
      this.tank.angle = this.tank.angle + 4;
    }
    if (this.cursors.up.isDown) {
      this.currentSpeed = 300;
    }
     else {
      if (this.currentSpeed > 0) {
        this.currentSpeed -= 4;
      }
    }
    if (this.currentSpeed > 0) {
      this.game.physics.arcade.velocityFromRotation(this.tank.rotation, this.currentSpeed, this.tank.body.velocity);
    }
    this.land.tilePosition.x = -this.game.camera.x;
    this.land.tilePosition.y = -this.game.camera.y;
    this.shadow.x = this.tank.x;
    this.shadow.y = this.tank.y;
    this.shadow.rotation = this.tank.rotation;
    this.turret.x = this.tank.x;
    this.turret.y = this.tank.y;
    this.turret.rotation = this.game.physics.arcade.angleToPointer(this.turret);
    if (this.game.input.activePointer.isDown) {
      this.fire();
    }
  };
  Tanks.prototype.bulletHitPlayer_ge0c0c$ = function (tank, bullet) {
    bullet.kill();
  };
  Tanks.prototype.bulletHitEnemy_ge0c0c$ = function (tank, bullet) {
    var tmp$;
    bullet.kill();
    var destroyed = this.enemies.get_za3lpa$(parseInt(tank.name)).damage();
    if (destroyed) {
      var explosionAnimation = (tmp$ = this.explosions.getFirstExists(false)) != null ? tmp$ : Kotlin.throwNPE();
      reset(explosionAnimation, tank.x, tank.y);
      explosionAnimation.play('kaboom', 30, false, true);
    }
  };
  Tanks.prototype.fire = function () {
    var tmp$;
    if (this.game.time.now > this.nextFire && this.bullets.countDead() > 0) {
      this.nextFire = this.game.time.now + this.fireRate;
      var bullet = (tmp$ = this.bullets.getFirstExists(false)) != null ? tmp$ : Kotlin.throwNPE();
      reset(bullet, this.turret.x, this.turret.y);
      bullet.rotation = this.game.physics.arcade.moveToPointer(bullet, 1000, this.game.input.activePointer, 500);
    }
  };
  Tanks.prototype.render = function () {
    this.game.debug.text('Enemies: ' + this.enemiesAlive + ' / ' + this.enemiesTotal, 32, 32);
  };
  Tanks.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Tanks',
    baseClasses: []
  };
  function Yahtzee() {
    Phaser.State.call(this);
    this.combo1 = new Yahtzee$ComboSingle(this, 1);
    this.combo2 = new Yahtzee$ComboSingle(this, 2);
    this.combo3 = new Yahtzee$ComboSingle(this, 3);
    this.combo4 = new Yahtzee$ComboSingle(this, 4);
    this.combo5 = new Yahtzee$ComboSingle(this, 5);
    this.combo6 = new Yahtzee$ComboSingle(this, 6);
    this.upperBonus = 0;
    this.comboThreeOfAKind = new Yahtzee$ComboXOfAKind(this, 3, false);
    this.comboFourOfAKind = new Yahtzee$ComboXOfAKind(this, 4, false);
    this.comboFullHouse = new Yahtzee$ComboFullHouse(this);
    this.comboSmallStraight = new Yahtzee$ComboStraight(this, 3, 30);
    this.comboLargeStraight = new Yahtzee$ComboStraight(this, 2, 40);
    this.comboChance = new Yahtzee$ComboChance(this);
    this.comboYahtzee = new Yahtzee$ComboXOfAKind(this, 5, true, 50);
    this.total = 0;
    this.roll = 1;
    this.canLock = false;
  }
  function Yahtzee$Die(game) {
    this.game = game;
    this.value = 1;
    this.locked = false;
    this.sprite = this.game.make.sprite(0, 0, 'dice', 'dieWhite1');
    this.sprite.inputEnabled = true;
    this.sprite.input.useHandCursor = true;
    this.sprite.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'clicked'), this);
  }
  Yahtzee$Die.prototype.roll = function () {
    if (!this.locked) {
      this.value = this.game.rnd.between(1, 6);
      this.sprite.frameName = 'dieWhite' + this.value;
    }
  };
  Yahtzee$Die.prototype.clicked = function () {
    if (this.game.canLock) {
      if (this.locked) {
        this.unlock();
      }
       else {
        this.lock();
      }
    }
  };
  Yahtzee$Die.prototype.lock = function () {
    if (!this.locked) {
      this.locked = true;
      this.sprite.frameName = 'dieRed' + this.value;
    }
  };
  Yahtzee$Die.prototype.unlock = function () {
    if (this.locked) {
      this.locked = false;
      this.sprite.frameName = 'dieWhite' + this.value;
    }
  };
  Yahtzee$Die.prototype.reset = function () {
    this.unlock();
    this.roll();
  };
  Yahtzee$Die.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Die',
    baseClasses: []
  };
  function Yahtzee$Cup(game) {
    this.game = game;
    this.die1 = new Yahtzee$Die(this.game);
    this.die2 = new Yahtzee$Die(this.game);
    this.die3 = new Yahtzee$Die(this.game);
    this.die4 = new Yahtzee$Die(this.game);
    this.die5 = new Yahtzee$Die(this.game);
    this.diceMap = mapOf([new Pair('die1', this.die1), new Pair('die2', this.die2), new Pair('die3', this.die3), new Pair('die4', this.die4), new Pair('die5', this.die5)]);
  }
  Yahtzee$Cup.prototype.reset = function () {
    this.die1.reset();
    this.die2.reset();
    this.die3.reset();
    this.die4.reset();
    this.die5.reset();
  };
  Yahtzee$Cup.prototype.shake = function () {
    this.die1.roll();
    this.die2.roll();
    this.die3.roll();
    this.die4.roll();
    this.die5.roll();
  };
  function Yahtzee$Cup$DieData(total, qty, value) {
    this.total = total;
    this.qty = qty;
    this.value = value;
  }
  Yahtzee$Cup$DieData.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DieData',
    baseClasses: []
  };
  Yahtzee$Cup$DieData.prototype.component1 = function () {
    return this.total;
  };
  Yahtzee$Cup$DieData.prototype.component2 = function () {
    return this.qty;
  };
  Yahtzee$Cup$DieData.prototype.component3 = function () {
    return this.value;
  };
  Yahtzee$Cup$DieData.prototype.copy_qt1dr2$ = function (total, qty, value) {
    return new Yahtzee$Cup$DieData(total === void 0 ? this.total : total, qty === void 0 ? this.qty : qty, value === void 0 ? this.value : value);
  };
  Yahtzee$Cup$DieData.prototype.toString = function () {
    return 'DieData(total=' + Kotlin.toString(this.total) + (', qty=' + Kotlin.toString(this.qty)) + (', value=' + Kotlin.toString(this.value)) + ')';
  };
  Yahtzee$Cup$DieData.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.total) | 0;
    result = result * 31 + Kotlin.hashCode(this.qty) | 0;
    result = result * 31 + Kotlin.hashCode(this.value) | 0;
    return result;
  };
  Yahtzee$Cup$DieData.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.total, other.total) && Kotlin.equals(this.qty, other.qty) && Kotlin.equals(this.value, other.value)))));
  };
  Yahtzee$Cup.prototype.getDie_za3lpa$ = function (value) {
    var tmp$, tmp$_0, tmp$_1;
    var out = new Yahtzee$Cup$DieData(0, 0, value);
    for (var i = 1; i <= 5; i++) {
      if (((tmp$ = this.diceMap.get_za3rmp$('die' + i)) != null ? tmp$ : Kotlin.throwNPE()).value === value) {
        out.total = out.total + value;
        tmp$_0 = out.qty, tmp$_1 = tmp$_0, out.qty = tmp$_0 + 1, tmp$_1;
      }
    }
    return out;
  };
  Yahtzee$Cup.prototype.getFullSet = function () {
    return [this.getDie_za3lpa$(1), this.getDie_za3lpa$(2), this.getDie_za3lpa$(3), this.getDie_za3lpa$(4), this.getDie_za3lpa$(5), this.getDie_za3lpa$(6)];
  };
  Yahtzee$Cup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Cup',
    baseClasses: []
  };
  function Yahtzee$ComboSingle(game, value) {
    this.game = game;
    this.value = value;
    this.score = 0;
    this.played = false;
  }
  Yahtzee$ComboSingle.prototype.check = function () {
    var dice = this.game.cup.getDie_za3lpa$(this.value);
    return dice.qty;
  };
  Yahtzee$ComboSingle.prototype.play = function () {
    var dice = this.game.cup.getDie_za3lpa$(this.value);
    this.score = dice.total;
    this.played = true;
  };
  Yahtzee$ComboSingle.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ComboSingle',
    baseClasses: []
  };
  function Yahtzee$ComboChance(game) {
    this.game = game;
    this.score = 0;
    this.played = false;
  }
  Yahtzee$ComboChance.prototype.check = function () {
    var tmp$;
    var set_0 = this.game.cup.getFullSet();
    var score = 0;
    tmp$ = set_0.length - 1;
    for (var i = 0; i <= tmp$; i++) {
      score += set_0[i].total;
    }
    return score;
  };
  Yahtzee$ComboChance.prototype.play = function () {
    var tmp$;
    var set_0 = this.game.cup.getFullSet();
    tmp$ = set_0.length - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.score += set_0[i].total;
    }
    this.played = true;
  };
  Yahtzee$ComboChance.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ComboChance',
    baseClasses: []
  };
  function Yahtzee$ComboStraight(game, size, points) {
    this.game = game;
    this.size = size;
    this.points = points;
    this.score = 0;
    this.played = false;
  }
  Yahtzee$ComboStraight.prototype.check = function () {
    var tmp$;
    var set_0 = this.game.cup.getFullSet();
    tmp$ = set_0.length - 1;
    for (var i = 0; i <= tmp$; i++) {
      if (set_0[i].qty >= this.size) {
        return false;
      }
    }
    return true;
  };
  Yahtzee$ComboStraight.prototype.play = function () {
    this.played = true;
    this.score = this.points;
  };
  Yahtzee$ComboStraight.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ComboStraight',
    baseClasses: []
  };
  function Yahtzee$ComboFullHouse(game) {
    this.game = game;
    this.score = 0;
    this.played = false;
  }
  Yahtzee$ComboFullHouse.prototype.check = function () {
    var tmp$;
    var set_0 = this.game.cup.getFullSet();
    var any3 = false;
    var any2 = false;
    tmp$ = set_0.length - 1;
    for (var i = 0; i <= tmp$; i++) {
      if (set_0[i].qty === 3) {
        any3 = true;
      }
       else if (set_0[i].qty === 2) {
        any2 = true;
      }
    }
    return any3 && any2;
  };
  Yahtzee$ComboFullHouse.prototype.play = function () {
    this.played = true;
    this.score = 35;
  };
  Yahtzee$ComboFullHouse.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ComboFullHouse',
    baseClasses: []
  };
  function Yahtzee$ComboXOfAKind(game, value, usePoints, points) {
    if (points === void 0)
      points = 0;
    this.game = game;
    this.value = value;
    this.usePoints = usePoints;
    this.points = points;
    this.score = 0;
    this.played = false;
  }
  Yahtzee$ComboXOfAKind.prototype.check = function () {
    var tmp$;
    var set_0 = this.game.cup.getFullSet();
    tmp$ = set_0.length - 1;
    for (var i = 0; i <= tmp$; i++) {
      if (set_0[i].qty >= this.value) {
        return true;
      }
    }
    return false;
  };
  Yahtzee$ComboXOfAKind.prototype.play = function () {
    var tmp$;
    if (Kotlin.equals(this.usePoints, false)) {
      var set_0 = this.game.cup.getFullSet();
      tmp$ = set_0.length - 1;
      for (var i = 0; i <= tmp$; i++) {
        if (set_0[i].qty >= this.value) {
          this.score = set_0[i].value * this.value;
        }
      }
    }
     else {
      this.score = this.points;
    }
    this.played = true;
  };
  Yahtzee$ComboXOfAKind.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ComboXOfAKind',
    baseClasses: []
  };
  Yahtzee.prototype.preload = function () {
    this.load.baseURL = 'assets/games/yahtzee/';
    this.load.image('board');
    this.load.image('glow');
    this.load.image('roll');
    this.load.atlas('dice');
  };
  Yahtzee.prototype.create = function () {
    var tmp$;
    var style = TextStyle('65px Arial', void 0, void 0, void 0, void 0, void 0, '#ff0044', 'center');
    var text_0 = this.game.add.text(this.game.world.centerX, this.game.world.centerY, '- phaser -\nwith a sprinkle of\npixi dust', style);
    this.add.image(0, 0, 'board');
    this.cup = new Yahtzee$Cup(this);
    for (var i = 1; i <= 5; i++) {
      var die = ((tmp$ = this.cup.diceMap.get_za3rmp$('die' + i)) != null ? tmp$ : Kotlin.throwNPE()).sprite;
      die.x = 120.0 * i;
      die.y = 32.0;
      this.world.add(die);
    }
    this.rollButton = this.add.sprite(this.world.centerX, 528, 'roll');
    this.rollButton.anchor.x = 0.5;
    this.rollButton.inputEnabled = true;
    this.rollButton.input.useHandCursor = true;
    this.rollButton.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'doRoll'), this);
  };
  Yahtzee.prototype.doRoll = function () {
    console.log('\n\nRoll ' + this.roll);
    this.cup.shake();
    this.roll++;
    this.canLock = true;
    console.log('1s', this.combo1.check());
    console.log('2s', this.combo2.check());
    console.log('3s', this.combo3.check());
    console.log('4s', this.combo4.check());
    console.log('5s', this.combo5.check());
    console.log('6s', this.combo6.check());
    console.log('3ofaK', this.comboThreeOfAKind.check());
    console.log('4ofaK', this.comboFourOfAKind.check());
    console.log('full', this.comboFullHouse.check());
    console.log('sm. straight', this.comboSmallStraight.check());
    console.log('lg. straight', this.comboLargeStraight.check());
    console.log('yahtzee', this.comboYahtzee.check());
    console.log('chance', this.comboChance.check());
  };
  Yahtzee.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Yahtzee',
    baseClasses: []
  };
  function CenterLine() {
    Phaser.State.call(this);
  }
  CenterLine.prototype.create = function () {
    this.game.stage.backgroundColor = '#124184';
    this.line = new Phaser.Line(100, 100, 200, 200);
  };
  CenterLine.prototype.update = function () {
    this.line.centerOn(this.game.input.activePointer.x, this.game.input.activePointer.y);
    this.line.rotate(0.05);
  };
  CenterLine.prototype.render = function () {
    this.game.debug.geom(this.line);
    this.game.debug.lineInfo(this.line, 32, 32);
  };
  CenterLine.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CenterLine',
    baseClasses: []
  };
  function Centroid() {
    Phaser.State.call(this);
    this.points = mutableListOf([]);
    this.over = false;
  }
  Centroid.prototype.preload = function () {
    this.game.load.spritesheet('centroid', 'assets/sprites/centroid.png', 16, 16);
  };
  Centroid.prototype.create = function () {
    this.currentPoint = this.game.add.image(10, 10, 'centroid');
    this.currentPoint.anchor.set(0.5);
    this.currentPoint.alpha = 0.5;
    this.centroid = this.game.add.image(10, 10, 'centroid', 1);
    this.centroid.anchor.set(0.5);
    this.centroid.visible = false;
    this.game.input.onTap.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onTapHandler'), this);
  };
  function Centroid$onTapHandler$lambda(this$Centroid) {
    return function (sprite) {
      sprite.alpha = 1.0;
      sprite.scale.setTo(1.2, 1.2);
      this$Centroid.over = true;
    };
  }
  function Centroid$onTapHandler$lambda_0(this$Centroid) {
    return function (sprite) {
      sprite.alpha = 0.25;
      sprite.scale.setTo(1, 1);
      this$Centroid.over = false;
    };
  }
  Centroid.prototype.onTapHandler = function () {
    if (!this.over) {
      var img = this.game.add.sprite(this.game.input.activePointer.position.x, this.game.input.activePointer.position.y, 'centroid', 0);
      this.points.add_za3rmp$(img.position);
      img.anchor.set(0.5);
      img.alpha = 0.25;
      img.inputEnabled = true;
      img.input.enableDrag(true);
      img.defaultCursor = 'move';
      img.events.onInputOver.add(Centroid$onTapHandler$lambda(this), img);
      img.events.onInputOut.add(Centroid$onTapHandler$lambda_0(this), img);
    }
  };
  Centroid.prototype.update = function () {
    this.currentPoint.position.copyFrom(this.game.input.activePointer.position);
    if (this.points.size > 0) {
      var $receiver = this.points;
      var c = Phaser.Point.centroid(Kotlin.kotlin.collections.copyToArray($receiver));
      this.centroid.position.copyFrom(c);
      if (!this.centroid.visible) {
        this.centroid.visible = true;
      }
    }
  };
  function Centroid$render$lambda(this$Centroid) {
    return function (child) {
      this$Centroid.game.debug.text(Phaser.Math.roundTo(child.x, 0).toString() + ',' + Phaser.Math.roundTo(child.y, 0), child.x - 10, child.y + 25, '#ff1e00', '12px Courier');
    };
  }
  Centroid.prototype.render = function () {
    this.game.world.forEachAlive(Centroid$render$lambda(this));
    if (this.centroid.visible) {
      this.game.debug.text('Points may be dragged.', 10, 20);
      this.game.debug.text(Phaser.Math.roundTo(this.centroid.x, 0).toString() + ',' + Phaser.Math.roundTo(this.centroid.y, 0), this.centroid.x - 10, this.centroid.y - 15, '#fff', 'bold 12px Courier');
    }
     else {
      this.game.debug.text('Click anywhere to add points.', 10, 20);
    }
  };
  Centroid.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Centroid',
    baseClasses: []
  };
  function CircleExample_0() {
    Phaser.State.call(this);
  }
  CircleExample_0.prototype.create = function () {
    this.circle = new Phaser.Circle(this.game.world.centerX, 100, 64);
  };
  CircleExample_0.prototype.render = function () {
    this.game.debug.geom(this.circle, '#cfffff');
    this.game.debug.text('Diameter : ' + this.circle.diameter, 50, 200);
    this.game.debug.text('Circumference : ' + this.circle.circumference(), 50, 230);
  };
  CircleExample_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CircleExample',
    baseClasses: []
  };
  function CircleRandomPoint() {
    Phaser.State.call(this);
    this.i = 0;
  }
  CircleRandomPoint.prototype.create = function () {
    this.colors = Phaser.Color.HSVColorWheel();
    this.circle = new Phaser.Circle(this.game.world.centerX, this.game.world.centerY, 500);
    this.bmd = this.game.add.bitmapData(this.game.width, this.game.height);
    this.bmd.addToWorld();
    var graphics = this.game.add.graphics(0, 0);
    graphics.lineStyle(1, 65280, 1);
    graphics.drawCircle(this.circle.x, this.circle.y, this.circle.diameter);
    this.p = new Phaser.Point();
  };
  CircleRandomPoint.prototype.update = function () {
    var tmp$;
    tmp$ = 10 - 1;
    for (var c = 0; c <= tmp$; c++) {
      this.circle.random(this.p);
      this.p.floor();
      this.bmd.setPixel(this.p.x, this.p.y, this.colors[this.i].r, this.colors[this.i].g, this.colors[this.i].b);
    }
    this.i = Phaser.Math.wrapValue(this.i, 1, 359);
  };
  CircleRandomPoint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CircleRandomPoint',
    baseClasses: []
  };
  function EllipseRandomPoint() {
    Phaser.State.call(this);
    this.i = 0;
  }
  EllipseRandomPoint.prototype.create = function () {
    this.colors = Phaser.Color.HSVColorWheel();
    this.ellipse = new Phaser.Ellipse(this.game.world.centerX, this.game.world.centerY, 300, 550);
    this.bmd = this.game.add.bitmapData(this.game.width, this.game.height);
    this.bmd.addToWorld();
    this.p = new Phaser.Point();
  };
  EllipseRandomPoint.prototype.update = function () {
    var tmp$;
    tmp$ = 10 - 1;
    for (var c = 0; c <= tmp$; c++) {
      this.ellipse.random(this.p);
      this.p.floor();
      this.bmd.setPixel(this.p.x, this.p.y, this.colors[this.i].r, this.colors[this.i].g, this.colors[this.i].b);
    }
    this.i = Phaser.Math.wrapValue(this.i, 1, 359);
  };
  EllipseRandomPoint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'EllipseRandomPoint',
    baseClasses: []
  };
  function LineBounds() {
    Phaser.State.call(this);
    this.setting = false;
  }
  LineBounds.prototype.create = function () {
    this.line = new Phaser.Line(64, 64, 200, 300);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'click_pal8wq$'), this);
  };
  LineBounds.prototype.update = function () {
    if (this.setting) {
      if (this.game.input.activePointer.isDown) {
        this.line.end.set(this.game.input.activePointer.x, this.game.input.activePointer.y);
      }
       else {
        this.setting = false;
      }
    }
  };
  LineBounds.prototype.click_pal8wq$ = function (pointer) {
    this.setting = true;
    this.line.start.set(pointer.x, pointer.y);
  };
  LineBounds.prototype.render = function () {
    this.game.debug.geom(this.line);
    this.game.debug.rectangle(this.line);
  };
  LineBounds.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LineBounds',
    baseClasses: []
  };
  function LineExample() {
    Phaser.State.call(this);
  }
  LineExample.prototype.preload = function () {
    this.game.load.spritesheet('balls', 'assets/sprites/balls.png', 17, 17);
  };
  LineExample.prototype.create = function () {
    this.game.stage.backgroundColor = '#124184';
    this.handle1 = this.game.add.sprite(100, 200, 'balls', 0);
    this.handle1.anchor.set(0.5);
    this.handle1.inputEnabled = true;
    this.handle1.input.enableDrag(true);
    this.handle2 = this.game.add.sprite(400, 300, 'balls', 0);
    this.handle2.anchor.set(0.5);
    this.handle2.inputEnabled = true;
    this.handle2.input.enableDrag(true);
    this.line1 = new Phaser.Line(this.handle1.x, this.handle1.y, this.handle2.x, this.handle2.y);
  };
  LineExample.prototype.update = function () {
    this.line1.fromSprite(this.handle1, this.handle2, false);
  };
  LineExample.prototype.render = function () {
    this.game.debug.geom(this.line1);
    this.game.debug.lineInfo(this.line1, 32, 32);
    this.game.debug.text('Drag the handles', 32, 550);
  };
  LineExample.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LineExample',
    baseClasses: []
  };
  function LineIntersection() {
    Phaser.State.call(this);
    this.c = 'rgb(255,255,255)';
    this.p = new Phaser.Point();
  }
  LineIntersection.prototype.preload = function () {
    this.game.load.spritesheet('balls', 'assets/sprites/balls.png', 17, 17);
  };
  LineIntersection.prototype.create = function () {
    this.game.stage.backgroundColor = '#124184';
    this.handle1 = this.game.add.sprite(100, 200, 'balls', 0);
    this.handle1.anchor.set(0.5);
    this.handle1.inputEnabled = true;
    this.handle1.input.enableDrag(true);
    this.handle2 = this.game.add.sprite(400, 300, 'balls', 0);
    this.handle2.anchor.set(0.5);
    this.handle2.inputEnabled = true;
    this.handle2.input.enableDrag(true);
    this.handle3 = this.game.add.sprite(200, 400, 'balls', 1);
    this.handle3.anchor.set(0.5);
    this.handle3.inputEnabled = true;
    this.handle3.input.enableDrag(true);
    this.handle4 = this.game.add.sprite(500, 500, 'balls', 1);
    this.handle4.anchor.set(0.5);
    this.handle4.inputEnabled = true;
    this.handle4.input.enableDrag(true);
    this.line1 = new Phaser.Line(this.handle1.x, this.handle1.y, this.handle2.x, this.handle2.y);
    this.line2 = new Phaser.Line(this.handle3.x, this.handle3.y, this.handle4.x, this.handle4.y);
  };
  LineIntersection.prototype.update = function () {
    this.line1.fromSprite(this.handle1, this.handle2, false);
    this.line2.fromSprite(this.handle3, this.handle4, false);
    this.p = this.line1.intersects(this.line2, true);
    if (this.p != null) {
      this.c = 'rgb(0,255,0)';
    }
     else {
      this.c = 'rgb(255,255,255)';
    }
  };
  LineIntersection.prototype.render = function () {
    var tmp$, tmp$_0;
    this.game.debug.geom(this.line1, this.c);
    this.game.debug.geom(this.line2, this.c);
    this.game.debug.lineInfo(this.line1, 32, 32);
    this.game.debug.lineInfo(this.line2, 32, 100);
    if (this.p != null) {
      this.game.context.fillStyle = 'rgb(255,0,255)';
      this.game.context.fillRect(((tmp$ = this.p) != null ? tmp$ : Kotlin.throwNPE()).x - 2, ((tmp$_0 = this.p) != null ? tmp$_0 : Kotlin.throwNPE()).y - 2, 5.0, 5.0);
    }
    this.game.debug.text('Drag the handles', 32, 550);
  };
  LineIntersection.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LineIntersection',
    baseClasses: []
  };
  function LineMidpoint() {
    Phaser.State.call(this);
  }
  LineMidpoint.prototype.preload = function () {
    this.game.load.spritesheet('balls', 'assets/sprites/balls.png', 17, 17);
  };
  LineMidpoint.prototype.create = function () {
    this.game.stage.backgroundColor = '#124184';
    this.handle1 = this.game.add.sprite(100, 200, 'balls', 0);
    this.handle1.anchor.set(0.5);
    this.handle1.inputEnabled = true;
    this.handle1.input.enableDrag(true);
    this.handle2 = this.game.add.sprite(400, 300, 'balls', 0);
    this.handle2.anchor.set(0.5);
    this.handle2.inputEnabled = true;
    this.handle2.input.enableDrag(true);
    this.line = new Phaser.Line(this.handle1.x, this.handle1.y, this.handle2.x, this.handle2.y);
    this.mid = new Phaser.Point();
  };
  LineMidpoint.prototype.update = function () {
    this.line.fromSprite(this.handle1, this.handle2, false);
    this.line.midPoint(this.mid);
  };
  LineMidpoint.prototype.render = function () {
    this.game.debug.geom(this.line);
    this.game.debug.geom(this.mid, '#ffff00');
    this.game.debug.lineInfo(this.line, 32, 32);
    this.game.debug.text('Drag the handles', 32, 550);
  };
  LineMidpoint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LineMidpoint',
    baseClasses: []
  };
  function LineRandomPoint() {
    Phaser.State.call(this);
    this.lines = mutableListOf([]);
    this.i = 0;
  }
  LineRandomPoint.prototype.create = function () {
    var tmp$;
    this.colors = Phaser.Color.HSVColorWheel();
    this.lines = mutableListOf([]);
    tmp$ = 50 - 1;
    for (var c = 0; c <= tmp$; c++) {
      this.lines.add_za3rmp$(new Phaser.Line(this.game.world.randomX, this.game.world.randomY, this.game.world.randomX, this.game.world.randomY));
    }
    this.bmd = this.game.add.bitmapData(this.game.width, this.game.height);
    this.bmd.addToWorld();
    this.p = new Phaser.Point();
  };
  LineRandomPoint.prototype.update = function () {
    var tmp$;
    tmp$ = this.lines.size - 1;
    for (var c = 0; c <= tmp$; c++) {
      this.lines.get_za3lpa$(c).random(this.p);
      this.p.floor();
      this.bmd.setPixel(this.p.x, this.p.y, this.colors[this.i].r, this.colors[this.i].g, this.colors[this.i].b);
    }
    this.i = Phaser.Math.wrapValue(this.i, 1, 359);
  };
  LineRandomPoint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LineRandomPoint',
    baseClasses: []
  };
  function LineReflection() {
    Phaser.State.call(this);
    this.c = 'rgb(255,255,255)';
    this.p = new Phaser.Point();
  }
  LineReflection.prototype.preload = function () {
    this.game.load.spritesheet('balls', 'assets/sprites/balls.png', 17, 17);
    this.game.load.image('arrow', 'assets/sprites/asteroids_ship.png');
  };
  LineReflection.prototype.create = function () {
    this.game.stage.backgroundColor = '#124184';
    this.handle1 = this.game.add.sprite(235, 220, 'balls', 0);
    this.handle1.anchor.set(0.5);
    this.handle1.inputEnabled = true;
    this.handle1.input.enableDrag(true);
    this.handle2 = this.game.add.sprite(377, 437, 'balls', 0);
    this.handle2.anchor.set(0.5);
    this.handle2.inputEnabled = true;
    this.handle2.input.enableDrag(true);
    this.handle3 = this.game.add.sprite(160, 300, 'balls', 1);
    this.handle3.anchor.set(0.5);
    this.handle3.inputEnabled = true;
    this.handle3.input.enableDrag(true);
    this.handle4 = this.game.add.sprite(450, 350, 'balls', 1);
    this.handle4.anchor.set(0.5);
    this.handle4.inputEnabled = true;
    this.handle4.input.enableDrag(true);
    this.line1 = new Phaser.Line(this.handle1.x, this.handle1.y, this.handle2.x, this.handle2.y);
    this.line2 = new Phaser.Line(this.handle3.x, this.handle3.y, this.handle4.x, this.handle4.y);
    this.arrow = this.game.add.sprite(0, 0, 'arrow');
    this.arrow.anchor.set(0.5);
    this.normal = new Phaser.Line(0, 0, 0, 0);
    this.reflection = new Phaser.Line(0, 0, 0, 0);
  };
  LineReflection.prototype.update = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    this.line1.fromSprite(this.handle1, this.handle2, false);
    this.line2.fromSprite(this.handle3, this.handle4, false);
    this.p = this.line1.intersects(this.line2, true);
    if (this.p != null) {
      this.c = 'rgb(0,255,0)';
      this.normal.fromAngle(((tmp$ = this.p) != null ? tmp$ : Kotlin.throwNPE()).x, ((tmp$_0 = this.p) != null ? tmp$_0 : Kotlin.throwNPE()).y, this.line2.normalAngle, 100);
      var outgoing = this.line1.reflect(this.line2);
      this.reflection.fromAngle(((tmp$_1 = this.p) != null ? tmp$_1 : Kotlin.throwNPE()).x, ((tmp$_2 = this.p) != null ? tmp$_2 : Kotlin.throwNPE()).y, outgoing, 200);
      this.arrow.x = this.reflection.end.x;
      this.arrow.y = this.reflection.end.y;
      this.arrow.rotation = this.reflection.angle;
      this.arrow.visible = true;
    }
     else {
      this.arrow.visible = false;
      this.c = 'rgb(255,255,255)';
    }
  };
  LineReflection.prototype.render = function () {
    var tmp$, tmp$_0;
    this.game.debug.geom(this.line1, '#ff0000');
    this.game.debug.geom(this.line2, '#9999ff');
    this.game.debug.lineInfo(this.line1, 32, 32);
    this.game.debug.lineInfo(this.line2, 32, 100);
    if (this.p != null) {
      this.game.debug.geom(this.normal, '#ffffff');
      this.game.debug.geom(this.reflection, '#00ff00');
      this.game.context.fillStyle = 'rgb(255,0,255)';
      this.game.context.fillRect(((tmp$ = this.p) != null ? tmp$ : Kotlin.throwNPE()).x - 2, ((tmp$_0 = this.p) != null ? tmp$_0 : Kotlin.throwNPE()).y - 2, 5.0, 5.0);
    }
    this.game.debug.text('Drag the handles', 32, 550);
  };
  LineReflection.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LineReflection',
    baseClasses: []
  };
  function PlayingWithPoints() {
    Phaser.State.call(this);
    this.d2 = 1;
    this.d3 = 4;
    this.d4 = 16;
  }
  PlayingWithPoints.prototype.create = function () {
    this.p1 = new Phaser.Point(this.game.world.centerX, this.game.world.centerY);
    this.p2 = new Phaser.Point(this.p1.x - 50, this.p1.y - 50);
    this.p3 = new Phaser.Point(this.p2.x - 50, this.p2.y - 50);
    this.p4 = new Phaser.Point(this.p3.x - 50, this.p3.y - 50);
  };
  PlayingWithPoints.prototype.update = function () {
    this.p2.rotate(this.p1.x, this.p1.y, this.d2, true, 150);
    this.p3.rotate(this.p2.x, this.p2.y, this.d3, true, 100);
    this.p4.rotate(this.p3.x, this.p3.y, this.d4, true, 50);
  };
  PlayingWithPoints.prototype.render = function () {
    this.game.context.strokeStyle = 'rgb(0,255,255)';
    this.game.context.beginPath();
    this.game.context.moveTo(this.p1.x, this.p1.y);
    this.game.context.lineTo(this.p2.x, this.p2.y);
    this.game.context.lineTo(this.p3.x, this.p3.y);
    this.game.context.lineTo(this.p4.x, this.p4.y);
    this.game.context.stroke();
    this.game.context.closePath();
    this.game.context.fillStyle = 'rgb(255,255,0)';
    this.game.context.fillRect(this.p1.x, this.p1.y, 4.0, 4.0);
    this.game.context.fillStyle = 'rgb(255,0,0)';
    this.game.context.fillRect(this.p2.x, this.p2.y, 4.0, 4.0);
    this.game.context.fillStyle = 'rgb(0,255,0)';
    this.game.context.fillRect(this.p3.x, this.p3.y, 4.0, 4.0);
    this.game.context.fillStyle = 'rgb(255,0,255)';
    this.game.context.fillRect(this.p4.x, this.p4.y, 4.0, 4.0);
  };
  PlayingWithPoints.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PlayingWithPoints',
    baseClasses: []
  };
  function PolygonContains() {
    Phaser.State.call(this);
  }
  PolygonContains.prototype.create = function () {
    this.poly = new Phaser.Polygon([new Phaser.Point(200, 100), new Phaser.Point(350, 100), new Phaser.Point(375, 200), new Phaser.Point(150, 200)]);
    this.graphics = this.game.add.graphics(0, 0);
    this.graphics.beginFill(16724991);
    this.graphics.drawPolygon(this.poly.points);
    this.graphics.endFill();
  };
  PolygonContains.prototype.update = function () {
    this.graphics.clear();
    if (this.poly.contains(this.game.input.x, this.game.input.y)) {
      this.graphics.beginFill(16724736);
    }
     else {
      this.graphics.beginFill(16724991);
    }
    this.graphics.drawPolygon(this.poly.points);
    this.graphics.endFill();
  };
  PolygonContains.prototype.render = function () {
    this.game.debug.text(this.game.input.x.toString() + ' x ' + this.game.input.y, 32, 32);
  };
  PolygonContains.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PolygonContains',
    baseClasses: []
  };
  function PolygonExample() {
    Phaser.State.call(this);
  }
  PolygonExample.prototype.create = function () {
    this.poly = new Phaser.Polygon();
    this.poly.setTo([new Phaser.Point(200, 100), new Phaser.Point(350, 100), new Phaser.Point(375, 200), new Phaser.Point(150, 200)]);
    this.graphics = this.game.add.graphics(0, 0);
    this.graphics.beginFill(16724991);
    this.graphics.drawPolygon(this.poly.points);
    this.graphics.endFill();
  };
  PolygonExample.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PolygonExample',
    baseClasses: []
  };
  function QuadtreeExample() {
    Phaser.State.call(this);
    this.rects = mutableListOf([]);
    this.flaggedRect = mutableMapOf([]);
  }
  QuadtreeExample.prototype.get_flagged_dsgady$ = function ($receiver) {
    return this.flaggedRect.getOrDefault_wn2jw4$($receiver, false);
  };
  QuadtreeExample.prototype.set_flagged_3c1b1t$ = function ($receiver, value) {
    this.flaggedRect.put_wn2jw4$($receiver, value);
  };
  QuadtreeExample.prototype.create = function () {
    var tmp$;
    this.quadTree = new Phaser.QuadTree(0, 0, 800, 600, 10, 4, 0);
    tmp$ = 48 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var x = this.game.world.randomX;
      var y = this.game.world.randomY;
      if (x > 760) {
        x = 760.0;
      }
      if (y > 560) {
        y = 560.0;
      }
      var rect = new Phaser.Rectangle(x, y, 32, 32);
      rect.id = i;
      this.set_flagged_3c1b1t$(rect, false);
      this.rects.add_za3rmp$(rect);
      this.quadTree.insert(rect);
    }
    this.marker = new Phaser.Rectangle(0, 0, 128, 128);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'retrieve'), this);
  };
  QuadtreeExample.prototype.retrieve = function () {
    var tmp$, tmp$_0;
    tmp$ = this.rects.size - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.set_flagged_3c1b1t$(this.rects.get_za3lpa$(i), false);
    }
    var found = this.quadTree.retrieve(this.marker);
    console.log(found);
    tmp$_0 = found.length - 1;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      this.set_flagged_3c1b1t$(found[i_0], true);
    }
  };
  QuadtreeExample.prototype.update = function () {
    this.marker.x = this.game.input.x;
    this.marker.y = this.game.input.y;
  };
  QuadtreeExample.prototype.render = function () {
    var tmp$;
    this.game.debug.quadTree(this.quadTree);
    tmp$ = this.rects.size - 1;
    for (var i = 0; i <= tmp$; i++) {
      if (this.get_flagged_dsgady$(this.rects.get_za3lpa$(i))) {
        this.game.debug.geom(this.rects.get_za3lpa$(i), '#ff0000');
      }
       else {
        this.game.debug.geom(this.rects.get_za3lpa$(i));
      }
      this.game.debug.text(this.rects.get_za3lpa$(i).id, this.rects.get_za3lpa$(i).x + 4, this.rects.get_za3lpa$(i).y + 16);
    }
    this.game.debug.geom(this.marker, '#00bff3', false);
  };
  QuadtreeExample.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'QuadtreeExample',
    baseClasses: []
  };
  function RectangleExample() {
    Phaser.State.call(this);
  }
  RectangleExample.prototype.create = function () {
    this.floor = new Phaser.Rectangle(0, 550, 800, 50);
  };
  RectangleExample.prototype.render = function () {
    this.game.debug.geom(this.floor, '#0fffff');
  };
  RectangleExample.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RectangleExample',
    baseClasses: []
  };
  function RectangleGetPoint() {
    Phaser.State.call(this);
  }
  RectangleGetPoint.prototype.create = function () {
    var rectangle = new Phaser.Rectangle(100, 200, 600, 200);
    var bmd = this.game.add.bitmapData(this.game.width, this.game.height);
    bmd.rect(rectangle.x, rectangle.y, rectangle.width, rectangle.height, '#2d2d2d');
    var p = new Phaser.Point();
    rectangle.getPoint(Phaser.TOP_LEFT, p);
    bmd.rect(p.x, p.y, 2, 2, '#ff00ff');
    rectangle.getPoint(Phaser.TOP_CENTER, p);
    bmd.rect(p.x, p.y, 2, 2, '#ff00ff');
    rectangle.getPoint(Phaser.TOP_RIGHT, p);
    bmd.rect(p.x, p.y, 2, 2, '#ff00ff');
    rectangle.getPoint(Phaser.MIDDLE_LEFT, p);
    bmd.rect(p.x, p.y, 2, 2, '#ff00ff');
    rectangle.getPoint(Phaser.MIDDLE_CENTER, p);
    bmd.rect(p.x, p.y, 2, 2, '#ff00ff');
    rectangle.getPoint(Phaser.MIDDLE_RIGHT, p);
    bmd.rect(p.x, p.y, 2, 2, '#ff00ff');
    rectangle.getPoint(Phaser.BOTTOM_LEFT, p);
    bmd.rect(p.x, p.y, 2, 2, '#ff00ff');
    rectangle.getPoint(Phaser.BOTTOM_CENTER, p);
    bmd.rect(p.x, p.y, 2, 2, '#ff00ff');
    rectangle.getPoint(Phaser.BOTTOM_RIGHT, p);
    bmd.rect(p.x, p.y, 2, 2, '#ff00ff');
    bmd.addToWorld();
  };
  RectangleGetPoint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RectangleGetPoint',
    baseClasses: []
  };
  function RectangleIntersects() {
    Phaser.State.call(this);
  }
  RectangleIntersects.prototype.create = function () {
    this.rectA = new Phaser.Rectangle(0, 0, 200, 100);
    this.rectB = new Phaser.Rectangle(100, 100, 500, 400);
  };
  RectangleIntersects.prototype.update = function () {
    this.rectA.x = this.game.input.activePointer.x;
    this.rectA.y = this.game.input.activePointer.y;
  };
  RectangleIntersects.prototype.render = function () {
    this.game.debug.geom(this.rectA, 'rgba(200,0,0,0.5)');
    this.game.debug.geom(this.rectB, 'rgba(0,0,255,0.5)');
    var intersects = Phaser.Rectangle.intersection(this.rectA, this.rectB);
    this.game.debug.geom(intersects, 'rgba(255,0,0,1)');
  };
  RectangleIntersects.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RectangleIntersects',
    baseClasses: []
  };
  function RectangleRandomPoint() {
    Phaser.State.call(this);
    this.i = 0;
  }
  RectangleRandomPoint.prototype.create = function () {
    this.colors = Phaser.Color.HSVColorWheel();
    this.rectangle = new Phaser.Rectangle(100, 200, 600, 200);
    this.bmd = this.game.add.bitmapData(this.game.width, this.game.height);
    this.bmd.addToWorld();
    this.p = new Phaser.Point();
  };
  RectangleRandomPoint.prototype.update = function () {
    var tmp$;
    tmp$ = 10 - 1;
    for (var c = 0; c <= tmp$; c++) {
      this.rectangle.random(this.p);
      this.p.floor();
      this.bmd.setPixel(this.p.x, this.p.y, this.colors[this.i].r, this.colors[this.i].g, this.colors[this.i].b);
    }
    this.i = Phaser.Math.wrapValue(this.i, 1, 359);
  };
  RectangleRandomPoint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RectangleRandomPoint',
    baseClasses: []
  };
  function RotateLine() {
    Phaser.State.call(this);
  }
  RotateLine.prototype.create = function () {
    this.game.stage.backgroundColor = '#011052';
    this.line = new Phaser.Line(300, 100, 500, 500);
  };
  RotateLine.prototype.update = function () {
    this.line.rotate(1, true);
  };
  RotateLine.prototype.render = function () {
    this.game.debug.geom(this.line);
  };
  RotateLine.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RotateLine',
    baseClasses: []
  };
  function RotatePoint() {
    Phaser.State.call(this);
  }
  RotatePoint.prototype.create = function () {
    this.p1 = new Phaser.Point(300, 300);
    this.p2 = new Phaser.Point(400, 300);
  };
  RotatePoint.prototype.update = function () {
    this.p1.rotate(this.p2.x, this.p2.y, 1, true);
  };
  RotatePoint.prototype.render = function () {
    this.game.context.fillStyle = 'rgb(255,255,0)';
    this.game.context.fillRect(this.p1.x, this.p1.y, 4.0, 4.0);
    this.game.context.fillStyle = 'rgb(255,0,0)';
    this.game.context.fillRect(this.p2.x, this.p2.y, 4.0, 4.0);
  };
  RotatePoint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RotatePoint',
    baseClasses: []
  };
  function AddASpriteToGroup() {
    Phaser.State.call(this);
  }
  AddASpriteToGroup.prototype.preload = function () {
    this.game.load.image('ufo', 'assets/sprites/ufo.png');
    this.game.load.image('baddie', 'assets/sprites/space-baddie.png');
  };
  AddASpriteToGroup.prototype.create = function () {
    var tmp$;
    this.friendAndFoe = this.game.add.group();
    this.enemies = this.game.add.group();
    tmp$ = 16 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.enemies.create(360 + random(Phaser.Math) * 200, 120 + random(Phaser.Math) * 200, 'baddie');
    }
    var ufo = this.game.add.sprite(200, 240, 'ufo');
    this.friendAndFoe.add(ufo);
  };
  AddASpriteToGroup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AddASpriteToGroup',
    baseClasses: []
  };
  function AlignFramesToGrid() {
    Phaser.State.call(this);
  }
  AlignFramesToGrid.prototype.preload = function () {
    this.game.load.atlas('seacreatures', 'assets/sprites/seacreatures_json.png', 'assets/sprites/seacreatures_json.json');
  };
  AlignFramesToGrid.prototype.create = function () {
    this.game.add.sprite(0, 0, this.game.create.grid('grid', 160 * 5, 160 * 3, 160, 160, 'rgba(0, 250, 0, 1)'));
    var group = this.game.add.group();
    group.createMultiple(5, 'seacreatures', mutableListOf(['blueJellyfish0000', 'crab10000', 'flyingFish0000']), true);
    group.align(5, 3, 160, 160, Phaser.CENTER);
  };
  AlignFramesToGrid.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AlignFramesToGrid',
    baseClasses: []
  };
  function AlignSpritesToGrid() {
    Phaser.State.call(this);
  }
  AlignSpritesToGrid.prototype.preload = function () {
    this.game.load.spritesheet('diamonds', 'assets/sprites/diamonds32x24x5.png', 32, 24);
  };
  AlignSpritesToGrid.prototype.create = function () {
    var group = this.game.add.group();
    group.createMultiple(24, 'diamonds', mutableListOf([0, 1, 2, 3, 4]), true);
    group.align(12, -1, 48, 48);
    group.x = 100.0;
    group.y = 64.0;
  };
  AlignSpritesToGrid.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AlignSpritesToGrid',
    baseClasses: []
  };
  function BringAGroupToTop() {
    Phaser.State.call(this);
  }
  BringAGroupToTop.prototype.preload = function () {
    this.game.load.image('beast', 'assets/pics/shadow_of_the_beast2_karamoon.png');
    this.game.load.image('snot', 'assets/pics/nslide_snot.png');
    this.game.load.image('atari1', 'assets/sprites/atari130xe.png');
    this.game.load.image('sonic', 'assets/sprites/sonic_havok_sanity.png');
  };
  BringAGroupToTop.prototype.create = function () {
    var tmp$;
    var bg = this.game.add.sprite(0, 0, 'beast');
    bg.width = 800.0;
    this.group1 = this.game.add.group();
    this.group2 = this.game.add.group();
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var tempSprite = this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'atari1');
      tempSprite.name = 'atari' + i;
      tempSprite.inputEnabled = true;
      tempSprite.input.enableDrag(false, true);
      this.group1.add(tempSprite);
      tempSprite = this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'sonic');
      tempSprite.name = 'sonic' + i;
      tempSprite.inputEnabled = true;
      tempSprite.input.enableDrag(false, true);
      this.group2.add(tempSprite);
    }
    var snot = this.game.add.sprite(this.game.world.centerX, this.game.world.height, 'snot');
    snot.anchor.setTo(0.5, 1);
  };
  BringAGroupToTop.prototype.update = function () {
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.ONE)) {
      this.game.world.bringToTop(this.group1);
    }
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.TWO)) {
      this.game.world.bringToTop(this.group2);
    }
  };
  BringAGroupToTop.prototype.render = function () {
    this.game.debug.inputInfo(32, 32);
  };
  BringAGroupToTop.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BringAGroupToTop',
    baseClasses: []
  };
  function CallAll() {
    Phaser.State.call(this);
  }
  CallAll.prototype.preload = function () {
    this.game.load.spritesheet('item', 'assets/buttons/number-buttons-90x90.png', 90, 90);
    this.game.load.image('reviveBtn', 'assets/buttons/revive-button.png');
  };
  CallAll.prototype.create = function () {
    var tmp$;
    var item;
    tmp$ = 3 - 1;
    for (var i = 0; i <= tmp$; i++) {
      item = this.game.add.sprite(290, 98 * (i + 1), 'item', i);
      item.inputEnabled = true;
      item.events.onInputUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'kill_okw7gk$'));
      item = this.game.add.sprite(388, 98 * (i + 1), 'item', i + 3);
      item.inputEnabled = true;
      item.events.onInputUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'kill_okw7gk$'));
    }
    this.game.add.button(270, 400, 'reviveBtn', Kotlin.getBoundCallableRefForMemberFunction(this, 'reviveAll'), this, 0, 0, 0);
  };
  CallAll.prototype.kill_okw7gk$ = function (item) {
    item.kill();
  };
  CallAll.prototype.reviveAll = function () {
    this.game.world.callAll('revive');
  };
  CallAll.prototype.render = function () {
    this.game.debug.text('Tap or click an item to kill it', 160, 500);
    this.game.debug.text('Press the Revive button to revive them all.', 160, 520);
  };
  CallAll.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CallAll',
    baseClasses: []
  };
  function CallAllAnimations() {
    Phaser.State.call(this);
  }
  CallAllAnimations.prototype.preload = function () {
    this.game.load.spritesheet('coin', 'assets/sprites/coin.png', 32, 32);
  };
  CallAllAnimations.prototype.create = function () {
    var tmp$;
    this.coins = this.game.add.group();
    tmp$ = 50 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.coins.create(this.game.world.randomX, this.game.world.randomY, 'coin', 0);
    }
    this.coins.callAll('animations.add', 'animations', 'spin', [0, 1, 2, 3, 4, 5], 10, true);
    this.coins.callAll('animations.play', 'animations', 'spin');
  };
  CallAllAnimations.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CallAllAnimations',
    baseClasses: []
  };
  function CallAllInput() {
    Phaser.State.call(this);
  }
  CallAllInput.prototype.preload = function () {
    this.game.load.spritesheet('coin', 'assets/sprites/coin.png', 32, 32);
  };
  CallAllInput.prototype.create = function () {
    var tmp$;
    this.coins = this.game.add.group();
    tmp$ = 50 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var coin = this.coins.create(this.game.world.randomX, this.game.world.randomY, 'coin', 0);
    }
    this.coins.setAll('inputEnabled', true);
    this.coins.callAll('events.onInputDown.add', 'events.onInputDown', Kotlin.getBoundCallableRefForMemberFunction(this, 'removeCoin_okw7gk$'));
  };
  CallAllInput.prototype.removeCoin_okw7gk$ = function (item) {
    item.alpha = 0.3;
  };
  CallAllInput.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CallAllInput',
    baseClasses: []
  };
  function CreateGroup() {
    Phaser.State.call(this);
  }
  CreateGroup.prototype.preload = function () {
    this.game.load.image('sonic', 'assets/sprites/sonic_havok_sanity.png');
  };
  CreateGroup.prototype.create = function () {
    var tmp$;
    this.yourGroup = this.game.add.group();
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.yourGroup.create(this.game.world.randomX, this.game.world.randomY, 'sonic');
    }
  };
  CreateGroup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CreateGroup',
    baseClasses: []
  };
  function CreateIfNull() {
    Phaser.State.call(this);
  }
  CreateIfNull.prototype.preload = function () {
    this.game.load.spritesheet('veg', 'assets/sprites/fruitnveg32wh37.png', 32, 32);
  };
  CreateIfNull.prototype.create = function () {
    this.veg = this.game.add.group();
    this.veg.createMultiple(5, 'veg', 0, false);
    this.game.time.events.repeat(Phaser.Timer.SECOND, 20, Kotlin.getBoundCallableRefForMemberFunction(this, 'resurrect'), this);
  };
  CreateIfNull.prototype.resurrect = function () {
    var x = this.game.world.randomX;
    var y = this.game.world.randomY;
    var key = 'veg';
    var frame = this.game.rnd.between(0, 36);
    this.veg.getFirstDead(true, x, y, key, frame);
  };
  CreateIfNull.prototype.render = function () {
    this.game.debug.text('getFirstDead will be called every second', 32, 32);
    this.game.debug.text('Living: ' + this.veg.countLiving() + '   Dead: ' + this.veg.countDead(), 32, 64);
  };
  CreateIfNull.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CreateIfNull',
    baseClasses: []
  };
  function CreateSpriteInAGroup() {
    Phaser.State.call(this);
  }
  CreateSpriteInAGroup.prototype.preload = function () {
    this.game.load.image('ufo', 'assets/sprites/ufo.png');
    this.game.load.image('baddie', 'assets/sprites/space-baddie.png');
  };
  CreateSpriteInAGroup.prototype.create = function () {
    var tmp$;
    this.friendAndFoe = this.game.add.group();
    this.enemies = this.game.add.group();
    this.friendAndFoe.create(200, 240, 'ufo');
    tmp$ = 8 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.createBaddie();
    }
    this.game.input.onTap.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'createBaddie'), this);
  };
  CreateSpriteInAGroup.prototype.createBaddie = function () {
    this.enemies.create(360 + random(Phaser.Math) * 200, 120 + random(Phaser.Math) * 200, 'baddie');
  };
  CreateSpriteInAGroup.prototype.render = function () {
    this.game.debug.text('Tap screen or click to create baddies.', 16, 24);
  };
  CreateSpriteInAGroup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CreateSpriteInAGroup',
    baseClasses: []
  };
  function CreateThumbnail() {
    Phaser.State.call(this);
  }
  CreateThumbnail.prototype.preload = function () {
    this.game.load.image('sky', 'assets/skies/sky1.png');
    this.game.load.image('sonic', 'assets/sprites/sonic_havok_sanity.png');
    this.game.load.image('clown', 'assets/sprites/clown.png');
    this.game.load.image('leaf', 'assets/particles/leaf1.png');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
    this.game.load.spritesheet('coin', 'assets/sprites/coin.png', 32, 32);
    this.game.load.bitmapFont('desyrel', 'assets/fonts/bitmapFonts/desyrel.png', 'assets/fonts/bitmapFonts/desyrel.xml');
    this.game.load.bitmapFont('stack', 'assets/fonts/bitmapFonts/shortStack.png', 'assets/fonts/bitmapFonts/shortStack.xml');
  };
  function CreateThumbnail$create$ObjectLiteral() {
    this.font = '48px Arial';
    this.fill = '#ff0044';
  }
  CreateThumbnail$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  CreateThumbnail.prototype.create = function () {
    var tmp$;
    this.stageBp = this.game.make.bitmapData(800, 600);
    this.thumbnail = this.game.make.bitmapData(204, 154);
    var thumbContainer = this.game.make.sprite(590, 10, this.thumbnail);
    this.game.stage.addChild(thumbContainer);
    this.game.add.image(0, 0, 'sky');
    var graphics = this.game.add.graphics(100, 100);
    graphics.beginFill(16724736);
    graphics.lineStyle(10, 16767232, 1);
    graphics.lineTo(250, 50);
    graphics.lineTo(100, 100);
    graphics.lineTo(250, 220);
    graphics.lineTo(50, 220);
    graphics.lineTo(50, 50);
    graphics.endFill();
    graphics.lineStyle(10, 16711680, 0.8);
    graphics.beginFill(16740363, 1);
    graphics.moveTo(210, 300);
    graphics.lineTo(450, 320);
    graphics.lineTo(570, 350);
    graphics.quadraticCurveTo(600, 0, 480, 100);
    graphics.lineTo(330, 120);
    graphics.lineTo(410, 200);
    graphics.lineTo(210, 300);
    graphics.endFill();
    var coins = this.game.add.group();
    tmp$ = 20 - 1;
    for (var i = 0; i <= tmp$; i++) {
      coins.create(this.game.world.randomX, this.game.world.randomY, 'coin', 0);
    }
    coins.callAll('animations.add', 'animations', 'spin', [0, 1, 2, 3, 4, 5], 10, true);
    coins.callAll('animations.play', 'animations', 'spin');
    var emitter = this.game.add.emitter(this.game.world.centerX, 0, 100);
    emitter.makeParticles('leaf');
    emitter.minParticleSpeed.setTo(-300, 30);
    emitter.maxParticleSpeed.setTo(300, 100);
    emitter.minParticleScale = 0.1;
    emitter.maxParticleScale = 0.5;
    emitter.gravity = 250;
    emitter.flow(2000, 500, 5, -1);
    this.text1 = this.game.add.bitmapText(200, 100, 'desyrel', 'BitmapText', 64);
    this.text2 = this.game.add.bitmapText(400, 400, 'stack', 'drawFull', 32);
    enable_2(this.game.physics.arcade, [this.text1, this.text2]);
    this.text1.body.velocity.setTo(200, 200);
    this.text1.body.collideWorldBounds = true;
    this.text1.body.bounce.set(1);
    this.text2.body.velocity.setTo(-100, -100);
    this.text2.body.collideWorldBounds = true;
    this.text2.body.bounce.set(1);
    var sonic = this.game.add.sprite(50, 280, 'sonic');
    sonic.addChild(this.game.make.sprite(80, 130, 'clown'));
    sonic.addChild(this.game.make.sprite(110, 130, 'clown'));
    var clown3 = sonic.addChild(this.game.make.sprite(140, 130, 'clown'));
    clown3.scale.set(2);
    clown3.anchor.set(1, 1);
    var mushroom = this.game.add.sprite(500, 400, 'mushroom');
    mushroom.scale.set(2);
    mushroom.angle = 24.0;
    var sonic2 = this.game.add.sprite(400, 200, 'sonic');
    sonic2.scale.set(2);
    this.game.add.text(440, 530, 'Click to capture', new CreateThumbnail$create$ObjectLiteral());
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'makeThumbnail'), this);
  };
  CreateThumbnail.prototype.makeThumbnail = function () {
    this.stageBp.drawFull(this.game.world);
    this.thumbnail.rect(0, 0, 204, 154, '#000');
    this.thumbnail.copy(this.stageBp, 0, 0, 800, 600, 2, 2, 200, 150);
  };
  CreateThumbnail.prototype.update = function () {
    this.game.physics.arcade.collide(this.text1, this.text2);
  };
  CreateThumbnail.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CreateThumbnail',
    baseClasses: []
  };
  function DepthSort() {
    Phaser.State.call(this);
    this.oldY = 0;
    this.locs = mutableListOf([]);
  }
  DepthSort.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser-dude.png');
    this.game.load.tilemap('desert', 'assets/tilemaps/maps/depthsort.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('ground_1x1', 'assets/tilemaps/tiles/ground_1x1.png');
    this.game.load.spritesheet('trees', 'assets/tilemaps/tiles/walls_1x2.png', 32, 64);
  };
  DepthSort.prototype.create = function () {
    var tmp$;
    this.map = this.game.add.tilemap('desert');
    this.map.addTilesetImage('ground_1x1');
    this.layer = this.map.createLayer('Tile Layer 1');
    this.group = this.game.add.group();
    tmp$ = 200 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.createUniqueLocation();
    }
    this.sprite = this.group.create(300, 28, 'phaser');
    this.group.sort();
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  DepthSort.prototype.createUniqueLocation = function () {
    var x = 0;
    var y = 0;
    var idx = 0;
    do {
      x = (Phaser.Math.snapTo(this.game.world.randomX, 32) | 0) / 32 | 0;
      y = (Phaser.Math.snapTo(this.game.world.randomY, 32) | 0) / 32 | 0;
      if (y > 17) {
        y = 17;
      }
      idx = y * 17 + x;
    }
     while (this.locs.indexOf_za3rmp$(idx) !== -1);
    this.locs.add_za3rmp$(idx);
    this.group.create(x * 32, y * 32, 'trees', this.game.rnd.integerInRange(0, 7));
  };
  DepthSort.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.sprite.x = this.sprite.x - 2;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.x = this.sprite.x + 2;
    }
    if (this.cursors.up.isDown) {
      this.sprite.y = this.sprite.y - 2;
    }
     else if (this.cursors.down.isDown) {
      this.sprite.y = this.sprite.y + 2;
    }
    this.group.sort('y', Phaser.Group.SORT_ASCENDING);
  };
  DepthSort.prototype.render = function () {
    this.game.debug.text('Sprite z-depth: ' + this.sprite.z, 10, 20);
  };
  DepthSort.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DepthSort',
    baseClasses: []
  };
  function DisplayOrder() {
    Phaser.State.call(this);
  }
  DisplayOrder.prototype.preload = function () {
    this.game.load.image('atari1', 'assets/sprites/atari130xe.png');
    this.game.load.image('atari2', 'assets/sprites/atari800xl.png');
    this.game.load.image('card', 'assets/sprites/mana_card.png');
  };
  DisplayOrder.prototype.create = function () {
    this.items = this.game.add.group();
    this.items.create(64, 100, 'atari1');
    this.card = this.items.create(240, 80, 'card');
    this.items.create(280, 100, 'atari2');
    this.game.input.onTap.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'removeCard'), this);
  };
  DisplayOrder.prototype.removeCard = function () {
    this.card.kill();
    this.game.input.onTap.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'replaceCard'), this);
  };
  DisplayOrder.prototype.replaceCard = function () {
    var deadCard = this.items.getFirstDead();
    revive(deadCard != null ? deadCard : Kotlin.throwNPE());
  };
  DisplayOrder.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DisplayOrder',
    baseClasses: []
  };
  function FilterByProperty() {
    Phaser.State.call(this);
  }
  FilterByProperty.prototype.preload = function () {
    this.game.load.image('blue', 'assets/sprites/blue_ball.png');
    this.game.load.image('red', 'assets/sprites/orb-red.png');
    this.game.load.image('card', 'assets/sprites/mana_card.png');
    this.game.load.image('hotdog', 'assets/sprites/hotdog.png');
  };
  FilterByProperty.prototype.create = function () {
    var tmp$;
    this.items = this.game.add.group();
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.items.create(this.game.world.randomX, this.game.world.randomY, 'blue');
      this.items.create(this.game.world.randomX, this.game.world.randomY, 'red');
      this.items.create(this.game.world.randomX, this.game.world.randomY, 'card');
    }
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'pickCard'), this);
  };
  FilterByProperty.prototype.pickCard = function () {
    var card = this.items.iterate('key', 'card', Phaser.Group.RETURN_CHILD);
    if (card !== null) {
      card.loadTexture('hotdog');
    }
  };
  FilterByProperty.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FilterByProperty',
    baseClasses: []
  };
  function ForEach() {
    Phaser.State.call(this);
    this.spriteAlphaIncSpeed = mutableMapOf([]);
    this.baseAlphaIncSpeed = 0.006;
  }
  ForEach.prototype.get_alphaIncSpeed_jci6ia$ = function ($receiver) {
    var tmp$;
    return (tmp$ = this.spriteAlphaIncSpeed.get_za3rmp$($receiver)) != null ? tmp$ : Kotlin.throwNPE();
  };
  ForEach.prototype.set_alphaIncSpeed_n4iyx8$ = function ($receiver, value) {
    this.spriteAlphaIncSpeed.put_wn2jw4$($receiver, value);
  };
  ForEach.prototype.preload = function () {
    this.game.load.spritesheet('item', 'assets/buttons/number-buttons-90x90.png', 90, 90);
  };
  ForEach.prototype.create = function () {
    var tmp$;
    tmp$ = 3 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.set_alphaIncSpeed_n4iyx8$(this.game.add.sprite(290, 98 * (i + 1), 'item', i), this.baseAlphaIncSpeed * (i + 1));
      this.set_alphaIncSpeed_n4iyx8$(this.game.add.sprite(388, 98 * (i + 1), 'item', i + 3), this.baseAlphaIncSpeed * (i + 4));
    }
  };
  function ForEach$update$lambda(this$ForEach) {
    return function (item) {
      item.alpha = item.alpha - this$ForEach.get_alphaIncSpeed_jci6ia$(item);
      if (item.alpha < 0.001 || item.alpha > 0.999) {
        this$ForEach.set_alphaIncSpeed_n4iyx8$(item, this$ForEach.get_alphaIncSpeed_jci6ia$(item) * -1);
      }
    };
  }
  ForEach.prototype.update = function () {
    this.game.world.forEach(ForEach$update$lambda(this));
  };
  ForEach.prototype.render = function () {
    this.game.debug.text('Alpha of items is always changing.', 280, 480);
  };
  ForEach.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ForEach',
    baseClasses: []
  };
  function GetFirst() {
    Phaser.State.call(this);
    this.timer = 0.0;
    this.cycle = 0.0;
  }
  GetFirst.prototype.preload = function () {
    this.game.load.spritesheet('item', 'assets/buttons/number-buttons-90x90.png', 90, 90);
    this.game.load.image('reviveBtn', 'assets/buttons/revive-button.png');
  };
  GetFirst.prototype.create = function () {
    var tmp$;
    var item;
    tmp$ = 3 - 1;
    for (var i = 0; i <= tmp$; i++) {
      item = this.game.add.sprite(290, 98 * (i + 1), 'item', i);
      item = this.game.add.sprite(388, 98 * (i + 1), 'item', i + 3);
    }
    this.timer = 0.0;
    this.cycle = 1000.0;
  };
  GetFirst.prototype.update = function () {
    if (this.game.time.now > this.timer) {
      this.timer = this.game.time.now + this.cycle;
      var item = this.game.world.getFirstAlive();
      if (item != null) {
        item.kill();
      }
    }
  };
  GetFirst.prototype.render = function () {
    this.game.debug.text('One item will be killed each second.', 280, 420);
    this.game.debug.text('Living: ' + this.game.world.countLiving() + ', Dead: ' + this.game.world.countDead(), 330, 440);
  };
  GetFirst.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GetFirst',
    baseClasses: []
  };
  function GetFirstDead() {
    Phaser.State.call(this);
  }
  GetFirstDead.prototype.preload = function () {
    this.game.load.spritesheet('veg', 'assets/sprites/fruitnveg32wh37.png', 32, 32);
  };
  GetFirstDead.prototype.create = function () {
    this.veg = this.game.add.group();
    this.veg.createMultiple(20, 'veg', 0, false);
    this.game.time.events.repeat(Phaser.Timer.SECOND, 20, Kotlin.getBoundCallableRefForMemberFunction(this, 'resurrect'), this);
  };
  GetFirstDead.prototype.resurrect = function () {
    var item = this.veg.getFirstDead();
    if (item != null) {
      reset(item, this.game.world.randomX, this.game.world.randomY);
      item.frame = this.game.rnd.integerInRange(0, 36);
    }
  };
  GetFirstDead.prototype.update = function () {
  };
  GetFirstDead.prototype.render = function () {
    this.game.debug.text('One item will be resurrected every second', 32, 32);
    this.game.debug.text('Living: ' + this.veg.countLiving() + '   Dead: ' + this.veg.countDead(), 32, 64);
  };
  GetFirstDead.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GetFirstDead',
    baseClasses: []
  };
  function GroupAsLayer() {
    Phaser.State.call(this);
  }
  GroupAsLayer.prototype.preload = function () {
    this.game.world.setBounds(0, 0, 1280, 800);
    this.game.load.image('ground', 'assets/tests/ground-2x.png');
    this.game.load.image('river', 'assets/tests/river-2x.png');
    this.game.load.image('sky', 'assets/tests/sky-2x.png');
    this.game.load.image('cloud0', 'assets/tests/cloud-big-2x.png');
    this.game.load.image('cloud1', 'assets/tests/cloud-narrow-2x.png');
    this.game.load.image('cloud2', 'assets/tests/cloud-small-2x.png');
    this.game.load.spritesheet('ufo', 'assets/sprites/ufo.png', 24, 21);
  };
  GroupAsLayer.prototype.create = function () {
    var skyLayer = this.game.add.group();
    var cloudLayer = this.game.add.group();
    var groundLayer = this.game.add.group();
    var spriteLayer = this.game.add.group();
    var riverLayer = this.game.add.group();
    var sky = skyLayer.create(0, 0, 'sky');
    var cloud0 = cloudLayer.create(200, 120, 'cloud0');
    var cloud1 = cloudLayer.create(-60, 120, 'cloud1');
    var cloud2 = cloudLayer.create(900, 170, 'cloud2');
    var ground = groundLayer.create(0, 360, 'ground');
    var river = riverLayer.create(0, 400, 'river');
    var ufo = spriteLayer.create(360, 240, 'ufo');
    ufo.anchor.setTo(0.5);
  };
  GroupAsLayer.prototype.render = function () {
    this.game.debug.text('sky layer:    z = 0', 16, 20);
    this.game.debug.text('cloud layer:  z = 1', 16, 36);
    this.game.debug.text('ground layer: z = 2', 16, 52);
    this.game.debug.text('sprite layer: z = 3', 16, 68);
    this.game.debug.text('river layer:  z = 4', 16, 84);
  };
  GroupAsLayer.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GroupAsLayer',
    baseClasses: []
  };
  function GroupBounds() {
    Phaser.State.call(this);
  }
  GroupBounds.prototype.preload = function () {
    this.game.load.image('pic', 'assets/pics/archmage_in_your_face.png');
    this.game.load.spritesheet('diamonds', 'assets/sprites/diamonds32x24x5.png', 32, 24);
  };
  GroupBounds.prototype.create = function () {
    this.game.stage.backgroundColor = '#2d2d2d';
    this.pic = this.game.add.sprite(0, 0, 'pic');
    this.pic.alignIn(this.game.world.bounds, Phaser.CENTER);
    this.group = this.game.add.group();
    this.group.create(0, 0, 'diamonds', 0);
    this.group.create(-200, -200, 'diamonds', 1);
    this.group.create(100, -200, 'diamonds', 2);
    this.group.create(100, 100, 'diamonds', 3);
    this.group.alignIn(this.pic, Phaser.RIGHT_CENTER);
    this.bounds = getBounds(this.group);
  };
  GroupBounds.prototype.render = function () {
    this.game.debug.geom(this.bounds);
    this.game.debug.geom(this.group.position, '#ffff00');
  };
  GroupBounds.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GroupBounds',
    baseClasses: []
  };
  function GroupScale() {
    Phaser.State.call(this);
  }
  GroupScale.prototype.preload = function () {
    this.game.load.spritesheet('coin', 'assets/sprites/coin.png', 32, 32);
  };
  GroupScale.prototype.create = function () {
    var tmp$;
    this.coins = this.game.add.group();
    tmp$ = 50 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.coins.create(this.game.world.randomX / 2, this.game.world.randomY / 2, 'coin', 0);
    }
    this.coins.scale.set(2, 2);
  };
  GroupScale.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GroupScale',
    baseClasses: []
  };
  function GroupTransform() {
    Phaser.State.call(this);
  }
  GroupTransform.prototype.preload = function () {
    this.game.load.image('eye', 'assets/sprites/robot/eye.png');
    this.game.load.image('body', 'assets/sprites/robot/body.png');
    this.game.load.image('arm-l', 'assets/sprites/robot/arm-l.png');
    this.game.load.image('arm-r', 'assets/sprites/robot/arm-r.png');
    this.game.load.image('leg-l', 'assets/sprites/robot/leg-l.png');
    this.game.load.image('leg-r', 'assets/sprites/robot/leg-r.png');
  };
  GroupTransform.prototype.create = function () {
    this.game.stage.backgroundColor = '#124184';
    this.robot = this.game.add.group();
    this.robot.create(90, 175, 'arm-l');
    this.robot.create(549, 175, 'arm-r');
    this.robot.create(270, 325, 'leg-l');
    this.robot.create(410, 325, 'leg-r');
    this.robot.create(219, 32, 'body');
    this.robot.create(335, 173, 'eye');
    this.robot.setAll('inputEnabled', true);
    this.robot.callAll('input.enableDrag', 'input');
  };
  GroupTransform.prototype.render = function () {
    this.game.debug.text('The robot is a group and every component is a sprite.', 16, 20);
    this.game.debug.text('Drag parts to re-position them. ', 16, 40);
  };
  GroupTransform.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GroupTransform',
    baseClasses: []
  };
  function GroupTransformRotate() {
    Phaser.State.call(this);
  }
  GroupTransformRotate.prototype.preload = function () {
    this.game.load.image('eye', 'assets/sprites/robot/eye.png');
    this.game.load.image('body', 'assets/sprites/robot/body.png');
    this.game.load.image('arm-l', 'assets/sprites/robot/arm-l.png');
    this.game.load.image('arm-r', 'assets/sprites/robot/arm-r.png');
    this.game.load.image('leg-l', 'assets/sprites/robot/leg-l.png');
    this.game.load.image('leg-r', 'assets/sprites/robot/leg-r.png');
  };
  GroupTransformRotate.prototype.create = function () {
    this.robot = this.game.add.group();
    this.robot.x = 300.0;
    this.robot.y = 200.0;
    this.robot.pivot.x = 300.0;
    this.robot.pivot.y = 300.0;
    this.robot.create(90, 175, 'arm-l');
    this.robot.create(549, 175, 'arm-r');
    this.robot.create(270, 325, 'leg-l');
    this.robot.create(410, 325, 'leg-r');
    this.robot.create(219, 32, 'body');
    this.robot.create(335, 173, 'eye');
  };
  GroupTransformRotate.prototype.update = function () {
    this.robot.rotation = this.robot.rotation + 0.02;
  };
  GroupTransformRotate.prototype.render = function () {
    this.game.debug.text('The robot is a group and every component is a sprite.', 240, 580);
  };
  GroupTransformRotate.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GroupTransformRotate',
    baseClasses: []
  };
  function GroupTransformTween() {
    Phaser.State.call(this);
  }
  GroupTransformTween.prototype.preload = function () {
    this.game.load.image('eye', 'assets/sprites/robot/eye.png');
    this.game.load.image('body', 'assets/sprites/robot/body.png');
    this.game.load.image('arm-l', 'assets/sprites/robot/arm-l.png');
    this.game.load.image('arm-r', 'assets/sprites/robot/arm-r.png');
    this.game.load.image('leg-l', 'assets/sprites/robot/leg-l.png');
    this.game.load.image('leg-r', 'assets/sprites/robot/leg-r.png');
  };
  function GroupTransformTween$create$ObjectLiteral() {
    this.x = 1.2;
    this.y = 1.2;
  }
  GroupTransformTween$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  GroupTransformTween.prototype.create = function () {
    this.robot = this.game.add.group();
    this.leftArm = this.robot.create(90, 175, 'arm-l');
    this.rightArm = this.robot.create(549, 175, 'arm-r');
    this.leftLeg = this.robot.create(270, 325, 'leg-l');
    this.rightLeg = this.robot.create(410, 325, 'leg-r');
    this.body = this.robot.create(219, 32, 'body');
    this.eye = this.robot.create(335, 173, 'eye');
    this.game.add.tween(this.robot.scale).to(new GroupTransformTween$create$ObjectLiteral(), 1000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Back, 'InOut'), true, 0, 0).yoyo(true);
  };
  GroupTransformTween.prototype.render = function () {
    this.game.debug.text('The robot is a group and every component is a sprite.', 32, 32);
  };
  GroupTransformTween.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GroupTransformTween',
    baseClasses: []
  };
  function HasProperty() {
    Phaser.State.call(this);
  }
  HasProperty.prototype.preload = function () {
    this.game.load.spritesheet('coin', 'assets/sprites/coin.png', 32, 32);
  };
  HasProperty.prototype.create = function () {
    this.coins = this.game.add.group();
    this.coins.createMultiple(10, 'coin');
    this.coins.callAll('animations.add', 'animations', 'spin', [0, 1, 2, 3, 4, 5], 10, true);
    var test = this.coins.getAt(2);
    console.log(test.x);
    this.coins.addAll('x', 10);
    console.log(test.x);
  };
  HasProperty.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'HasProperty',
    baseClasses: []
  };
  function MoveToAnotherGroup() {
    Phaser.State.call(this);
  }
  MoveToAnotherGroup.prototype.preload = function () {
    this.game.load.image('ship1', 'assets/sprites/bsquadron1.png');
    this.game.load.image('ship2', 'assets/sprites/bsquadron3.png');
  };
  function MoveToAnotherGroup$create$ObjectLiteral() {
    this.y = -150;
  }
  MoveToAnotherGroup$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function MoveToAnotherGroup$create$ObjectLiteral_0() {
    this.y = 600;
  }
  MoveToAnotherGroup$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  MoveToAnotherGroup.prototype.create = function () {
    var tmp$;
    this.group1 = this.game.add.group();
    this.group1.y = 600.0;
    this.group2 = this.game.add.group();
    this.group2.y = -150.0;
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.group1.create(this.game.rnd.between(0, 740), this.game.rnd.between(0, 100), 'ship1');
      this.group2.create(this.game.rnd.between(0, 736), this.game.rnd.between(0, 100), 'ship2');
    }
    this.game.add.tween(this.group1).to(new MoveToAnotherGroup$create$ObjectLiteral(), 5000, 'Linear', true, 0, -1);
    this.game.add.tween(this.group2).to(new MoveToAnotherGroup$create$ObjectLiteral_0(), 5000, 'Linear', true, 0, -1);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'moveShips'), this);
  };
  MoveToAnotherGroup.prototype.moveShips = function () {
    this.group1.moveAll(this.group2);
  };
  MoveToAnotherGroup.prototype.render = function () {
    this.game.debug.text('Group 1 size: ' + this.group1.length, 32, 32);
    this.game.debug.text('Group 2 size: ' + this.group2.length, 32, 64);
    if (this.group1.length === 10) {
      this.game.debug.text('Click to move children', 32, 96);
    }
  };
  MoveToAnotherGroup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MoveToAnotherGroup',
    baseClasses: []
  };
  function NestedGroups() {
    Phaser.State.call(this);
  }
  NestedGroups.prototype.preload = function () {
    this.game.load.image('ball', 'assets/sprites/pangball.png');
    this.game.load.image('arrow', 'assets/sprites/asteroids_ship.png');
  };
  NestedGroups.prototype.create = function () {
    var tmp$;
    this.ballsGroup = this.game.add.group();
    this.shipsGroup = this.game.add.group();
    tmp$ = 20 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.ballsGroup.create(this.game.rnd.integerInRange(0, 128), this.game.world.randomY, 'ball');
      this.shipsGroup.create(this.game.rnd.integerInRange(0, 128), this.game.world.randomY, 'arrow');
    }
    this.ballsGroup.add(this.shipsGroup);
  };
  NestedGroups.prototype.update = function () {
    this.ballsGroup.x = this.ballsGroup.x + 0.1;
    this.shipsGroup.x = this.shipsGroup.x + 0.1;
  };
  NestedGroups.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'NestedGroups',
    baseClasses: []
  };
  function Recycling() {
    Phaser.State.call(this);
  }
  Recycling.prototype.preload = function () {
    this.game.load.image('baddie', 'assets/sprites/space-baddie.png');
    this.game.load.spritesheet('button', 'assets/buttons/baddie-buttons.png', 224, 70);
  };
  Recycling.prototype.create = function () {
    var tmp$;
    this.enemies = this.game.add.group();
    tmp$ = 8 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.enemies.create(360 + random(Phaser.Math) * 200, 120 + random(Phaser.Math) * 200, 'baddie');
    }
    this.game.add.button(16, 50, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'createBaddie'), this, 0, 0, 0);
    this.game.add.button(16, 130, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'killBaddie'), this, 1, 1, 1);
  };
  Recycling.prototype.killBaddie = function () {
    var baddie = this.enemies.getFirstAlive();
    if (baddie != null) {
      baddie.kill();
    }
  };
  Recycling.prototype.createBaddie = function () {
    var enemy = this.enemies.getFirstExists(false);
    if (enemy != null) {
      revive(enemy);
    }
  };
  Recycling.prototype.render = function () {
    this.game.debug.text('Recycle baddies from a group using getFirstExists.', 16, 24);
    this.game.debug.text('Notice that you cannot add more than 8 baddies since we only create 8 instance.', 16, 36);
    this.game.debug.text('Living baddies: ' + this.enemies.countLiving(), 340, 420);
  };
  Recycling.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Recycling',
    baseClasses: []
  };
  function Remove() {
    Phaser.State.call(this);
  }
  Remove.prototype.preload = function () {
    this.game.load.spritesheet('item', 'assets/buttons/number-buttons-90x90.png', 90, 90);
    this.game.load.image('rect', 'assets/tests/200x100corners.png');
  };
  Remove.prototype.create = function () {
    var tmp$;
    this.items = this.game.add.group();
    var item;
    tmp$ = 6 - 1;
    for (var i = 0; i <= tmp$; i++) {
      item = this.items.create(90, 16 + 90 * i, 'item', i);
      item.name = 'block' + i;
      item.inputEnabled = true;
      item.input.enableDrag();
      item.input.enableSnap(90, 90, false, true);
      item.events.onDragStop.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'dropHandler_xslgx6$'), this);
    }
    var rect = this.game.add.sprite(390, 0, 'rect');
    rect.scale.setTo(2.0, 3.0);
  };
  Remove.prototype.render = function () {
    this.game.debug.text('Group size: ' + this.items.total, 74, 580);
    this.game.debug.text('Drop here to remove item from the Group', 394, 24);
  };
  Remove.prototype.dropHandler_xslgx6$ = function (item, pointer) {
    if (item.x < 90) {
      item.x = 90.0;
    }
     else if (item.x > 400) {
      this.items.remove(item);
    }
  };
  Remove.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Remove',
    baseClasses: []
  };
  function RemoveBetween() {
    Phaser.State.call(this);
  }
  RemoveBetween.prototype.preload = function () {
    this.game.load.image('wasp', 'assets/sprites/wasp.png');
    this.game.load.image('sonic', 'assets/sprites/sonic_havok_sanity.png');
    this.game.load.image('phaser', 'assets/sprites/phaser.png');
  };
  RemoveBetween.prototype.create = function () {
    var tmp$, tmp$_0, tmp$_1;
    this.sprites = this.game.add.group();
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.sprites.create(this.game.world.randomX, this.game.world.randomY, 'wasp');
    }
    tmp$_0 = 10 - 1;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      this.sprites.create(this.game.world.randomX, this.game.world.randomY, 'sonic');
    }
    tmp$_1 = 10 - 1;
    for (var i_1 = 0; i_1 <= tmp$_1; i_1++) {
      this.sprites.create(this.game.world.randomX, this.game.world.randomY, 'phaser');
    }
    this.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'remove'), this);
  };
  RemoveBetween.prototype.remove = function () {
    this.sprites.removeBetween(10, 19);
  };
  RemoveBetween.prototype.render = function () {
    this.game.debug.text('Group size: ' + this.sprites.total, 32, 32);
  };
  RemoveBetween.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RemoveBetween',
    baseClasses: []
  };
  function RemoveCheck() {
    Phaser.State.call(this);
  }
  RemoveCheck.prototype.preload = function () {
    this.game.load.image('wasp', 'assets/sprites/wasp.png');
    this.game.load.image('sonic', 'assets/sprites/sonic_havok_sanity.png');
    this.game.load.image('phaser', 'assets/sprites/phaser.png');
  };
  RemoveCheck.prototype.create = function () {
    var tmp$;
    this.group = this.game.add.group();
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.group.create(this.game.world.randomX, this.game.world.randomY, 'wasp');
    }
    this.sprite = this.game.add.sprite(200, 20, 'sonic');
    this.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'remove'), this);
  };
  RemoveCheck.prototype.remove = function () {
    this.group.remove(this.sprite);
  };
  RemoveCheck.prototype.render = function () {
    this.game.debug.text('Group size: ' + this.group.total, 32, 32);
  };
  RemoveCheck.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RemoveCheck',
    baseClasses: []
  };
  function Replace() {
    Phaser.State.call(this);
    this.selected = null;
  }
  Replace.prototype.preload = function () {
    this.game.load.spritesheet('item', 'assets/buttons/number-buttons-90x90.png', 90, 90);
  };
  Replace.prototype.create = function () {
    var tmp$;
    this.left = this.game.add.group();
    this.right = this.game.add.group();
    var item;
    tmp$ = 3 - 1;
    for (var i = 0; i <= tmp$; i++) {
      item = this.left.create(290, 98 * (i + 1), 'item', i);
      item.inputEnabled = true;
      item.events.onInputUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'select_xslgx6$'));
      item = this.right.create(400, 98 * (i + 1), 'item', i + 3);
      item.inputEnabled = true;
      item.events.onInputUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'select_xslgx6$'));
    }
    this.leftText = this.game.add.text(290, 20, '', TextStyle('14px Arial', void 0, void 0, void 0, void 0, void 0, '#fff'));
    this.rightText = this.game.add.text(400, 20, '', TextStyle('14px Arial', void 0, void 0, void 0, void 0, void 0, '#fff'));
    this.leftText.text = 'Left Group\nTotal: ' + this.left.total;
    this.rightText.text = 'Right Group\nTotal: ' + this.right.total;
    this.game.add.text(260, 450, 'Click one item, then another to replace it', TextStyle('14px Arial', void 0, void 0, void 0, void 0, void 0, '#fff'));
  };
  function Replace$select$lambda$ObjectLiteral(closure$selected) {
    this.x = closure$selected.x;
    this.y = closure$selected.y;
  }
  Replace$select$lambda$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Replace.prototype.select_xslgx6$ = function (item, pointer) {
    if (this.selected == null) {
      item.alpha = 0.5;
      this.selected = item;
    }
     else {
      var tmp$;
      var selected = (tmp$ = this.selected) != null ? tmp$ : Kotlin.throwNPE();
      if (selected.parent !== item.parent) {
        this.game.add.tween(item).to(new Replace$select$lambda$ObjectLiteral(selected), 500, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Quartic, 'Out'), true);
        selected.parent.swapChildren(selected, item);
        selected.inputEnabled = false;
        this.leftText.text = 'Left Group\nTotal: ' + this.left.total;
        this.rightText.text = 'Right Group\nTotal: ' + this.right.total;
      }
       else {
        selected.alpha = 1.0;
      }
      this.selected = null;
    }
  };
  Replace.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Replace',
    baseClasses: []
  };
  function SetAll() {
    Phaser.State.call(this);
    this.spriteAlphaIncSpeed = mutableMapOf([]);
    this.baseIncSpeed = 0.006;
  }
  SetAll.prototype.get_alphaIncSpeed_jci6ia$ = function ($receiver) {
    var tmp$;
    return (tmp$ = this.spriteAlphaIncSpeed.get_za3rmp$($receiver)) != null ? tmp$ : Kotlin.throwNPE();
  };
  SetAll.prototype.set_alphaIncSpeed_n4iyx8$ = function ($receiver, value) {
    this.spriteAlphaIncSpeed.put_wn2jw4$($receiver, value);
  };
  SetAll.prototype.preload = function () {
    this.game.load.spritesheet('item', 'assets/buttons/number-buttons-90x90.png', 90, 90);
  };
  SetAll.prototype.create = function () {
    var tmp$;
    tmp$ = 3 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.set_alphaIncSpeed_n4iyx8$(this.game.add.sprite(290, 98 * (i + 1), 'item', i), this.baseIncSpeed * (i + 1));
      this.set_alphaIncSpeed_n4iyx8$(this.game.add.sprite(388, 98 * (i + 1), 'item', i + 3), this.baseIncSpeed * (i + 4));
    }
    this.game.input.onTap.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'resetAlpha'), this);
  };
  SetAll.prototype.resetAlpha = function () {
    this.game.world.setAll('alpha', random(Phaser.Math));
  };
  SetAll.prototype.render = function () {
    this.game.debug.text('Tap or click to set random alpha of all the items.', 240, 480);
  };
  SetAll.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SetAll',
    baseClasses: []
  };
  function Sort() {
    Phaser.State.call(this);
  }
  Sort.prototype.preload = function () {
    this.game.load.spritesheet('trees', 'assets/tilemaps/tiles/walls_1x2.png', 32, 64);
  };
  Sort.prototype.create = function () {
    var tmp$, tmp$_0;
    this.group = this.game.add.group();
    var locs = mutableListOf([]);
    tmp$ = 16 - 1;
    for (var i = 0; i <= tmp$; i++) {
      locs.add_za3rmp$(i * 32 + random(Phaser.Math));
    }
    console.log(locs);
    var $receiver = locs;
    locs = toMutableList(Phaser.ArrayUtils.shuffle(Kotlin.kotlin.collections.copyToArray($receiver)));
    console.log(locs);
    tmp$_0 = 16 - 1;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      this.group.create(400, locs.get_za3lpa$(i_0), 'trees', 0);
    }
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'sort'), this);
  };
  Sort.prototype.sort = function () {
    var tmp$;
    this.group.sort('y', Phaser.Group.SORT_ASCENDING);
    tmp$ = 16 - 1;
    for (var i = 0; i <= tmp$; i++) {
      console.log(this.group.children[i].z, '=', this.group.children[i].y);
    }
  };
  Sort.prototype.render = function () {
    this.game.debug.text('Click to sort', 10, 20);
  };
  Sort.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Sort',
    baseClasses: []
  };
  function SubGroupsGroupLength() {
    Phaser.State.call(this);
  }
  SubGroupsGroupLength.prototype.preload = function () {
    this.game.load.image('ufo', 'assets/sprites/ufo.png');
    this.game.load.image('baddie', 'assets/sprites/space-baddie.png');
    this.game.load.image('purple-baddie', 'assets/sprites/space-baddie-purple.png');
  };
  SubGroupsGroupLength.prototype.create = function () {
    var tmp$;
    this.friendAndFoe = this.game.add.group();
    this.enemies = this.game.add.group();
    this.normalBaddies = this.game.add.group();
    this.purpleBaddies = this.game.add.group();
    this.enemies.add(this.normalBaddies);
    this.enemies.add(this.purpleBaddies);
    this.friendAndFoe.create(200, 240, 'ufo');
    tmp$ = 16 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.createBaddie();
    }
    this.game.input.onTap.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'createBaddie'), this);
  };
  SubGroupsGroupLength.prototype.createBaddie = function () {
    var baddie;
    if (random(Phaser.Math) > 0.5) {
      baddie = this.purpleBaddies.create(360 + random(Phaser.Math) * 200, 120 + random(Phaser.Math) * 200, 'purple-baddie');
    }
     else {
      baddie = this.normalBaddies.create(360 + random(Phaser.Math) * 200, 120 + random(Phaser.Math) * 200, 'baddie');
    }
  };
  SubGroupsGroupLength.prototype.render = function () {
    this.game.debug.style = '#fff';
    this.game.debug.text('Tap screen or click to create baddies.', 16, 24);
    this.game.debug.text('enemies: ' + this.enemies.length + ' (actually ' + this.enemies.length + ' groups)', 16, 48);
    this.game.debug.text('normal baddies: ' + this.normalBaddies.length, 16, 60);
    this.game.debug.text('purple baddies: ' + this.purpleBaddies.length, 16, 72);
    this.game.debug.text('friends: ' + this.friendAndFoe.length, 16, 96);
  };
  SubGroupsGroupLength.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SubGroupsGroupLength',
    baseClasses: []
  };
  function SwapChildrenInAGroup() {
    Phaser.State.call(this);
  }
  SwapChildrenInAGroup.prototype.preload = function () {
    this.game.load.image('atari1', 'assets/sprites/atari130xe.png');
    this.game.load.image('atari2', 'assets/sprites/atari800xl.png');
  };
  SwapChildrenInAGroup.prototype.create = function () {
    this.atari1 = this.game.add.sprite(100, 100, 'atari1');
    this.atari2 = this.game.add.sprite(250, 90, 'atari2');
    this.game.input.onTap.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'swapSprites'), this);
  };
  SwapChildrenInAGroup.prototype.swapSprites = function () {
    this.game.world.swap(this.atari1, this.atari2);
  };
  SwapChildrenInAGroup.prototype.render = function () {
    this.game.debug.text('Tap screen to swap the children and therefore swap their indexes.', 10, 280);
  };
  SwapChildrenInAGroup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SwapChildrenInAGroup',
    baseClasses: []
  };
  function BoundsRect() {
    Phaser.State.call(this);
  }
  BoundsRect.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari800xl.png');
  };
  BoundsRect.prototype.create = function () {
    this.game.stage.backgroundColor = '#2d2d2d';
    this.bounds = new Phaser.Rectangle(100, 100, 500, 400);
    var graphics = this.game.add.graphics(this.bounds.x, this.bounds.y);
    graphics.beginFill(119);
    graphics.drawRect(0, 0, this.bounds.width, this.bounds.height);
    this.sprite = this.game.add.sprite(300, 300, 'atari');
    this.sprite.inputEnabled = true;
    this.sprite.anchor.set(0.5);
    this.sprite.input.enableDrag();
    this.sprite.input.boundsRect = this.bounds;
  };
  BoundsRect.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BoundsRect',
    baseClasses: []
  };
  function BoundsSprite() {
    Phaser.State.call(this);
  }
  BoundsSprite.prototype.preload = function () {
    this.game.load.image('pic', 'assets/pics/game14_angel_dawn.png');
    this.game.load.image('atari', 'assets/sprites/atari800xl.png');
  };
  BoundsSprite.prototype.create = function () {
    this.game.stage.backgroundColor = '#2d2d2d';
    this.bounds = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'pic');
    this.bounds.alpha = 0.5;
    this.bounds.anchor.set(0.5);
    this.sprite = this.game.add.sprite(300, 300, 'atari');
    this.sprite.inputEnabled = true;
    this.sprite.anchor.set(0.5);
    this.sprite.input.enableDrag();
    this.sprite.input.boundsSprite = this.bounds;
  };
  BoundsSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BoundsSprite',
    baseClasses: []
  };
  function BringAChildToTop() {
    Phaser.State.call(this);
  }
  BringAChildToTop.prototype.preload = function () {
    this.game.load.image('atari1', 'assets/sprites/atari130xe.png');
    this.game.load.image('atari2', 'assets/sprites/atari800xl.png');
    this.game.load.image('atari4', 'assets/sprites/atari800.png');
    this.game.load.image('sonic', 'assets/sprites/sonic_havok_sanity.png');
    this.game.load.image('duck', 'assets/sprites/darkwing_crazy.png');
    this.game.load.image('firstaid', 'assets/sprites/firstaid.png');
    this.game.load.image('diamond', 'assets/sprites/diamond.png');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  function BringAChildToTop$create$lambda(s) {
    console.log('clicked', s.name, s.renderOrderID);
  }
  BringAChildToTop.prototype.create = function () {
    var tmp$;
    var images_1 = this.game.cache.getKeys(Phaser.Cache.IMAGE);
    tmp$ = 20 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var img = this.game.rnd.pick(images_1);
      var tempSprite = this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, img);
      tempSprite.name = i.toString() + '-' + img;
      tempSprite.inputEnabled = true;
      tempSprite.input.enableDrag(false, true);
      tempSprite.events.onInputDown.add(BringAChildToTop$create$lambda);
    }
  };
  BringAChildToTop.prototype.render = function () {
    this.game.debug.inputInfo(32, 32);
  };
  BringAChildToTop.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BringAChildToTop',
    baseClasses: []
  };
  function ButtonDestroy() {
    Phaser.State.call(this);
  }
  ButtonDestroy.prototype.preload = function () {
    this.game.load.spritesheet('button', 'assets/buttons/button_sprite_sheet.png', 193, 71);
  };
  ButtonDestroy.prototype.create = function () {
    this.game.stage.backgroundColor = '#4b0049';
    this.button = this.game.add.button(this.game.world.centerX - 95, 460, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'nukeButton'), this, 2, 1, 0);
  };
  function ButtonDestroy$nukeButton$ObjectLiteral() {
    this.font = '64px Arial';
    this.fill = '#ffffff';
  }
  ButtonDestroy$nukeButton$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  ButtonDestroy.prototype.nukeButton = function () {
    this.button.pendingDestroy = true;
    this.text = this.game.add.text(this.game.world.centerX, this.game.world.centerY, '- button nuked -', new ButtonDestroy$nukeButton$ObjectLiteral());
    this.text.anchor.set(0.5);
  };
  ButtonDestroy.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ButtonDestroy',
    baseClasses: []
  };
  function ButtonOpenPopup() {
    Phaser.State.call(this);
    this.tween = null;
  }
  ButtonOpenPopup.prototype.preload = function () {
    this.game.load.spritesheet('button', 'assets/buttons/button_sprite_sheet.png', 193, 71);
    this.game.load.image('background', 'assets/pics/bubble-on.png');
    this.game.load.image('close', 'assets/sprites/orb-red.png');
  };
  ButtonOpenPopup.prototype.create = function () {
    this.game.stage.backgroundColor = '#4b0049';
    this.button = this.game.add.button(this.game.world.centerX - 95, 460, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'openWindow'), this, 2, 1, 0);
    this.button.input.useHandCursor = true;
    this.popup = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'background');
    this.popup.alpha = 0.8;
    this.popup.anchor.set(0.5);
    this.popup.inputEnabled = true;
    this.popup.input.enableDrag();
    var pw = this.popup.width / 2 - 30;
    var ph = this.popup.height / 2 - 8;
    var closeButton = this.game.make.sprite(pw, -ph, 'close');
    closeButton.inputEnabled = true;
    closeButton.input.priorityID = 1;
    closeButton.input.useHandCursor = true;
    closeButton.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'closeWindow'), this);
    this.popup.addChild(closeButton);
    this.popup.scale.set(0.1);
  };
  function ButtonOpenPopup$openWindow$ObjectLiteral() {
    this.x = 1;
    this.y = 1;
  }
  ButtonOpenPopup$openWindow$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  ButtonOpenPopup.prototype.openWindow = function () {
    var tmp$;
    if (this.tween != null && ((tmp$ = this.tween) != null ? tmp$ : Kotlin.throwNPE()).isRunning || (this.popup.scale.x | 0) === 1) {
      return;
    }
    this.tween = this.game.add.tween(this.popup.scale).to(new ButtonOpenPopup$openWindow$ObjectLiteral(), 1000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Elastic, 'Out'), true);
  };
  function ButtonOpenPopup$closeWindow$ObjectLiteral() {
    this.x = 0.1;
    this.y = 0.1;
  }
  ButtonOpenPopup$closeWindow$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  ButtonOpenPopup.prototype.closeWindow = function () {
    var tmp$;
    if (this.tween != null && ((tmp$ = this.tween) != null ? tmp$ : Kotlin.throwNPE()).isRunning || this.popup.scale.x === 0.1) {
      return;
    }
    this.tween = this.game.add.tween(this.popup.scale).to(new ButtonOpenPopup$closeWindow$ObjectLiteral(), 500, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Elastic, 'In'), true);
  };
  ButtonOpenPopup.prototype.render = function () {
    this.game.debug.text('Click to open window + drag + close', 32, 32);
  };
  ButtonOpenPopup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ButtonOpenPopup',
    baseClasses: []
  };
  function CursorKeyMovement() {
    Phaser.State.call(this);
  }
  CursorKeyMovement.prototype.preload = function () {
    this.game.stage.backgroundColor = '#007236';
    this.game.load.image('ball', 'assets/sprites/shinyball.png');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
    this.game.load.image('phaser', 'assets/sprites/sonic_havok_sanity.png');
  };
  function CursorKeyMovement$create$ObjectLiteral() {
    this.fill = '#ffffff';
  }
  CursorKeyMovement$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  CursorKeyMovement.prototype.create = function () {
    var tmp$;
    this.game.world.setBounds(-1000, -1000, 2000, 2000);
    tmp$ = 100 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.game.add.image(this.game.world.randomX, this.game.world.randomY, 'mushroom');
    }
    this.game.add.image(-16, -16, 'ball');
    this.cursors = this.game.input.keyboard.createCursorKeys();
    var text_0 = this.game.add.text(32, 32, 'Cursors to move. Shift + Up / Down to Rotate World', new CursorKeyMovement$create$ObjectLiteral());
  };
  CursorKeyMovement.prototype.update = function () {
    if (this.cursors.up.isDown) {
      if (this.cursors.up.shiftKey) {
        this.game.world.rotation = this.game.world.rotation + 0.05;
      }
       else {
        this.game.camera.y = this.game.camera.y - 4;
      }
    }
     else if (this.cursors.down.isDown) {
      if (this.cursors.down.shiftKey) {
        this.game.world.rotation = this.game.world.rotation - 0.05;
      }
       else {
        this.game.camera.y = this.game.camera.y + 4;
      }
    }
    if (this.cursors.left.isDown) {
      this.game.camera.x = this.game.camera.x - 4;
    }
     else if (this.cursors.right.isDown) {
      this.game.camera.x = this.game.camera.x + 4;
    }
  };
  CursorKeyMovement.prototype.render = function () {
    this.game.debug.cameraInfo(this.game.camera, 32, 500);
  };
  CursorKeyMovement.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CursorKeyMovement',
    baseClasses: []
  };
  function DownDuration() {
    Phaser.State.call(this);
    this.lastDuration = 0.0;
  }
  DownDuration.prototype.preload = function () {
    this.game.load.image('bunny', 'assets/sprites/bunny.png');
  };
  DownDuration.prototype.create = function () {
    this.bunny = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'bunny');
    this.bunny.alpha = 0.5;
    this.bunny.anchor.set(0.5);
    this.game.input.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'getTime_pal8wq$'), this);
  };
  DownDuration.prototype.update = function () {
    if (this.game.input.activePointer.isDown) {
      this.bunny.alpha = 1.0;
    }
     else {
      this.bunny.alpha = 0.5;
    }
  };
  DownDuration.prototype.getTime_pal8wq$ = function (pointer) {
    this.lastDuration = pointer.duration;
  };
  DownDuration.prototype.render = function () {
    this.game.debug.text('Duration: ' + this.game.input.activePointer.duration, 32, 32);
    this.game.debug.text('Last Duration: ' + this.lastDuration, 32, 64);
  };
  DownDuration.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DownDuration',
    baseClasses: []
  };
  function Drag() {
    Phaser.State.call(this);
  }
  Drag.prototype.preload = function () {
    this.game.load.image('grid', 'assets/tests/debug-grid-1920x1920.png');
    this.game.load.image('atari', 'assets/sprites/atari800xl.png');
  };
  Drag.prototype.create = function () {
    this.game.add.sprite(0, 0, 'grid');
    var atari1 = this.game.add.sprite(300, 300, 'atari');
    atari1.inputEnabled = true;
    atari1.input.enableDrag(true);
  };
  Drag.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Drag',
    baseClasses: []
  };
  function DragEventParameters() {
    Phaser.State.call(this);
    this.result = 'Drag a sprite';
  }
  DragEventParameters.prototype.preload = function () {
    this.game.load.image('grid', 'assets/tests/debug-grid-1920x1920.png');
    this.game.load.image('atari', 'assets/sprites/atari800xl.png');
    this.game.load.image('sonic', 'assets/sprites/sonic_havok_sanity.png');
  };
  DragEventParameters.prototype.create = function () {
    this.game.add.sprite(0, 0, 'grid');
    var group = this.game.add.group();
    group.inputEnableChildren = true;
    var atari = group.create(32, 100, 'atari');
    atari.inputEnabled = true;
    atari.input.enableDrag();
    atari.events.onDragStart.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDragStart_xslgx6$'), this);
    atari.events.onDragStop.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDragStop_xslgx6$'), this);
    var sonic = group.create(300, 200, 'sonic');
    sonic.inputEnabled = true;
    sonic.input.enableDrag();
    sonic.events.onDragStart.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDragStart_xslgx6$'), this);
    sonic.events.onDragStop.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDragStop_xslgx6$'), this);
    group.onChildInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDown_xslgx6$'), this);
  };
  DragEventParameters.prototype.onDown_xslgx6$ = function (sprite, pointer) {
    this.result = 'Down ' + sprite.key;
    console.log('down', sprite.key);
  };
  DragEventParameters.prototype.onDragStart_xslgx6$ = function (sprite, pointer) {
    this.result = 'Dragging ' + sprite.key;
  };
  DragEventParameters.prototype.onDragStop_xslgx6$ = function (sprite, pointer) {
    this.result = sprite.key + ' dropped at x:' + pointer.x + ' y: ' + pointer.y;
    if (pointer.y > 400) {
      console.log('input disabled on', sprite.key);
      sprite.input.enabled = false;
      sprite.sendToBack();
    }
  };
  DragEventParameters.prototype.render = function () {
    this.game.debug.text(this.result, 10, 20);
  };
  DragEventParameters.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DragEventParameters',
    baseClasses: []
  };
  function DragScaledGroup() {
    Phaser.State.call(this);
  }
  DragScaledGroup.prototype.preload = function () {
    this.game.load.image('grid', 'assets/tests/debug-grid-1920x1920.png');
    this.game.load.image('atari', 'assets/sprites/atari800xl.png');
  };
  DragScaledGroup.prototype.create = function () {
    this.game.add.sprite(0, 0, 'grid');
    var group = this.game.add.group();
    group.scale.set(1.5);
    var atari1 = group.create(100, 100, 'atari');
    atari1.scale.set(0.7);
    atari1.inputEnabled = true;
    atari1.input.enableDrag(true);
    var atari2 = this.game.add.sprite(500, 300, 'atari');
    atari2.inputEnabled = true;
    atari2.input.enableDrag(true);
  };
  DragScaledGroup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DragScaledGroup',
    baseClasses: []
  };
  function DragSeveralSprites() {
    Phaser.State.call(this);
  }
  DragSeveralSprites.prototype.preload = function () {
    this.game.load.image('atari1', 'assets/sprites/atari130xe.png');
    this.game.load.image('atari2', 'assets/sprites/atari800xl.png');
    this.game.load.image('atari4', 'assets/sprites/atari800.png');
    this.game.load.image('sonic', 'assets/sprites/sonic_havok_sanity.png');
    this.game.load.image('duck', 'assets/sprites/darkwing_crazy.png');
    this.game.load.image('firstaid', 'assets/sprites/firstaid.png');
    this.game.load.image('diamond', 'assets/sprites/diamond.png');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  DragSeveralSprites.prototype.create = function () {
    var tmp$;
    var images_1 = this.game.cache.getKeys(Phaser.Cache.IMAGE);
    var test = this.game.add.group();
    tmp$ = 20 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var tempSprite = test.create(this.game.world.randomX, this.game.world.randomY, this.game.rnd.pick(images_1));
      tempSprite.inputEnabled = true;
      tempSprite.input.enableDrag(false, true);
    }
  };
  DragSeveralSprites.prototype.render = function () {
    this.game.debug.inputInfo(32, 32);
  };
  DragSeveralSprites.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DragSeveralSprites',
    baseClasses: []
  };
  function DragUpdate() {
    Phaser.State.call(this);
    this.angle = 0.0;
  }
  DragUpdate.prototype.preload = function () {
    this.game.load.image('ship', 'assets/sprites/ship.png');
    this.game.load.image('ball', 'assets/sprites/longarrow.png');
  };
  function DragUpdate$create$ObjectLiteral() {
    this.font = '32px Arial';
    this.fill = '#f9b4cf';
  }
  DragUpdate$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  DragUpdate.prototype.create = function () {
    this.game.stage.backgroundColor = '#2f0f1c';
    this.dragSprite = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'ship');
    this.dragSprite.anchor.set(0.5);
    this.dragSprite.inputEnabled = true;
    this.dragSprite.input.enableDrag();
    this.dragSprite.events.onDragStart.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'dragStart'));
    this.dragSprite.events.onDragUpdate.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'dragUpdate_wvsbcb$'));
    this.dragSprite.events.onDragStop.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'dragStop'));
    this.copySprite = this.game.add.sprite(this.dragSprite.x + 220, this.dragSprite.y, 'ball');
    this.copySprite.anchor.set(0, 0.5);
    this.copySprite.alpha = 0.5;
    this.copySprite.angle = 180.0;
    var text_0 = this.game.add.text(32, 32, 'drag the ship', new DragUpdate$create$ObjectLiteral());
    text_0.setShadow(6, 6, 'rgba(0,0,0,0.8)', 5);
  };
  DragUpdate.prototype.dragStart = function () {
    this.copySprite.alpha = 1.0;
  };
  DragUpdate.prototype.dragUpdate_wvsbcb$ = function (sprite, pointer, dragX, dragY, snapPoint) {
    this.angle += 0.01;
    this.copySprite.x = this.dragSprite.x + 220 * cos(Phaser.Math, this.angle);
    this.copySprite.y = this.dragSprite.y + 220 * sin(Phaser.Math, this.angle);
    this.copySprite.rotation = this.game.physics.arcade.angleToPointer(this.copySprite);
  };
  DragUpdate.prototype.dragStop = function () {
    this.copySprite.alpha = 0.5;
  };
  DragUpdate.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DragUpdate',
    baseClasses: []
  };
  function DragUpdateMultiple() {
    Phaser.State.call(this);
    this.angle = 0.0;
  }
  DragUpdateMultiple.prototype.preload = function () {
    this.game.load.image('grid', 'assets/tests/debug-grid-1920x1920.png');
    this.game.load.image('ship', 'assets/sprites/ship.png');
    this.game.load.image('ball', 'assets/sprites/pangball.png');
  };
  DragUpdateMultiple.prototype.create = function () {
    this.game.add.sprite(0, 0, 'grid').alpha = 0.4;
    this.dragSprite = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'ship');
    this.dragSprite.anchor.set(0.5);
    this.dragSprite.inputEnabled = true;
    this.dragSprite.input.enableDrag();
    this.dragSprite.events.onDragStart.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'dragStart'));
    this.dragSprite.events.onDragUpdate.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'dragUpdate_wvsbcb$'));
    this.dragSprite.events.onDragStop.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'dragStop'));
    this.copySprite = this.game.add.sprite(this.dragSprite.x + 200, this.dragSprite.y, 'ball');
    this.copySprite.anchor.set(0.5);
    this.copySprite.alpha = 0.5;
  };
  DragUpdateMultiple.prototype.dragStart = function () {
    this.copySprite.alpha = 1.0;
  };
  DragUpdateMultiple.prototype.dragUpdate_wvsbcb$ = function (sprite, pointer, dragX, dragY, snapPoint) {
    this.angle += 0.01;
    this.copySprite.x = this.dragSprite.x + 200 * cos(Phaser.Math, this.angle);
    this.copySprite.y = this.dragSprite.y + 200 * sin(Phaser.Math, this.angle);
  };
  DragUpdateMultiple.prototype.dragStop = function () {
    this.copySprite.alpha = 0.5;
  };
  DragUpdateMultiple.prototype.update = function () {
  };
  DragUpdateMultiple.prototype.render = function () {
  };
  DragUpdateMultiple.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DragUpdateMultiple',
    baseClasses: []
  };
  function DropLimitation() {
    Phaser.State.call(this);
  }
  DropLimitation.prototype.preload = function () {
    this.game.load.spritesheet('item', 'assets/buttons/number-buttons-90x90.png', 90, 90);
  };
  DropLimitation.prototype.create = function () {
    var tmp$;
    var item;
    tmp$ = 6 - 1;
    for (var i = 0; i <= tmp$; i++) {
      item = this.game.add.sprite(90, 90 * i, 'item', i);
      item.inputEnabled = true;
      item.input.enableDrag();
      item.input.enableSnap(90, 90, false, true);
      item.events.onDragStop.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'fixLocation_okw7gk$'));
    }
  };
  DropLimitation.prototype.render = function () {
    this.game.debug.text('Group Left.', 100, 560);
    this.game.debug.text('Group Right.', 280, 560);
  };
  DropLimitation.prototype.fixLocation_okw7gk$ = function (item) {
    if (item.x < 90) {
      item.x = 90.0;
    }
     else if (item.x > 180 && item.x < 270) {
      item.x = 180.0;
    }
     else if (item.x > 360) {
      item.x = 270.0;
    }
  };
  DropLimitation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DropLimitation',
    baseClasses: []
  };
  function FollowMouse() {
    Phaser.State.call(this);
  }
  FollowMouse.prototype.preload = function () {
    this.game.load.image('ball', 'assets/sprites/shinyball.png');
  };
  FollowMouse.prototype.create = function () {
    this.sprite = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'ball');
    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
  };
  FollowMouse.prototype.update = function () {
    if (this.game.input.mousePointer.isDown) {
      this.game.physics.arcade.moveToPointer(this.sprite, 400);
      if (Phaser.Rectangle.contains(this.sprite.body, this.game.input.x, this.game.input.y)) {
        this.sprite.body.velocity.setTo(0, 0);
      }
    }
     else {
      this.sprite.body.velocity.setTo(0, 0);
    }
  };
  FollowMouse.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FollowMouse',
    baseClasses: []
  };
  function Gamepad() {
    Phaser.State.call(this);
  }
  Gamepad.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser-dude.png');
    this.game.load.spritesheet('controller-indicator', 'assets/misc/controller-indicator.png', 16, 16);
  };
  Gamepad.prototype.create = function () {
    this.game.stage.backgroundColor = '#736357';
    this.sprite = this.game.add.sprite(300, 300, 'phaser');
    this.sprite.anchor.setTo(0.5, 0.5);
    this.indicator = this.game.add.sprite(10, 10, 'controller-indicator');
    this.indicator.scale.x = 2.0;
    this.indicator.scale.y = 2.0;
    this.indicator.animations.frame = 1;
    this.game.input.gamepad.start();
    this.pad1 = this.game.input.gamepad.pad1;
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'dump'), this);
  };
  Gamepad.prototype.dump = function () {
    console.log(this.pad1.axis(0));
    console.log(this.pad1.axis(0));
  };
  Gamepad.prototype.update = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10;
    if (this.game.input.gamepad.supported && this.game.input.gamepad.active && this.pad1.connected) {
      this.indicator.animations.frame = 0;
    }
     else {
      this.indicator.animations.frame = 1;
    }
    if (this.pad1.isDown(Phaser.Gamepad.XBOX360_DPAD_LEFT) || this.pad1.axis(Phaser.Gamepad.XBOX360_STICK_LEFT_X) < -0.1) {
      tmp$ = this.sprite;
      tmp$_0 = tmp$.x, tmp$_1 = tmp$_0, tmp$.x = tmp$_0 - 1, tmp$_1;
    }
     else if (this.pad1.isDown(Phaser.Gamepad.XBOX360_DPAD_RIGHT) || this.pad1.axis(Phaser.Gamepad.XBOX360_STICK_LEFT_X) > 0.1) {
      tmp$_2 = this.sprite;
      tmp$_3 = tmp$_2.x, tmp$_4 = tmp$_3, tmp$_2.x = tmp$_3 + 1, tmp$_4;
    }
    if (this.pad1.isDown(Phaser.Gamepad.XBOX360_DPAD_UP) || this.pad1.axis(Phaser.Gamepad.XBOX360_STICK_LEFT_Y) < -0.1) {
      tmp$_5 = this.sprite;
      tmp$_6 = tmp$_5.y, tmp$_7 = tmp$_6, tmp$_5.y = tmp$_6 - 1, tmp$_7;
    }
     else if (this.pad1.isDown(Phaser.Gamepad.XBOX360_DPAD_DOWN) || this.pad1.axis(Phaser.Gamepad.XBOX360_STICK_LEFT_Y) > 0.1) {
      tmp$_8 = this.sprite;
      tmp$_9 = tmp$_8.y, tmp$_10 = tmp$_9, tmp$_8.y = tmp$_9 + 1, tmp$_10;
    }
    if (this.pad1.justPressed(Phaser.Gamepad.XBOX360_A)) {
      this.sprite.angle = this.sprite.angle + 5;
    }
    if (this.pad1.justReleased(Phaser.Gamepad.XBOX360_B)) {
      this.sprite.scale.x = this.sprite.scale.x + 0.01;
      this.sprite.scale.y = this.sprite.scale.x;
    }
    if (this.pad1.connected) {
      var rightStickX = this.pad1.axis(Phaser.Gamepad.XBOX360_STICK_RIGHT_X);
      var rightStickY = this.pad1.axis(Phaser.Gamepad.XBOX360_STICK_RIGHT_Y);
      if (rightStickX != null) {
        this.sprite.x = this.sprite.x + rightStickX * 10;
      }
      if (rightStickY != null) {
        this.sprite.y = this.sprite.y + rightStickY * 10;
      }
    }
  };
  Gamepad.prototype.render = function () {
  };
  Gamepad.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Gamepad',
    baseClasses: []
  };
  function GamepadAnalogButton() {
    Phaser.State.call(this);
  }
  GamepadAnalogButton.prototype.preload = function () {
    this.game.load.spritesheet('controller-indicator', 'assets/misc/controller-indicator.png', 16, 16);
  };
  function GamepadAnalogButton$create$ObjectLiteral(this$GamepadAnalogButton) {
    this.onConnect = GamepadAnalogButton$create$ObjectLiteral$onConnect$lambda(this$GamepadAnalogButton);
  }
  function GamepadAnalogButton$create$ObjectLiteral$onConnect$lambda(this$GamepadAnalogButton) {
    return function () {
      this$GamepadAnalogButton.addButtons();
    };
  }
  GamepadAnalogButton$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  GamepadAnalogButton.prototype.create = function () {
    this.game.stage.backgroundColor = '#736357';
    this.setupScene();
    this.game.input.gamepad.start();
    this.pad = this.game.input.gamepad.pad1;
    this.pad.addCallbacks(this, new GamepadAnalogButton$create$ObjectLiteral(this));
  };
  GamepadAnalogButton.prototype.addButtons = function () {
    this.leftTriggerButton = this.pad.getButton(Phaser.Gamepad.XBOX360_LEFT_TRIGGER);
    this.leftTriggerButton.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onLeftTrigger_z9xd69$'));
    this.leftTriggerButton.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onLeftTrigger_z9xd69$'));
    this.leftTriggerButton.onFloat.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onLeftTrigger_z9xd69$'));
    this.rightTriggerButton = this.pad.getButton(Phaser.Gamepad.XBOX360_RIGHT_TRIGGER);
    this.rightTriggerButton.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onRightTrigger_z9xd69$'));
    this.rightTriggerButton.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onRightTrigger_z9xd69$'));
    this.rightTriggerButton.onFloat.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onRightTrigger_z9xd69$'));
  };
  GamepadAnalogButton.prototype.onLeftTrigger_z9xd69$ = function (button, value) {
    this.leftTriggerGfx.clear();
    this.leftTriggerGfx.beginFill(16740363, 1);
    this.leftTriggerGfx.lineStyle(2, 16777215, 1);
    this.leftTriggerGfx.drawRect(0, -value * 500, 50, value * 500 + 5);
    this.leftTriggerGfx.endFill();
  };
  GamepadAnalogButton.prototype.onRightTrigger_z9xd69$ = function (buttonCode, value) {
    this.rightTriggerGfx.clear();
    this.rightTriggerGfx.beginFill(16740363, 1);
    this.rightTriggerGfx.lineStyle(2, 16777215, 1);
    this.rightTriggerGfx.drawRect(0, -value * 500, 50, value * 500 + 5);
    this.rightTriggerGfx.endFill();
  };
  GamepadAnalogButton.prototype.update = function () {
    if (this.game.input.gamepad.supported && this.game.input.gamepad.active && this.game.input.gamepad.pad1.connected) {
      this.indicator.animations.frame = 0;
    }
     else {
      this.indicator.animations.frame = 1;
    }
  };
  GamepadAnalogButton.prototype.setupScene = function () {
    this.indicator = this.game.add.sprite(10, 10, 'controller-indicator');
    this.indicator.scale.x = 2.0;
    this.indicator.scale.y = 2.0;
    this.indicator.animations.frame = 0;
    this.leftTriggerGfx = this.game.add.graphics(300, 550);
    this.leftTriggerGfx.beginFill(16740363, 1);
    this.leftTriggerGfx.lineStyle(2, 16777215, 1);
    this.leftTriggerGfx.drawRect(0, 0, 50, 5);
    this.leftTriggerGfx.endFill();
    this.rightTriggerGfx = this.game.add.graphics(450, 550);
    this.rightTriggerGfx.beginFill(16740363, 1);
    this.rightTriggerGfx.lineStyle(2, 16777215, 1);
    this.rightTriggerGfx.drawRect(0, 0, 50, 5);
    this.rightTriggerGfx.endFill();
  };
  GamepadAnalogButton.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GamepadAnalogButton',
    baseClasses: []
  };
  function GamepadButtons() {
    Phaser.State.call(this);
  }
  GamepadButtons.prototype.preload = function () {
    this.game.load.atlas('xbox360', 'assets/controllers/xbox360.png', 'assets/controllers/xbox360.json');
  };
  function GamepadButtons$create$ObjectLiteral(this$GamepadButtons) {
    this.onConnect = GamepadButtons$create$ObjectLiteral$onConnect$lambda(this$GamepadButtons);
  }
  function GamepadButtons$create$ObjectLiteral$onConnect$lambda(this$GamepadButtons) {
    return function () {
      this$GamepadButtons.addButtons();
    };
  }
  GamepadButtons$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  GamepadButtons.prototype.create = function () {
    this.game.stage.backgroundColor = '#2d2d2d';
    this.imageA = this.game.add.image(500, 300, 'xbox360', '360_A');
    this.imageB = this.game.add.image(600, 200, 'xbox360', '360_B');
    this.imageX = this.game.add.image(400, 200, 'xbox360', '360_X');
    this.imageY = this.game.add.image(500, 100, 'xbox360', '360_Y');
    this.imageDPad = this.game.add.image(100, 200, 'xbox360', '360_Dpad');
    this.game.input.gamepad.start();
    this.pad = this.game.input.gamepad.pad1;
    this.pad.addCallbacks(this, new GamepadButtons$create$ObjectLiteral(this));
  };
  GamepadButtons.prototype.addButtons = function () {
    this.buttonA = this.pad.getButton(Phaser.Gamepad.XBOX360_A);
    this.buttonB = this.pad.getButton(Phaser.Gamepad.XBOX360_B);
    this.buttonX = this.pad.getButton(Phaser.Gamepad.XBOX360_X);
    this.buttonY = this.pad.getButton(Phaser.Gamepad.XBOX360_Y);
    this.buttonA.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDown_z9xd69$'), this);
    this.buttonB.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDown_z9xd69$'), this);
    this.buttonX.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDown_z9xd69$'), this);
    this.buttonY.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDown_z9xd69$'), this);
    this.buttonA.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onUp_z9xd69$'), this);
    this.buttonB.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onUp_z9xd69$'), this);
    this.buttonX.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onUp_z9xd69$'), this);
    this.buttonY.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onUp_z9xd69$'), this);
    this.buttonDPadLeft = this.pad.getButton(Phaser.Gamepad.XBOX360_DPAD_LEFT);
    this.buttonDPadRight = this.pad.getButton(Phaser.Gamepad.XBOX360_DPAD_RIGHT);
    this.buttonDPadUp = this.pad.getButton(Phaser.Gamepad.XBOX360_DPAD_UP);
    this.buttonDPadDown = this.pad.getButton(Phaser.Gamepad.XBOX360_DPAD_DOWN);
    this.buttonDPadLeft.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDown_z9xd69$'), this);
    this.buttonDPadRight.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDown_z9xd69$'), this);
    this.buttonDPadUp.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDown_z9xd69$'), this);
    this.buttonDPadDown.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDown_z9xd69$'), this);
    this.buttonDPadLeft.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onUp_z9xd69$'), this);
    this.buttonDPadRight.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onUp_z9xd69$'), this);
    this.buttonDPadUp.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onUp_z9xd69$'), this);
    this.buttonDPadDown.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onUp_z9xd69$'), this);
  };
  GamepadButtons.prototype.onDown_z9xd69$ = function (button, value) {
    if (button.buttonCode === Phaser.Gamepad.XBOX360_A) {
      this.imageA.alpha = 0.5;
    }
     else if (button.buttonCode === Phaser.Gamepad.XBOX360_B) {
      this.imageB.alpha = 0.5;
    }
     else if (button.buttonCode === Phaser.Gamepad.XBOX360_X) {
      this.imageX.alpha = 0.5;
    }
     else if (button.buttonCode === Phaser.Gamepad.XBOX360_Y) {
      this.imageY.alpha = 0.5;
    }
     else if (button.buttonCode === Phaser.Gamepad.XBOX360_DPAD_LEFT) {
      this.imageDPad.frameName = '360_Dpad_Left';
    }
     else if (button.buttonCode === Phaser.Gamepad.XBOX360_DPAD_RIGHT) {
      this.imageDPad.frameName = '360_Dpad_Right';
    }
     else if (button.buttonCode === Phaser.Gamepad.XBOX360_DPAD_UP) {
      this.imageDPad.frameName = '360_Dpad_Up';
    }
     else if (button.buttonCode === Phaser.Gamepad.XBOX360_DPAD_DOWN) {
      this.imageDPad.frameName = '360_Dpad_Down';
    }
  };
  GamepadButtons.prototype.onUp_z9xd69$ = function (button, value) {
    if (button.buttonCode === Phaser.Gamepad.XBOX360_A) {
      this.imageA.alpha = 1.0;
    }
     else if (button.buttonCode === Phaser.Gamepad.XBOX360_B) {
      this.imageB.alpha = 1.0;
    }
     else if (button.buttonCode === Phaser.Gamepad.XBOX360_X) {
      this.imageX.alpha = 1.0;
    }
     else if (button.buttonCode === Phaser.Gamepad.XBOX360_Y) {
      this.imageY.alpha = 1.0;
    }
     else {
      this.imageDPad.frameName = '360_Dpad';
    }
  };
  GamepadButtons.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GamepadButtons',
    baseClasses: []
  };
  function GamepadMultiplePads() {
    Phaser.State.call(this);
  }
  GamepadMultiplePads.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser-dude.png');
    this.game.load.image('melon', 'assets/sprites/melon.png');
    this.game.load.spritesheet('controller-indicator', 'assets/misc/controller-indicator.png', 16, 16);
  };
  GamepadMultiplePads.prototype.create = function () {
    this.game.stage.backgroundColor = '#736357';
    this.game.input.gamepad.start();
    this.indicator1 = this.game.add.sprite(10, 10, 'controller-indicator');
    this.indicator1.scale.x = 2.0;
    this.indicator1.scale.y = 2.0;
    this.indicator1.animations.frame = 1;
    this.indicator2 = this.game.add.sprite(10, 50, 'controller-indicator');
    this.indicator2.scale.x = 2.0;
    this.indicator2.scale.y = 2.0;
    this.indicator2.animations.frame = 1;
    this.player1 = this.game.add.sprite(300, 300, 'phaser');
    this.player1.anchor.setTo(0.5, 0.5);
    this.player2 = this.game.add.sprite(450, 300, 'phaser');
    this.player2.anchor.setTo(0.5, 0.5);
    this.melon = this.game.add.sprite(375, 350, 'melon');
    this.melon.anchor.setTo(0.5, 0.5);
    this.pad1 = this.game.input.gamepad.pad1;
    this.pad2 = this.game.input.gamepad.pad2;
  };
  GamepadMultiplePads.prototype.update = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10, tmp$_11, tmp$_12, tmp$_13, tmp$_14, tmp$_15, tmp$_16, tmp$_17, tmp$_18, tmp$_19, tmp$_20, tmp$_21, tmp$_22, tmp$_23, tmp$_24, tmp$_25, tmp$_26, tmp$_27, tmp$_28, tmp$_29, tmp$_30, tmp$_31, tmp$_32, tmp$_33, tmp$_34;
    if (this.game.input.gamepad.supported && this.game.input.gamepad.active && this.game.input.gamepad.pad1.connected) {
      this.indicator1.animations.frame = 0;
    }
     else {
      this.indicator1.animations.frame = 1;
    }
    if (this.game.input.gamepad.supported && this.game.input.gamepad.active && this.game.input.gamepad.pad2.connected) {
      this.indicator2.animations.frame = 0;
    }
     else {
      this.indicator2.animations.frame = 1;
    }
    if (this.pad1.isDown(Phaser.Gamepad.XBOX360_DPAD_LEFT) || this.pad1.axis(Phaser.Gamepad.XBOX360_STICK_LEFT_X) < -0.1) {
      tmp$ = this.player1;
      tmp$_0 = tmp$.x, tmp$_1 = tmp$_0, tmp$.x = tmp$_0 - 1, tmp$_1;
    }
    if (this.pad1.isDown(Phaser.Gamepad.XBOX360_DPAD_RIGHT) || this.pad1.axis(Phaser.Gamepad.XBOX360_STICK_LEFT_X) > 0.1) {
      tmp$_2 = this.player1;
      tmp$_3 = tmp$_2.x, tmp$_4 = tmp$_3, tmp$_2.x = tmp$_3 + 1, tmp$_4;
    }
    if (this.pad1.isDown(Phaser.Gamepad.XBOX360_DPAD_UP) || this.pad1.axis(Phaser.Gamepad.XBOX360_STICK_LEFT_Y) < -0.1) {
      tmp$_5 = this.player1;
      tmp$_6 = tmp$_5.y, tmp$_7 = tmp$_6, tmp$_5.y = tmp$_6 - 1, tmp$_7;
    }
    if (this.pad1.isDown(Phaser.Gamepad.XBOX360_DPAD_DOWN) || this.pad1.axis(Phaser.Gamepad.XBOX360_STICK_LEFT_Y) > 0.1) {
      tmp$_8 = this.player1;
      tmp$_9 = tmp$_8.y, tmp$_10 = tmp$_9, tmp$_8.y = tmp$_9 + 1, tmp$_10;
    }
    if (this.pad2.isDown(Phaser.Gamepad.XBOX360_DPAD_LEFT) || this.pad2.axis(Phaser.Gamepad.XBOX360_STICK_LEFT_X) < -0.1) {
      tmp$_11 = this.player2;
      tmp$_12 = tmp$_11.x, tmp$_13 = tmp$_12, tmp$_11.x = tmp$_12 - 1, tmp$_13;
    }
    if (this.pad2.isDown(Phaser.Gamepad.XBOX360_DPAD_RIGHT) || this.pad2.axis(Phaser.Gamepad.XBOX360_STICK_LEFT_X) > 0.1) {
      tmp$_14 = this.player2;
      tmp$_15 = tmp$_14.x, tmp$_16 = tmp$_15, tmp$_14.x = tmp$_15 + 1, tmp$_16;
    }
    if (this.pad2.isDown(Phaser.Gamepad.XBOX360_DPAD_UP) || this.pad2.axis(Phaser.Gamepad.XBOX360_STICK_LEFT_Y) < -0.1) {
      tmp$_17 = this.player2;
      tmp$_18 = tmp$_17.y, tmp$_19 = tmp$_18, tmp$_17.y = tmp$_18 - 1, tmp$_19;
    }
    if (this.pad2.isDown(Phaser.Gamepad.XBOX360_DPAD_DOWN) || this.pad2.axis(Phaser.Gamepad.XBOX360_STICK_LEFT_Y) > 0.1) {
      tmp$_20 = this.player2;
      tmp$_21 = tmp$_20.y, tmp$_22 = tmp$_21, tmp$_20.y = tmp$_21 + 1, tmp$_22;
    }
    if (this.game.input.gamepad.isDown(Phaser.Gamepad.XBOX360_DPAD_LEFT)) {
      tmp$_23 = this.melon;
      tmp$_24 = tmp$_23.x, tmp$_25 = tmp$_24, tmp$_23.x = tmp$_24 - 1, tmp$_25;
    }
    if (this.game.input.gamepad.isDown(Phaser.Gamepad.XBOX360_DPAD_RIGHT)) {
      tmp$_26 = this.melon;
      tmp$_27 = tmp$_26.x, tmp$_28 = tmp$_27, tmp$_26.x = tmp$_27 + 1, tmp$_28;
    }
    if (this.game.input.gamepad.isDown(Phaser.Gamepad.XBOX360_DPAD_UP)) {
      tmp$_29 = this.melon;
      tmp$_30 = tmp$_29.y, tmp$_31 = tmp$_30, tmp$_29.y = tmp$_30 - 1, tmp$_31;
    }
    if (this.game.input.gamepad.isDown(Phaser.Gamepad.XBOX360_DPAD_DOWN)) {
      tmp$_32 = this.melon;
      tmp$_33 = tmp$_32.y, tmp$_34 = tmp$_33, tmp$_32.y = tmp$_33 + 1, tmp$_34;
    }
  };
  GamepadMultiplePads.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GamepadMultiplePads',
    baseClasses: []
  };
  function GameScale() {
    Phaser.State.call(this);
  }
  GameScale.prototype.preload = function () {
    this.game.scale.maxWidth = 800;
    this.game.scale.maxHeight = 600;
    this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
    this.game.load.image('melon', 'assets/sprites/melon.png');
  };
  GameScale.prototype.create = function () {
    var tmp$;
    this.game.world.setBounds(0, 0, 2000, 2000);
    tmp$ = 1000 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'melon');
    }
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  GameScale.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.game.camera.x = this.game.camera.x - 2;
    }
     else if (this.cursors.right.isDown) {
      this.game.camera.x = this.game.camera.x + 2;
    }
    if (this.cursors.up.isDown) {
      this.game.camera.y = this.game.camera.y - 2;
    }
     else if (this.cursors.down.isDown) {
      this.game.camera.y = this.game.camera.y + 2;
    }
  };
  GameScale.prototype.render = function () {
    this.game.debug.inputInfo(16, 16);
  };
  GameScale.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GameScale',
    baseClasses: []
  };
  function GroupInputEvents() {
    Phaser.State.call(this);
    this.text = '';
  }
  GroupInputEvents.prototype.preload = function () {
    this.game.load.image('beball', 'assets/sprites/beball1.png');
    this.game.load.image('bikkuriman', 'assets/sprites/bikkuriman.png');
  };
  GroupInputEvents.prototype.create = function () {
    var tmp$;
    this.group1 = this.game.add.group();
    this.group2 = this.game.add.group();
    this.group1.inputEnableChildren = true;
    this.group2.inputEnableChildren = true;
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var sprite1 = this.group1.create(64 + 64 * i, 150, 'beball');
      sprite1.name = 'group1-child-' + i;
      var sprite2 = this.group2.create(64 + 64 * i, 350, 'bikkuriman');
      sprite2.name = 'group2-child-' + i;
    }
    this.group1.onChildInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDown_okw7gk$'), this);
    this.group2.onChildInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDown_okw7gk$'), this);
    this.group1.onChildInputOver.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onOver_okw7gk$'), this);
    this.group2.onChildInputOver.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onOver_okw7gk$'), this);
    this.group1.onChildInputOut.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onOut_okw7gk$'), this);
    this.group2.onChildInputOut.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onOut_okw7gk$'), this);
  };
  GroupInputEvents.prototype.onDown_okw7gk$ = function (sprite) {
    this.text = 'onDown: ' + sprite.name;
    sprite.tint = 65280;
  };
  GroupInputEvents.prototype.onOver_okw7gk$ = function (sprite) {
    this.text = 'onOver: ' + sprite.name;
    sprite.tint = 16711680;
  };
  GroupInputEvents.prototype.onOut_okw7gk$ = function (sprite) {
    this.text = 'onOut: ' + sprite.name;
    sprite.tint = 16777215;
  };
  GroupInputEvents.prototype.render = function () {
    if (this.text === '') {
      this.game.debug.text('Interact with the Sprites.', 32, 32);
    }
     else {
      this.game.debug.text(this.text, 32, 32);
    }
  };
  GroupInputEvents.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GroupInputEvents',
    baseClasses: []
  };
  function IgnoreChildInput() {
    Phaser.State.call(this);
    this.text = '';
  }
  IgnoreChildInput.prototype.preload = function () {
    this.game.load.image('beball', 'assets/sprites/beball1.png');
    this.game.load.image('bikkuriman', 'assets/sprites/bikkuriman.png');
    this.game.load.image('square', 'assets/sprites/50x50.png');
  };
  IgnoreChildInput.prototype.create = function () {
    var tmp$;
    this.group1 = this.game.add.group();
    this.group2 = this.game.add.group();
    this.group1.inputEnableChildren = true;
    this.group2.inputEnableChildren = true;
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var sprite1 = this.group1.create(64 + 64 * i, 150, 'beball');
      sprite1.name = 'group1-child-' + i;
      sprite1.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'clickedSprite_okw7gk$'), this);
      var sprite2 = this.group2.create(64 + 64 * i, 350, 'bikkuriman');
      sprite2.name = 'group2-child-' + i;
      sprite2.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'clickedSprite_okw7gk$'), this);
    }
    var toggle = this.add.sprite(800 - 66, 16, 'square');
    toggle.inputEnabled = true;
    toggle.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'toggleGroup'), this);
  };
  IgnoreChildInput.prototype.toggleGroup = function () {
    this.group2.ignoreChildInput = this.group2.ignoreChildInput ? false : true;
  };
  IgnoreChildInput.prototype.clickedSprite_okw7gk$ = function (sprite) {
    this.text = sprite.name;
    sprite.tint = 16711680;
  };
  IgnoreChildInput.prototype.render = function () {
    if (this.text === '') {
      this.game.debug.text('Click the Sprites. Click the square to toggle Group 2 input.', 32, 32);
    }
     else {
      this.game.debug.text('You clicked: ' + this.text, 32, 32);
    }
    this.game.debug.text('Group2.ignoreChildInput: ' + this.group2.ignoreChildInput, 32, 64);
  };
  IgnoreChildInput.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'IgnoreChildInput',
    baseClasses: []
  };
  function InputChildPriority() {
    Phaser.State.call(this);
    this.tween = null;
  }
  InputChildPriority.prototype.preload = function () {
    this.game.load.image('background', 'assets/pics/bubble-on.png');
    this.game.load.image('close', 'assets/sprites/orb-red.png');
  };
  InputChildPriority.prototype.create = function () {
    this.game.stage.backgroundColor = '#4b0049';
    this.popup = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'background');
    this.popup.anchor.set(0.5);
    this.popup.inputEnabled = true;
    this.popup.input.enableDrag();
    var pw = this.popup.width / 2 - 30;
    var ph = this.popup.height / 2 - 8;
    var closeButton = this.game.make.sprite(pw, -ph, 'close');
    closeButton.inputEnabled = true;
    closeButton.input.priorityID = 1;
    closeButton.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'closeWindow'), this);
    this.popup.addChild(closeButton);
    this.popup.scale.set(0);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'openWindow'), this);
  };
  function InputChildPriority$openWindow$ObjectLiteral() {
    this.x = 1;
    this.y = 1;
  }
  InputChildPriority$openWindow$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  InputChildPriority.prototype.openWindow = function () {
    var tmp$;
    if (this.tween != null && ((tmp$ = this.tween) != null ? tmp$ : Kotlin.throwNPE()).isRunning || (this.popup.scale.x | 0) === 1) {
      return;
    }
    this.tween = this.game.add.tween(this.popup.scale).to(new InputChildPriority$openWindow$ObjectLiteral(), 1000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Elastic, 'Out'), true);
  };
  function InputChildPriority$closeWindow$ObjectLiteral() {
    this.x = 0;
    this.y = 0;
  }
  InputChildPriority$closeWindow$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  InputChildPriority.prototype.closeWindow = function () {
    var tmp$;
    if (this.tween != null && ((tmp$ = this.tween) != null ? tmp$ : Kotlin.throwNPE()).isRunning || (this.popup.scale.x | 0) === 0) {
      return;
    }
    this.tween = this.game.add.tween(this.popup.scale).to(new InputChildPriority$closeWindow$ObjectLiteral(), 500, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Elastic, 'In'), true);
  };
  InputChildPriority.prototype.render = function () {
    this.game.debug.text('Click to open window + drag + close', 32, 32);
  };
  InputChildPriority.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'InputChildPriority',
    baseClasses: []
  };
  function InputEnableGroup() {
    Phaser.State.call(this);
    this.text = '';
  }
  InputEnableGroup.prototype.preload = function () {
    this.game.load.image('beball', 'assets/sprites/beball1.png');
    this.game.load.image('bikkuriman', 'assets/sprites/bikkuriman.png');
  };
  InputEnableGroup.prototype.create = function () {
    var tmp$;
    var group = this.game.add.group();
    group.inputEnableChildren = true;
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var sprite = group.create(64 + 64 * i, 400, 'beball');
      sprite.name = 'child' + i;
      sprite.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'clickedSprite_okw7gk$'), this);
    }
  };
  InputEnableGroup.prototype.clickedSprite_okw7gk$ = function (sprite) {
    this.text = sprite.name;
    sprite.y = sprite.y - 16;
  };
  InputEnableGroup.prototype.render = function () {
    if (this.text === '') {
      this.game.debug.text('Click the Sprites', 32, 32);
    }
     else {
      this.game.debug.text('You clicked: ' + this.text, 32, 32);
    }
  };
  InputEnableGroup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'InputEnableGroup',
    baseClasses: []
  };
  function InputOrder() {
    Phaser.State.call(this);
    this.text = '';
  }
  InputOrder.prototype.preload = function () {
    this.game.load.image('block', 'assets/sprites/block.png');
  };
  InputOrder.prototype.create = function () {
    var tmp$;
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var sprite = this.game.add.sprite(64 + 64 * i, 200 + i * 4, 'block');
      sprite.name = 'block' + i;
      sprite.inputEnabled = true;
      sprite.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'clickedSprite_okw7gk$'), this);
    }
  };
  InputOrder.prototype.clickedSprite_okw7gk$ = function (sprite) {
    this.text = sprite.name + ' RenderOrderID: ' + sprite.renderOrderID;
    sprite.tint = 16711680;
  };
  InputOrder.prototype.render = function () {
    if (this.text === '') {
      this.game.debug.text('Click the Sprites', 32, 32);
    }
     else {
      this.game.debug.text('You clicked: ' + this.text, 32, 32);
    }
  };
  InputOrder.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'InputOrder',
    baseClasses: []
  };
  function InputPriority() {
    Phaser.State.call(this);
  }
  InputPriority.prototype.preload = function () {
    this.game.load.image('manga', 'assets/pics/manga-girl.png');
    this.game.load.image('disk', 'assets/sprites/copy-that-floppy.png');
    this.game.load.image('card', 'assets/sprites/mana_card.png');
  };
  InputPriority.prototype.create = function () {
    this.game.stage.backgroundColor = '#4b0049';
    var manga = this.game.add.sprite(100, 100, 'manga');
    manga.inputEnabled = true;
    manga.input.enableDrag(false, false, true);
    manga.input.priorityID = 2;
    var disk = this.game.add.sprite(200, 200, 'disk');
    disk.alpha = 0.7;
    disk.inputEnabled = true;
    disk.input.enableDrag(false, false, true);
    disk.input.priorityID = 1;
    var card = this.game.add.sprite(300, 300, 'card');
    card.inputEnabled = true;
    card.input.enableDrag(false, false, true);
    card.input.priorityID = 0;
  };
  InputPriority.prototype.render = function () {
    this.game.debug.text('Drag the Sprites', 32, 32);
  };
  InputPriority.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'InputPriority',
    baseClasses: []
  };
  function Keyboard() {
    Phaser.State.call(this);
    this.speed = 4;
  }
  Keyboard.prototype.preload = function () {
    this.game.world.setBounds(0, 0, 1280, 600);
    this.game.load.image('ground', 'assets/tests/ground-2x.png');
    this.game.load.image('river', 'assets/tests/river-2x.png');
    this.game.load.image('sky', 'assets/tests/sky-2x.png');
    this.game.load.image('cloud0', 'assets/tests/cloud-big-2x.png');
    this.game.load.image('cloud1', 'assets/tests/cloud-narrow-2x.png');
    this.game.load.image('cloud2', 'assets/tests/cloud-small-2x.png');
    this.game.load.spritesheet('button', 'assets/buttons/arrow-button.png', 112, 95);
    this.game.load.image('ufo', 'assets/sprites/ufo.png');
  };
  Keyboard.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 1280, 600, 'sky');
    this.game.add.sprite(0, 360, 'ground');
    this.game.add.sprite(0, 400, 'river');
    this.game.add.sprite(200, 120, 'cloud0');
    this.game.add.sprite(-60, 120, 'cloud1');
    this.game.add.sprite(900, 170, 'cloud2');
    this.ufo = this.game.add.sprite(320, 240, 'ufo');
    this.ufo.anchor.setTo(0.5, 0.5);
    this.game.camera.follow(this.ufo);
    this.leftBtn = this.game.add.sprite(160 - 112, 200, 'button', 0);
    this.leftBtn.alpha = 0.0;
    this.rightBtn = this.game.add.sprite(640 - 112, 200, 'button', 1);
    this.rightBtn.alpha = 0.0;
  };
  Keyboard.prototype.update = function () {
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {
      this.ufo.x = this.ufo.x - this.speed;
      this.ufo.angle = -15.0;
      this.leftBtn.alpha = 0.6;
    }
     else if (this.game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {
      this.ufo.x = this.ufo.x + this.speed;
      this.ufo.angle = 15.0;
      this.rightBtn.alpha = 0.6;
    }
     else {
      this.ufo.rotation = 0.0;
      this.leftBtn.alpha = 0.0;
      this.rightBtn.alpha = 0.0;
    }
  };
  Keyboard.prototype.render = function () {
    this.game.debug.text('Hold left/right to move the ufo.');
  };
  Keyboard.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Keyboard',
    baseClasses: []
  };
  function KeyboardHotkeys() {
    Phaser.State.call(this);
  }
  KeyboardHotkeys.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser-dude.png');
    this.game.load.image('logo', 'assets/sprites/phaser_tiny.png');
    this.game.load.image('pineapple', 'assets/sprites/pineapple.png');
  };
  function KeyboardHotkeys$create$ObjectLiteral() {
  }
  KeyboardHotkeys$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  KeyboardHotkeys.prototype.create = function () {
    this.game.stage.backgroundColor = '#736357';
    this.game.add.text(0, 0, 'Press one, two or three !', new KeyboardHotkeys$create$ObjectLiteral());
    this.key1 = this.game.input.keyboard.addKey(Phaser.Keyboard.ONE);
    this.key1.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'addPhaserDude'), this);
    this.key2 = this.game.input.keyboard.addKey(Phaser.Keyboard.TWO);
    this.key2.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'addPhaserLogo'), this);
    this.key3 = this.game.input.keyboard.addKey(Phaser.Keyboard.THREE);
    this.key3.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'addPineapple'), this);
    this.game.input.keyboard.removeKeyCapture(Phaser.Keyboard.ONE);
    this.game.input.keyboard.removeKeyCapture(Phaser.Keyboard.TWO);
    this.game.input.keyboard.removeKeyCapture(Phaser.Keyboard.THREE);
  };
  KeyboardHotkeys.prototype.update = function () {
    if (this.game.input.activePointer.withinGame) {
      this.game.input.enabled = true;
      this.game.stage.backgroundColor = '#736357';
    }
     else {
      this.game.input.enabled = false;
      this.game.stage.backgroundColor = '#731111';
    }
  };
  KeyboardHotkeys.prototype.addPhaserDude = function () {
    this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'phaser');
  };
  KeyboardHotkeys.prototype.addPhaserLogo = function () {
    this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'logo');
  };
  KeyboardHotkeys.prototype.addPineapple = function () {
    this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'pineapple');
  };
  KeyboardHotkeys.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'KeyboardHotkeys',
    baseClasses: []
  };
  function KeyboardJustpressed() {
    Phaser.State.call(this);
    this.bullet = null;
    this.bulletTime = 0.0;
  }
  KeyboardJustpressed.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser-dude.png');
    this.game.load.image('bullet', 'assets/misc/bullet0.png');
  };
  function KeyboardJustpressed$create$ObjectLiteral() {
    this.font = '16px Arial';
    this.fill = '#ffffff';
    this.align = 'center';
  }
  KeyboardJustpressed$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function KeyboardJustpressed$create$ObjectLiteral_0() {
    this.font = '16px Arial';
    this.fill = '#ffffff';
    this.align = 'center';
  }
  KeyboardJustpressed$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function KeyboardJustpressed$create$ObjectLiteral_1() {
    this.font = '16px Arial';
    this.fill = '#ffffff';
    this.align = 'center';
  }
  KeyboardJustpressed$create$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function KeyboardJustpressed$create$ObjectLiteral_2() {
    this.font = '16px Arial';
    this.fill = '#ffffff';
    this.align = 'center';
  }
  KeyboardJustpressed$create$ObjectLiteral_2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function KeyboardJustpressed$create$ObjectLiteral_3() {
    this.font = '16px Arial';
    this.fill = '#ffffff';
    this.align = 'center';
  }
  KeyboardJustpressed$create$ObjectLiteral_3.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function KeyboardJustpressed$create$ObjectLiteral_4() {
    this.font = '16px Arial';
    this.fill = '#ffffff';
    this.align = 'center';
  }
  KeyboardJustpressed$create$ObjectLiteral_4.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  KeyboardJustpressed.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#2d2d2d';
    this.bullets = this.game.add.group();
    this.bullets.enableBody = true;
    this.bullets.physicsBodyType = Phaser.Physics.ARCADE;
    this.bullets.createMultiple(10, 'bullet');
    this.bullets.callAll('events.onOutOfBounds.add', 'events.onOutOfBounds', Kotlin.getBoundCallableRefForMemberFunction(this, 'resetBullet_wk0l8n$'), this);
    this.bullets.setAll('checkWorldBounds', true);
    this.sprite = this.game.add.sprite(400, 550, 'phaser');
    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
    this.leftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT);
    this.rightKey = this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
    this.spaceKey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
    this.game.input.keyboard.addKeyCapture(mutableListOf([Phaser.Keyboard.LEFT, Phaser.Keyboard.RIGHT, Phaser.Keyboard.SPACEBAR]));
    this.textLeft = this.game.add.text(20, 20, 'Left was pressed 250 ms ago? NO', new KeyboardJustpressed$create$ObjectLiteral());
    this.textRight = this.game.add.text(20, 60, 'Right was pressed 500 ms ago? NO', new KeyboardJustpressed$create$ObjectLiteral_0());
    this.textSpace = this.game.add.text(20, 100, 'Space was pressed 1000 ms ago? NO', new KeyboardJustpressed$create$ObjectLiteral_1());
    this.textLeft2 = this.game.add.text(600, 20, 'Is left still down? NO', new KeyboardJustpressed$create$ObjectLiteral_2());
    this.textRight2 = this.game.add.text(600, 60, 'Is right still down? NO', new KeyboardJustpressed$create$ObjectLiteral_3());
    this.textSpace2 = this.game.add.text(600, 100, 'Is space still down? NO', new KeyboardJustpressed$create$ObjectLiteral_4());
  };
  KeyboardJustpressed.prototype.update = function () {
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    if (this.leftKey.isDown) {
      this.sprite.body.velocity.x = -200.0;
      this.textLeft2.text = 'Is left still down? YES';
    }
     else {
      this.textLeft2.text = 'Is left still down? NO';
    }
    if (this.rightKey.isDown) {
      this.sprite.body.velocity.x = 200.0;
      this.textRight2.text = 'Is right still down? YES';
    }
     else {
      this.textRight2.text = 'Is right still down? NO';
    }
    if (this.spaceKey.isDown) {
      this.fireBullet();
      this.textSpace2.text = 'Is space still down? YES';
    }
     else {
      this.textSpace2.text = 'Is space still down? NO';
    }
    if (this.leftKey.downDuration(250)) {
      this.textLeft.text = 'Left was pressed 250 ms ago? YES';
    }
     else {
      this.textLeft.text = 'Left was pressed 250 ms ago? NO';
    }
    if (this.rightKey.downDuration(500)) {
      this.textRight.text = 'Right was pressed 500 ms ago? YES';
    }
     else {
      this.textRight.text = 'Right was pressed 500 ms ago? NO';
    }
    if (this.spaceKey.downDuration(1000)) {
      this.textSpace.text = 'Space was pressed 1000 ms ago? YES';
    }
     else {
      this.textSpace.text = 'Space was pressed 1000 ms ago? NO';
    }
  };
  KeyboardJustpressed.prototype.fireBullet = function () {
    var tmp$, tmp$_0;
    if (this.game.time.now > this.bulletTime) {
      this.bullet = this.bullets.getFirstExists(false);
      if (this.bullet != null) {
        reset((tmp$ = this.bullet) != null ? tmp$ : Kotlin.throwNPE(), this.sprite.x + 6, this.sprite.y - 8);
        ((tmp$_0 = this.bullet) != null ? tmp$_0 : Kotlin.throwNPE()).body.velocity.y = -300.0;
        this.bulletTime = this.game.time.now + 250;
      }
    }
  };
  KeyboardJustpressed.prototype.resetBullet_wk0l8n$ = function (bullet) {
    bullet.kill();
  };
  KeyboardJustpressed.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'KeyboardJustpressed',
    baseClasses: []
  };
  function KeyExample() {
    Phaser.State.call(this);
  }
  KeyExample.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser-dude.png');
  };
  KeyExample.prototype.create = function () {
    this.game.stage.backgroundColor = '#736357';
    this.sprite = this.game.add.sprite(300, 300, 'phaser');
    this.upKey = this.game.input.keyboard.addKey(Phaser.Keyboard.UP);
    this.downKey = this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN);
    this.leftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT);
    this.rightKey = this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
  };
  KeyExample.prototype.update = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10;
    if (this.upKey.isDown) {
      tmp$ = this.sprite;
      tmp$_0 = tmp$.y, tmp$_1 = tmp$_0, tmp$.y = tmp$_0 - 1, tmp$_1;
    }
     else if (this.downKey.isDown) {
      tmp$_2 = this.sprite;
      tmp$_3 = tmp$_2.y, tmp$_4 = tmp$_3, tmp$_2.y = tmp$_3 + 1, tmp$_4;
    }
    if (this.leftKey.isDown) {
      tmp$_5 = this.sprite;
      tmp$_6 = tmp$_5.x, tmp$_7 = tmp$_6, tmp$_5.x = tmp$_6 - 1, tmp$_7;
    }
     else if (this.rightKey.isDown) {
      tmp$_8 = this.sprite;
      tmp$_9 = tmp$_8.x, tmp$_10 = tmp$_9, tmp$_8.x = tmp$_9 + 1, tmp$_10;
    }
  };
  KeyExample.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'KeyExample',
    baseClasses: []
  };
  function MotionLockHorizontal() {
    Phaser.State.call(this);
  }
  MotionLockHorizontal.prototype.preload = function () {
    this.game.load.image('sprite', 'assets/sprites/parsec.png');
  };
  MotionLockHorizontal.prototype.create = function () {
    this.game.stage.backgroundColor = 'rgb(85,85,85)';
    this.sprite = this.game.add.sprite(200, 400, 'sprite');
    this.sprite.inputEnabled = true;
    this.sprite.input.enableDrag();
    this.sprite.input.allowVerticalDrag = false;
  };
  MotionLockHorizontal.prototype.render = function () {
    this.game.debug.inputInfo(32, 32);
    this.game.debug.spriteInputInfo(this.sprite, 300, 32);
  };
  MotionLockHorizontal.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MotionLockHorizontal',
    baseClasses: []
  };
  function MotionLockVertical() {
    Phaser.State.call(this);
  }
  MotionLockVertical.prototype.preload = function () {
    this.game.load.image('sprite', 'assets/sprites/darkwing_crazy.png');
  };
  MotionLockVertical.prototype.create = function () {
    this.game.stage.backgroundColor = 'rgb(85,85,85)';
    this.sprite = this.game.add.sprite(200, 200, 'sprite');
    this.sprite.inputEnabled = true;
    this.sprite.input.enableDrag();
    this.sprite.input.allowHorizontalDrag = false;
  };
  MotionLockVertical.prototype.render = function () {
    this.game.debug.inputInfo(32, 32);
    this.game.debug.spriteInputInfo(this.sprite, 300, 32);
  };
  MotionLockVertical.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MotionLockVertical',
    baseClasses: []
  };
  function MouseButtons() {
    Phaser.State.call(this);
  }
  MouseButtons.prototype.preload = function () {
    this.game.load.image('mouse', 'assets/sprites/mouse_jim_sachs.png');
  };
  MouseButtons.prototype.create = function () {
    this.game.stage.backgroundColor = '#943021';
    this.game.add.sprite(0, 100, 'mouse');
    this.game.input.mouse.capture = true;
  };
  MouseButtons.prototype.render = function () {
    this.game.debug.text('Left Button: ' + this.game.input.activePointer.leftButton.isDown, 300, 132);
    this.game.debug.text('Middle Button: ' + this.game.input.activePointer.middleButton.isDown, 300, 196);
    this.game.debug.text('Right Button: ' + this.game.input.activePointer.rightButton.isDown, 300, 260);
  };
  MouseButtons.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MouseButtons',
    baseClasses: []
  };
  function MultiTouch() {
    Phaser.State.call(this);
  }
  MultiTouch.prototype.create = function () {
    this.game.stage.backgroundColor = '#454645';
    this.game.input.addPointer();
    this.game.input.addPointer();
    this.game.input.addPointer();
    this.game.input.addPointer();
  };
  MultiTouch.prototype.render = function () {
    this.game.debug.pointer(this.game.input.mousePointer);
    this.game.debug.pointer(this.game.input.pointer1);
    this.game.debug.pointer(this.game.input.pointer2);
    this.game.debug.pointer(this.game.input.pointer3);
    this.game.debug.pointer(this.game.input.pointer4);
    this.game.debug.pointer(this.game.input.pointer5);
    this.game.debug.pointer(this.game.input.pointer6);
  };
  MultiTouch.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MultiTouch',
    baseClasses: []
  };
  function OnTap() {
    Phaser.State.call(this);
  }
  OnTap.prototype.preload = function () {
    this.game.load.image('TheEnd', 'assets/pics/TheEnd_by_Iloe_and_Made.jpg');
    this.game.load.image('BountyHunter', 'assets/pics/Bounty_Hunter_by_Anathematixs_Desire.png');
  };
  function OnTap$create$ObjectLiteral() {
    this.font = '32px Arial';
    this.fill = '#ffffff';
  }
  OnTap$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  OnTap.prototype.create = function () {
    this.pic = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'TheEnd');
    this.pic.alpha = 0.5;
    this.pic.anchor.set(0.5);
    this.pic.scale.set(0.6);
    this.game.add.text(16, 16, 'tap or double-tap the image', new OnTap$create$ObjectLiteral());
    this.game.input.onTap.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onTap_h7x89r$'), this);
  };
  OnTap.prototype.onTap_h7x89r$ = function (pointer, doubleTap) {
    if (doubleTap) {
      if (this.pic.key === 'TheEnd') {
        this.pic.loadTexture('BountyHunter');
      }
       else {
        this.pic.loadTexture('TheEnd');
      }
    }
     else {
      this.pic.alpha = this.pic.alpha === 0.5 ? 1.0 : 0.5;
    }
  };
  OnTap.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'OnTap',
    baseClasses: []
  };
  function OutOfGame() {
    Phaser.State.call(this);
  }
  OutOfGame.prototype.preload = function () {
    this.game.load.image('rain', 'assets/pics/thalion-rain.png');
    this.game.load.image('bubble', 'assets/pics/bubble-on.png');
  };
  OutOfGame.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 800, 600, 'rain');
    this.bubble = this.game.add.image(this.game.world.centerX, this.game.world.centerY, 'bubble');
    this.bubble.anchor.set(0.5);
  };
  OutOfGame.prototype.update = function () {
    if (this.game.input.activePointer.withinGame) {
      this.bubble.alpha = 1.0;
    }
     else {
      this.bubble.alpha = 0.3;
    }
  };
  OutOfGame.prototype.render = function () {
    this.game.debug.inputInfo(32, 32);
    this.game.debug.pointer(this.game.input.activePointer);
  };
  OutOfGame.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'OutOfGame',
    baseClasses: []
  };
  function OutOfGameMouseUp() {
    Phaser.State.call(this);
  }
  OutOfGameMouseUp.prototype.preload = function () {
    this.game.load.image('rain', 'assets/pics/thalion-rain.png');
    this.game.load.image('bubble', 'assets/pics/bubble-on.png');
  };
  OutOfGameMouseUp.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 800, 600, 'rain');
    this.bubble = this.game.add.image(this.game.world.centerX, this.game.world.centerY, 'bubble');
    this.bubble.anchor.set(0.5);
    this.bubble.inputEnabled = true;
    this.bubble.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDown'), this);
    this.bubble.events.onInputUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onUp'), this);
  };
  OutOfGameMouseUp.prototype.onDown = function () {
    this.bubble.alpha = 0.3;
  };
  OutOfGameMouseUp.prototype.onUp = function () {
    this.bubble.alpha = 1.0;
  };
  OutOfGameMouseUp.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'OutOfGameMouseUp',
    baseClasses: []
  };
  function OverrideDefaultControls() {
    Phaser.State.call(this);
    this.speed = 4;
  }
  OverrideDefaultControls.prototype.preload = function () {
    this.game.world.setBounds(0, 0, 1280, 600);
    this.game.load.image('ground', 'assets/tests/ground-2x.png');
    this.game.load.image('river', 'assets/tests/river-2x.png');
    this.game.load.image('sky', 'assets/tests/sky-2x.png');
    this.game.load.image('cloud0', 'assets/tests/cloud-big-2x.png');
    this.game.load.image('cloud1', 'assets/tests/cloud-narrow-2x.png');
    this.game.load.image('cloud2', 'assets/tests/cloud-small-2x.png');
    this.game.load.spritesheet('button', 'assets/buttons/arrow-button.png', 112, 95);
    this.game.load.image('spacebar', 'assets/buttons/spacebar.png');
    this.game.load.image('ufo', 'assets/sprites/ufo.png');
  };
  OverrideDefaultControls.prototype.create = function () {
    this.sky = this.game.add.sprite(0, 0, 'sky');
    this.game.add.sprite(0, 360, 'ground');
    this.game.add.sprite(0, 400, 'river');
    this.game.add.sprite(200, 120, 'cloud0');
    this.game.add.sprite(-60, 120, 'cloud1');
    this.game.add.sprite(900, 170, 'cloud2');
    this.ufo = this.game.add.sprite(320, 240, 'ufo');
    this.ufo.anchor.setTo(0.5, 0.5);
    this.sky.scale.setTo(2, 1);
    this.game.camera.follow(this.ufo);
    this.leftBtn = this.game.add.sprite(160 - 112, 200, 'button', 0);
    this.leftBtn.alpha = 0.0;
    this.rightBtn = this.game.add.sprite(640 - 112, 200, 'button', 1);
    this.rightBtn.alpha = 0.0;
    this.spaceBtn = this.game.add.sprite(400 - 112, 100, 'spacebar');
    this.spaceBtn.alpha = 0.0;
    this.game.input.keyboard.addKeyCapture([Phaser.Keyboard.LEFT, Phaser.Keyboard.RIGHT, Phaser.Keyboard.UP, Phaser.Keyboard.DOWN, Phaser.Keyboard.SPACEBAR]);
  };
  OverrideDefaultControls.prototype.update = function () {
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {
      this.ufo.x = this.ufo.x - this.speed;
      this.ufo.angle = -15.0;
      this.leftBtn.alpha = 0.6;
    }
     else if (this.game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {
      this.ufo.x = this.ufo.x + this.speed;
      this.ufo.angle = 15.0;
      this.rightBtn.alpha = 0.6;
    }
     else {
      this.ufo.rotation = 0.0;
      this.leftBtn.alpha = 0.0;
      this.rightBtn.alpha = 0.0;
    }
    if (this.game.input.keyboard.downDuration(Phaser.Keyboard.SPACEBAR, 50)) {
      console.log('space bar pressed');
      this.spaceBtn.alpha = 1.0;
    }
    if (this.spaceBtn.alpha > 0) {
      this.spaceBtn.alpha = this.spaceBtn.alpha - 0.03;
    }
  };
  OverrideDefaultControls.prototype.render = function () {
    this.game.debug.text('Hold left/right to move the ufo.', 16, 32);
    this.game.debug.text('Direction and Space key events are stopped by Phaser now,', 16, 48);
    this.game.debug.text('so they will no longer be sent to the browser', 16, 64);
    this.game.debug.text('Now you can press UP/DOWN or SPACE to see what happened.', 16, 80);
  };
  OverrideDefaultControls.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'OverrideDefaultControls',
    baseClasses: []
  };
  function PixelPerfectClickDetection() {
    Phaser.State.call(this);
  }
  PixelPerfectClickDetection.prototype.preload = function () {
    this.game.load.image('bunny', 'assets/sprites/bunny.png');
  };
  PixelPerfectClickDetection.prototype.create = function () {
    this.bunny = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'bunny');
    this.bunny.anchor.set(0.5);
    this.bunny.inputEnabled = true;
    this.bunny.input.pixelPerfectOver = true;
    this.bunny.input.useHandCursor = true;
  };
  PixelPerfectClickDetection.prototype.update = function () {
    this.bunny.angle = this.bunny.angle + 0.05;
  };
  PixelPerfectClickDetection.prototype.render = function () {
    this.game.debug.spriteInputInfo(this.bunny, 32, 32);
  };
  PixelPerfectClickDetection.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PixelPerfectClickDetection',
    baseClasses: []
  };
  function PixelpickAtlas() {
    Phaser.State.call(this);
  }
  PixelpickAtlas.prototype.preload = function () {
    this.game.load.atlas('atlas', 'assets/pics/texturepacker_test.png', 'assets/pics/texturepacker_test.json');
  };
  PixelpickAtlas.prototype.create = function () {
    this.game.stage.backgroundColor = '#404040';
    this.chick = this.game.add.sprite(64, 64, 'atlas');
    this.chick.frameName = 'budbrain_chick.png';
    this.chick.inputEnabled = true;
    this.chick.input.pixelPerfectClick = true;
    this.chick.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'clicked_xslgx6$'), this);
    this.cop = this.game.add.sprite(600, 64, 'atlas');
    this.cop.frameName = 'ladycop.png';
    this.cop.inputEnabled = true;
    this.cop.input.pixelPerfectClick = true;
    this.cop.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'clicked_xslgx6$'), this);
    this.robot = this.game.add.sprite(50, 300, 'atlas');
    this.robot.frameName = 'robot.png';
    this.robot.inputEnabled = true;
    this.robot.input.pixelPerfectClick = true;
    this.robot.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'clicked_xslgx6$'), this);
    this.car = this.game.add.sprite(100, 400, 'atlas');
    this.car.frameName = 'supercars_parsec.png';
    this.car.inputEnabled = true;
    this.car.input.pixelPerfectClick = true;
    this.car.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'clicked_xslgx6$'), this);
    this.mech = this.game.add.sprite(250, 100, 'atlas');
    this.mech.frameName = 'titan_mech.png';
    this.mech.inputEnabled = true;
    this.mech.input.pixelPerfectClick = true;
    this.mech.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'clicked_xslgx6$'), this);
    this.text = this.game.add.text(16, 16, 'Click a sprite', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
  };
  PixelpickAtlas.prototype.clicked_xslgx6$ = function (sprite, pointer) {
    this.text.text = 'You clicked ' + sprite.frameName;
  };
  PixelpickAtlas.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PixelpickAtlas',
    baseClasses: []
  };
  function PixelpickAtlasScaled() {
    Phaser.State.call(this);
  }
  PixelpickAtlasScaled.prototype.preload = function () {
    this.game.load.atlas('atlas', 'assets/pics/texturepacker_test.png', 'assets/pics/texturepacker_test.json');
  };
  PixelpickAtlasScaled.prototype.create = function () {
    this.game.stage.backgroundColor = '#404040';
    this.chick = this.game.add.sprite(64, 64, 'atlas');
    this.chick.frameName = 'budbrain_chick.png';
    this.chick.inputEnabled = true;
    this.chick.input.pixelPerfectClick = true;
    this.chick.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'clicked_xslgx6$'), this);
    this.chick.scale.set(2);
    this.cop = this.game.add.sprite(650, 32, 'atlas');
    this.cop.frameName = 'ladycop.png';
    this.cop.inputEnabled = true;
    this.cop.input.pixelPerfectClick = true;
    this.cop.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'clicked_xslgx6$'), this);
    this.cop.scale.set(1, 2.5);
    this.car = this.game.add.sprite(100, 400, 'atlas');
    this.car.frameName = 'supercars_parsec.png';
    this.car.inputEnabled = true;
    this.car.input.pixelPerfectClick = true;
    this.car.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'clicked_xslgx6$'), this);
    this.car.scale.set(0.5);
    this.mech = this.game.add.sprite(240, 100, 'atlas');
    this.mech.frameName = 'titan_mech.png';
    this.mech.inputEnabled = true;
    this.mech.input.pixelPerfectClick = true;
    this.mech.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'clicked_xslgx6$'), this);
    this.mech.scale.set(1.5, 1);
    this.text = this.game.add.text(16, 16, 'Click a sprite', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
  };
  PixelpickAtlasScaled.prototype.clicked_xslgx6$ = function (sprite, pointer) {
    this.text.text = 'You clicked ' + sprite.frameName;
  };
  PixelpickAtlasScaled.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PixelpickAtlasScaled',
    baseClasses: []
  };
  function PixelpickScrollingEffect() {
    Phaser.State.call(this);
    this.camSpeed = 4;
  }
  PixelpickScrollingEffect.prototype.preload = function () {
    this.game.load.spritesheet('mummy', 'assets/sprites/metalslug_mummy37x45.png', 37, 45, 18);
    this.game.load.image('stars', 'assets/misc/starfield.jpg');
  };
  PixelpickScrollingEffect.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.world.setBounds(0, 0, 4000, 2000);
    this.s = this.game.add.tileSprite(0, 0, 4000, 600, 'stars');
    this.b = this.game.add.sprite(0, 300, 'mummy');
    enable(this.game.physics.arcade, this.b);
    this.b.scale.set(6);
    this.b.smoothed = false;
    this.b.animations.add('walk');
    this.b.animations.play('walk', 5, true);
    this.b.body.velocity.setTo(50, 0);
    this.b.inputEnabled = true;
    this.b.input.pixelPerfectClick = true;
    this.b.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'tint'), this);
  };
  PixelpickScrollingEffect.prototype.tint = function () {
    this.b.tint = random(Phaser.Math) * 16777215;
  };
  PixelpickScrollingEffect.prototype.update = function () {
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {
      this.game.camera.x = this.game.camera.x - this.camSpeed;
      if (!this.game.camera.atLimit.x) {
        this.s.tilePosition.x = this.s.tilePosition.x + this.camSpeed;
      }
    }
     else if (this.game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {
      this.game.camera.x = this.game.camera.x + this.camSpeed;
      if (!this.game.camera.atLimit.x) {
        this.s.tilePosition.x = this.s.tilePosition.x - this.camSpeed;
      }
    }
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.UP)) {
      this.game.camera.y = this.game.camera.y - this.camSpeed;
      if (!this.game.camera.atLimit.y) {
        this.s.tilePosition.y = this.s.tilePosition.y + this.camSpeed;
      }
    }
     else if (this.game.input.keyboard.isDown(Phaser.Keyboard.DOWN)) {
      this.game.camera.y = this.game.camera.y + this.camSpeed;
      if (!this.game.camera.atLimit.y) {
        this.s.tilePosition.y = this.s.tilePosition.y - this.camSpeed;
      }
    }
  };
  PixelpickScrollingEffect.prototype.render = function () {
    this.game.debug.spriteInputInfo(this.b, 32, 32);
  };
  PixelpickScrollingEffect.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PixelpickScrollingEffect',
    baseClasses: []
  };
  function PixelpickSpritesheet() {
    Phaser.State.call(this);
  }
  PixelpickSpritesheet.prototype.preload = function () {
    this.game.load.spritesheet('mummy', 'assets/sprites/metalslug_mummy37x45.png', 37, 45, 18);
  };
  PixelpickSpritesheet.prototype.create = function () {
    Phaser.Canvas.setSmoothingEnabled(this.game.context, false);
    this.b = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'mummy');
    this.b.anchor.set(0.5);
    this.b.scale.set(6);
    this.b.smoothed = false;
    this.b.animations.add('walk');
    this.b.animations.play('walk', 5, true);
    this.b.inputEnabled = true;
    this.b.input.pixelPerfectOver = true;
    this.b.input.useHandCursor = true;
  };
  PixelpickSpritesheet.prototype.render = function () {
    this.game.debug.spriteInputInfo(this.b, 32, 32);
  };
  PixelpickSpritesheet.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PixelpickSpritesheet',
    baseClasses: []
  };
  function PointerOver() {
    Phaser.State.call(this);
  }
  PointerOver.prototype.preload = function () {
    this.game.load.image('bunny', 'assets/sprites/bunny.png');
  };
  PointerOver.prototype.create = function () {
    this.bunny = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'bunny');
    this.bunny.alpha = 0.5;
    this.bunny.anchor.set(0.5);
    this.bunny.inputEnabled = true;
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'p_pal8wq$'), this);
  };
  PointerOver.prototype.p_pal8wq$ = function (pointer) {
  };
  PointerOver.prototype.update = function () {
    if (this.bunny.input.pointerOver()) {
      this.bunny.alpha = 1.0;
    }
     else {
      this.bunny.alpha = 0.5;
    }
  };
  PointerOver.prototype.render = function () {
    this.game.debug.text('Over: ' + this.bunny.input.pointerOver(), 32, 32);
    this.game.debug.text(this.game.input.mouse.locked, 320, 32);
  };
  PointerOver.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PointerOver',
    baseClasses: []
  };
  function SnapOnDrag() {
    Phaser.State.call(this);
  }
  SnapOnDrag.prototype.preload = function () {
    this.game.load.image('grid', 'assets/tests/debug-grid-1920x1920.png');
    this.game.load.image('atari1', 'assets/sprites/atari130xe.png');
    this.game.load.image('atari2', 'assets/sprites/atari800xl.png');
  };
  SnapOnDrag.prototype.create = function () {
    this.game.add.sprite(0, 0, 'grid');
    var atari1 = this.game.add.sprite(128, 128, 'atari1');
    var atari2 = this.game.add.sprite(256, 256, 'atari2');
    atari1.inputEnabled = true;
    atari2.inputEnabled = true;
    atari1.input.enableDrag();
    atari2.input.enableDrag();
    atari1.input.enableSnap(32, 32, true, true);
    atari2.input.enableSnap(32, 32, false, true);
  };
  SnapOnDrag.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SnapOnDrag',
    baseClasses: []
  };
  function TouchEvents() {
    Phaser.State.call(this);
  }
  function TouchEvents$create$lambda(pointer) {
    console.log('UP');
  }
  function TouchEvents$create$lambda_0(pointer) {
    console.log('DOWN');
  }
  function TouchEvents$create$lambda_1(pointer) {
    console.log('TAP');
  }
  TouchEvents.prototype.create = function () {
    this.game.stage.backgroundColor = '#454645';
    this.game.input.onUp.add(TouchEvents$create$lambda);
    this.game.input.onDown.add(TouchEvents$create$lambda_0);
    this.game.input.onTap.add(TouchEvents$create$lambda_1);
  };
  TouchEvents.prototype.render = function () {
    this.game.debug.pointer(this.game.input.mousePointer);
    this.game.debug.pointer(this.game.input.pointer1);
    this.game.debug.pointer(this.game.input.pointer2);
  };
  TouchEvents.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TouchEvents',
    baseClasses: []
  };
  function WordInput() {
    Phaser.State.call(this);
    this.word = 'phaser';
    this.correct = mutableMapOf([]);
  }
  function WordInput$create$lambda(it) {
  }
  function WordInput$create$lambda_0(it) {
  }
  WordInput.prototype.create = function () {
    var tmp$;
    tmp$ = this.word.length - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.correct.put_wn2jw4$(this.word.charAt(i), false);
    }
    this.bmd = this.game.make.bitmapData(800, 200);
    this.bmd.context.font = '64px Arial';
    this.bmd.context.fillStyle = '#ffffff';
    this.bmd.context.fillText(this.word, 64.0, 64.0);
    this.bmd.addToWorld();
    this.game.input.keyboard.addCallbacks(this, WordInput$create$lambda, WordInput$create$lambda_0, Kotlin.getBoundCallableRefForMemberFunction(this, 'keyPress_s8itvh$'));
  };
  WordInput.prototype.keyPress_s8itvh$ = function (char) {
    var tmp$;
    this.bmd.cls();
    var x = 64.0;
    tmp$ = this.word.length - 1;
    for (var i = 0; i <= tmp$; i++) {
      var letter = this.word.charAt(i);
      if (char === letter) {
        this.correct.put_wn2jw4$(letter, true);
      }
      if (Kotlin.equals(this.correct.get_za3rmp$(letter), true)) {
        this.bmd.context.fillStyle = '#00ff00';
      }
       else {
        this.bmd.context.fillStyle = '#ffffff';
      }
      this.bmd.context.fillText(letter.toString(), x, 64.0);
      x += this.bmd.context.measureText(letter.toString()).width;
    }
  };
  WordInput.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'WordInput',
    baseClasses: []
  };
  function AssetPack() {
    Phaser.State.call(this);
  }
  AssetPack.prototype.preload = function () {
    this.game.load.pack('level1', 'assets/asset-pack1.json', null, this);
    this.game.load.image('test', 'assets/sprites/ilkke.png');
  };
  AssetPack.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.game.add.image(0, 0, 'starwars');
    this.game.add.image(0, 300, 'spaceship');
    this.game.add.image(700, 360, 'test');
    this.music = this.game.sound.play('boden');
    this.game.add.bitmapText(380, 150, 'desyrel', 'Bitmap Fonts', 48);
    var mummy = this.game.add.sprite(370, 232, 'mummy');
    mummy.animations.add('walk');
    mummy.animations.play('walk', 20, true);
  };
  AssetPack.prototype.render = function () {
    this.game.debug.soundInfo(this.music, 370, 32);
    if (this.music.isDecoding) {
      this.game.debug.text('Decoding MP3 ...', 32, 200);
    }
  };
  AssetPack.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AssetPack',
    baseClasses: []
  };
  function CheckCache() {
    Phaser.State.call(this);
  }
  CheckCache.prototype.preload = function () {
    this.game.load.image('image', 'assets/sprites/phaser2.png');
    this.game.load.text('html', 'http://phaser.io');
    this.game.load.tilemap('mario', 'assets/tilemaps/maps/super_mario.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.audio('sfx', mutableListOf(['assets/audio/SoundEffects/squit.mp3', 'assets/audio/SoundEffects/squit.ogg']));
  };
  function CheckCache$create$ObjectLiteral() {
    this.fill = '#ffffff';
  }
  CheckCache$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function CheckCache$create$ObjectLiteral_0() {
    this.fill = '#ffffff';
  }
  CheckCache$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function CheckCache$create$ObjectLiteral_1() {
    this.fill = '#ffffff';
  }
  CheckCache$create$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function CheckCache$create$ObjectLiteral_2() {
    this.fill = '#ffffff';
  }
  CheckCache$create$ObjectLiteral_2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function CheckCache$create$ObjectLiteral_3() {
    this.fill = '#ffffff';
  }
  CheckCache$create$ObjectLiteral_3.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  CheckCache.prototype.create = function () {
    var image_0 = this.game.cache.checkImageKey('image');
    var text_0 = this.game.cache.checkTextKey('html');
    var tilemap = this.game.cache.checkTilemapKey('mario');
    var audio = this.game.cache.checkSoundKey('sfx');
    var broken = this.game.cache.checkImageKey('playerHead');
    this.game.add.text(40, 40, 'Check Image Key: ' + image_0, new CheckCache$create$ObjectLiteral());
    this.game.add.text(40, 80, 'Check Text Key: ' + text_0, new CheckCache$create$ObjectLiteral_0());
    this.game.add.text(40, 120, 'Check Tilemap Key: ' + tilemap, new CheckCache$create$ObjectLiteral_1());
    this.game.add.text(40, 160, 'Check Audio Key: ' + audio, new CheckCache$create$ObjectLiteral_2());
    this.game.add.text(40, 200, 'Check Image 2 Key: ' + broken, new CheckCache$create$ObjectLiteral_3());
  };
  CheckCache.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CheckCache',
    baseClasses: []
  };
  function LoadAudio() {
    Phaser.State.call(this);
  }
  LoadAudio.prototype.preload = function () {
    this.game.load.audio('boden', mutableListOf(['assets/audio/bodenstaendig_2000_in_rock_4bit.mp3', 'assets/audio/bodenstaendig_2000_in_rock_4bit.ogg']));
  };
  LoadAudio.prototype.create = function () {
    this.game.stage.backgroundColor = '#182d3b';
    this.music = this.game.sound.play('boden');
  };
  LoadAudio.prototype.render = function () {
    this.game.debug.soundInfo(this.music, 32, 32);
    if (this.music.isDecoding) {
      this.game.debug.text('Decoding MP3 ...', 32, 200);
    }
  };
  LoadAudio.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadAudio',
    baseClasses: []
  };
  function LoadBitmapFont() {
    Phaser.State.call(this);
  }
  LoadBitmapFont.prototype.preload = function () {
    this.game.load.bitmapFont('desyrel', 'assets/fonts/bitmapFonts/desyrel.png', 'assets/fonts/bitmapFonts/desyrel.xml');
  };
  LoadBitmapFont.prototype.create = function () {
    this.game.stage.backgroundColor = '#0072bc';
    this.text = this.game.add.bitmapText(200, 100, 'desyrel', 'Bitmap Fonts!', 64);
  };
  LoadBitmapFont.prototype.update = function () {
    this.text.setText('Bitmap Fonts!\nx: ' + round(Phaser.Math, this.game.input.x) + ' y: ' + round(Phaser.Math, this.game.input.y));
  };
  LoadBitmapFont.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadBitmapFont',
    baseClasses: []
  };
  function LoadImage() {
    Phaser.State.call(this);
  }
  LoadImage.prototype.preload = function () {
    this.game.load.image('imageKey', 'assets/sprites/phaser2.png');
  };
  LoadImage.prototype.create = function () {
    this.game.add.sprite(0, 0, 'imageKey');
  };
  LoadImage.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadImage',
    baseClasses: []
  };
  function LoadJsonFile() {
    Phaser.State.call(this);
  }
  LoadJsonFile.prototype.preload = function () {
    this.game.load.json('version', 'http://phaser.io/version.json');
  };
  function LoadJsonFile$create$ObjectLiteral() {
    this.fill = '#ffffff';
  }
  LoadJsonFile$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function LoadJsonFile$create$ObjectLiteral_0() {
    this.fill = '#ffffff';
  }
  LoadJsonFile$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function LoadJsonFile$create$ObjectLiteral_1() {
    this.fill = '#ffffff';
  }
  LoadJsonFile$create$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  LoadJsonFile.prototype.create = function () {
    this.game.stage.backgroundColor = '#0072bc';
    var phaserJSON = this.game.cache.getJSON('version');
    var text_0 = this.game.add.text(100, 100, 'Current Phaser version: ' + phaserJSON.version, new LoadJsonFile$create$ObjectLiteral());
    text_0.setShadow(2, 2, 'rgba(0,0,0,0.5)', 0);
    var text2 = this.game.add.text(100, 200, 'Name: ' + phaserJSON.name, new LoadJsonFile$create$ObjectLiteral_0());
    text2.setShadow(2, 2, 'rgba(0,0,0,0.5)', 0);
    var text3 = this.game.add.text(100, 300, 'Released: ' + phaserJSON.released, new LoadJsonFile$create$ObjectLiteral_1());
    text3.setShadow(2, 2, 'rgba(0,0,0,0.5)', 0);
  };
  LoadJsonFile.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadJsonFile',
    baseClasses: []
  };
  function LoadSpritesheet() {
    Phaser.State.call(this);
  }
  LoadSpritesheet.prototype.preload = function () {
    this.game.load.spritesheet('uniqueKey', 'assets/sprites/metalslug_mummy37x45.png', 37, 45, 18);
  };
  LoadSpritesheet.prototype.create = function () {
    var sprite = this.game.add.sprite(300, 200, 'uniqueKey');
    sprite.animations.add('walk');
    sprite.animations.play('walk', 50, true);
  };
  LoadSpritesheet.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadSpritesheet',
    baseClasses: []
  };
  function LoadStarlingAtlas() {
    Phaser.State.call(this);
  }
  LoadStarlingAtlas.prototype.preload = function () {
    this.game.load.atlasXML('seacreatures', 'assets/sprites/seacreatures.png', 'assets/sprites/seacreatures.xml');
    this.game.load.image('undersea', 'assets/pics/undersea.jpg');
    this.game.load.image('coral', 'assets/pics/seabed.png');
  };
  function LoadStarlingAtlas$create$ObjectLiteral() {
    this.y = 250;
  }
  LoadStarlingAtlas$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  LoadStarlingAtlas.prototype.create = function () {
    this.game.add.sprite(0, 0, 'undersea');
    this.jellyfish = this.game.add.sprite(330, 100, 'seacreatures');
    this.jellyfish.animations.add('swim', Phaser.Animation.generateFrameNames('greenJellyfish', 0, 39, '', 4), 30, true);
    this.jellyfish.animations.play('swim');
    this.game.add.sprite(0, 466, 'coral');
    this.game.add.tween(this.jellyfish).to(new LoadStarlingAtlas$create$ObjectLiteral(), 4000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Quadratic, 'InOut'), true, 0, 10000, true);
  };
  LoadStarlingAtlas.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadStarlingAtlas',
    baseClasses: []
  };
  function LoadTextFile() {
    Phaser.State.call(this);
  }
  LoadTextFile.prototype.preload = function () {
    this.game.load.text('html', 'http://phaser.io');
  };
  LoadTextFile.prototype.create = function () {
    this.game.stage.backgroundColor = '#0072bc';
    var html = this.game.cache.getText('html');
    this.text = split(html, ['\n']);
  };
  LoadTextFile.prototype.render = function () {
    var tmp$;
    tmp$ = 30 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.game.debug.text(this.text.get_za3lpa$(i), 32, i * 20);
    }
  };
  LoadTextFile.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadTextFile',
    baseClasses: []
  };
  function LoadTextureAtlas() {
    Phaser.State.call(this);
  }
  LoadTextureAtlas.prototype.preload = function () {
    this.game.load.atlas('test', 'assets/sprites/atlas_hash_trim.png', 'assets/sprites/atlas_json_array_trim.json', Phaser.Loader.TEXTURE_ATLAS_JSON_HASH);
    this.game.load.image('undersea', 'assets/pics/undersea.jpg');
    this.game.load.image('coral', 'assets/pics/seabed.png');
  };
  LoadTextureAtlas.prototype.create = function () {
    this.game.add.sprite(0, 0, 'undersea');
    this.game.add.sprite(0, 0, 'test');
    this.game.add.sprite(0, 466, 'coral');
  };
  LoadTextureAtlas.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadTextureAtlas',
    baseClasses: []
  };
  function LoadTilemapJson() {
    Phaser.State.call(this);
  }
  LoadTilemapJson.prototype.preload = function () {
    this.game.load.tilemap('mario', 'assets/tilemaps/maps/super_mario.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/super_mario.png');
  };
  LoadTilemapJson.prototype.create = function () {
    this.game.stage.backgroundColor = '#787878';
    this.map = this.game.add.tilemap('mario');
    this.map.addTilesetImage('SuperMarioBros-World1-1', 'tiles');
    this.layer = this.map.createLayer('World1');
    this.layer.resizeWorld();
  };
  LoadTilemapJson.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadTilemapJson',
    baseClasses: []
  };
  function LoadVideo() {
    Phaser.State.call(this);
  }
  LoadVideo.prototype.preload = function () {
    this.game.load.video('chrome', 'assets/video/chrome.webm');
  };
  LoadVideo.prototype.create = function () {
    this.game.stage.backgroundColor = '#232323';
    this.video = this.game.add.video('chrome');
    this.sprite = this.video.addToWorld(this.game.world.centerX, this.game.world.centerY, 0.5, 0.5, 2, 2);
    this.video.play(true);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'pause'), this);
  };
  LoadVideo.prototype.pause = function () {
    this.video.paused = this.video.paused ? false : true;
  };
  LoadVideo.prototype.render = function () {
    this.game.debug.text('Video Time: ' + this.video.currentTime, 32, 20);
    this.game.debug.text('Video Duration: ' + this.video.duration, 550, 20);
    this.game.debug.text('Video Progress: ' + round(Phaser.Math, this.video.progress * 100) + '%', 32, 590);
    this.game.debug.text('Video Playing: ' + this.video.playing, 550, 590);
  };
  LoadVideo.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadVideo',
    baseClasses: []
  };
  function LoadXmlFile() {
    Phaser.State.call(this);
  }
  LoadXmlFile.prototype.preload = function () {
    this.game.load.xml('octopus', 'assets/sprites/octopus.xml');
  };
  LoadXmlFile.prototype.create = function () {
    this.game.stage.backgroundColor = '#0072bc';
    var xml = this.game.cache.getXML('octopus');
    console.log(xml);
  };
  LoadXmlFile.prototype.render = function () {
    var tmp$;
    tmp$ = 30 - 1;
    for (var i = 0; i <= tmp$; i++) {
    }
  };
  LoadXmlFile.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadXmlFile',
    baseClasses: []
  };
  function PickImagesFromCache() {
    Phaser.State.call(this);
  }
  PickImagesFromCache.prototype.preload = function () {
    this.game.load.image('atari1', 'assets/sprites/atari130xe.png');
    this.game.load.image('atari2', 'assets/sprites/atari800xl.png');
    this.game.load.image('atari4', 'assets/sprites/atari800.png');
    this.game.load.image('sonic', 'assets/sprites/sonic_havok_sanity.png');
    this.game.load.image('duck', 'assets/sprites/darkwing_crazy.png');
    this.game.load.image('firstaid', 'assets/sprites/firstaid.png');
    this.game.load.image('diamond', 'assets/sprites/diamond.png');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  PickImagesFromCache.prototype.create = function () {
    var tmp$;
    var images_1 = this.game.cache.getKeys(Phaser.Cache.IMAGE);
    tmp$ = 20 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var img = this.game.rnd.pick(images_1);
      var tempSprite = this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, img);
      tempSprite.inputEnabled = true;
      tempSprite.input.enableDrag(false, true);
    }
  };
  PickImagesFromCache.prototype.render = function () {
    this.game.debug.inputInfo(32, 32);
  };
  PickImagesFromCache.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PickImagesFromCache',
    baseClasses: []
  };
  function AntialiasGame() {
    Phaser.State.call(this);
    this.transparent = false;
    this.antialias = false;
  }
  AntialiasGame.prototype.preload = function () {
    this.game.load.image('girl', 'assets/pics/manga-girl.png');
  };
  AntialiasGame.prototype.create = function () {
    this.game.stage.backgroundColor = '#0076a3';
    var sprite = this.game.add.sprite(32, -100, 'girl');
    sprite.scale.set(4);
  };
  AntialiasGame.prototype.render = function () {
    this.game.debug.text('Anti-alias: ' + this.game.antialias, 10, 32);
  };
  AntialiasGame.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AntialiasGame',
    baseClasses: []
  };
  function Device() {
    Phaser.State.call(this);
  }
  Device.prototype.create = function () {
  };
  Device.prototype.render = function () {
    this.game.debug.text('Navigator: ' + window.navigator.userAgent, 32, 32);
    this.game.debug.text('iOS: ' + this.game.device.iOS, 32, 64);
    this.game.debug.text('Mobile Safari: ' + this.game.device.mobileSafari, 32, 98);
    this.game.debug.text('WebApp: ' + this.game.device.webApp, 32, 128);
    this.game.debug.text('app: ' + this.game.device.iOSVersion, 32, 128 + 64);
  };
  Device.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Device',
    baseClasses: []
  };
  function GameConfig_0() {
    Phaser.State.call(this);
  }
  GameConfig_0.prototype.preload = function () {
    this.game.load.image('robota', 'assets/pics/Robota_UXO_by_Made_of_Bomb.jpg');
  };
  function GameConfig$create$ObjectLiteral() {
    this.x = -160;
  }
  GameConfig$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  GameConfig_0.prototype.create = function () {
    this.game.stage.backgroundColor = '#0076a3';
    var sprite = this.game.add.sprite(0, 50, 'robota');
    sprite.scale.set(0.5);
    this.game.add.tween(sprite).to(new GameConfig$create$ObjectLiteral(), 2000, 'Sine.easeInOut', true, 0, -1, true);
  };
  GameConfig_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GameConfig',
    baseClasses: []
  };
  function Net() {
    Phaser.State.call(this);
  }
  Net.prototype.render = function () {
    this.game.debug.text('Host Name:' + this.game.net.getHostName(), this.game.world.centerX - 300, 20);
    this.game.debug.text('Host Name contains 192:' + this.game.net.checkDomainName('192'), this.game.world.centerX - 300, 40);
    this.game.debug.text('Host Name contains google.com:' + this.game.net.checkDomainName('google.com'), this.game.world.centerX - 300, 60);
    this.game.debug.text('Query string with values : ' + this.game.net.updateQueryString('atari', '520'), this.game.world.centerX - 400, 80);
    this.game.debug.text('Query string with values : ' + this.game.net.updateQueryString('amiga', '1200'), this.game.world.centerX - 400, 100);
    console.log('Query String: ' + this.game.net.getQueryString(), this.game.world.centerX - 300, 140);
    console.log('Query String Param: ' + this.game.net.getQueryString('atari'), this.game.world.centerX - 300, 160);
  };
  Net.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Net',
    baseClasses: []
  };
  function PauseMenu() {
    Phaser.State.call(this);
    this.w = 800;
    this.h = 600;
  }
  PauseMenu.prototype.preload = function () {
    this.game.load.image('diamond', 'assets/sprites/diamond.png');
    this.game.load.image('menu', 'assets/buttons/number-buttons-90x90.png', 270, 180);
  };
  function PauseMenu$create$ObjectLiteral() {
    this.font = '24px Arial';
    this.fill = '#fff';
  }
  PauseMenu$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function PauseMenu$create$lambda$ObjectLiteral() {
    this.font = '30px Arial';
    this.fill = '#fff';
  }
  PauseMenu$create$lambda$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function PauseMenu$create$lambda(this$PauseMenu) {
    return function (p) {
      this$PauseMenu.game.paused = true;
      this$PauseMenu.menu = this$PauseMenu.game.add.sprite(this$PauseMenu.w / 2 | 0, this$PauseMenu.h / 2 | 0, 'menu');
      this$PauseMenu.menu.anchor.setTo(0.5, 0.5);
      this$PauseMenu.choiseLabel = this$PauseMenu.game.add.text(this$PauseMenu.w / 2 | 0, this$PauseMenu.h - 150, 'Click outside menu to continue', new PauseMenu$create$lambda$ObjectLiteral());
      this$PauseMenu.choiseLabel.anchor.setTo(0.5, 0.5);
    };
  }
  PauseMenu.prototype.create = function () {
    this.game.stage.backgroundColor = '#337799';
    this.emitter = this.game.add.emitter(this.game.world.centerX, 100, 200);
    this.emitter.makeParticles('diamond');
    this.emitter.start(false, 5000, 20);
    this.pause_label = this.game.add.text(this.w - 100, 20, 'Pause', new PauseMenu$create$ObjectLiteral());
    this.pause_label.inputEnabled = true;
    this.pause_label.events.onInputUp.add(PauseMenu$create$lambda(this));
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'unpause_pal8wq$'));
  };
  PauseMenu.prototype.unpause_pal8wq$ = function (event) {
    if (this.game.paused) {
      var x1 = (this.w / 2 | 0) - (270 / 2 | 0);
      var x2 = (this.w / 2 | 0) + (270 / 2 | 0);
      var y1 = (this.h / 2 | 0) - (180 / 2 | 0);
      var y2 = (this.h / 2 | 0) + (180 / 2 | 0);
      if (event.x > x1 && event.x < x2 && event.y > y1 && event.y < y2) {
        var choisemap = mutableListOf(['one', 'two', 'three', 'four', 'five', 'six']);
        var x = event.x - x1;
        var y = event.y - y1;
        var choise = floor(Phaser.Math, x / 90) + 3 * floor(Phaser.Math, y / 90);
        this.choiseLabel.text = 'You chose menu item: ' + choisemap.get_za3lpa$(choise);
      }
       else {
        destroy(this.menu);
        destroy(this.choiseLabel);
        this.game.paused = false;
      }
    }
  };
  PauseMenu.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PauseMenu',
    baseClasses: []
  };
  function RandomGenerators() {
    Phaser.State.call(this);
  }
  RandomGenerators.prototype.create = function () {
    this.game.stage.backgroundColor = '#454645';
    var style = TextStyle('14px Arial', void 0, void 0, void 0, void 0, void 0, '#ff0044', 'center');
    this.game.add.text(32, 30, 'Integer: ' + this.game.rnd.integer(), style);
    this.game.add.text(32, 60, 'Frac: ' + this.game.rnd.frac(), style);
    this.game.add.text(32, 90, 'Real: ' + this.game.rnd.real(), style);
    this.game.add.text(32, 120, 'Integer in Range (100-200): ' + this.game.rnd.integerInRange(100, 200), style);
  };
  RandomGenerators.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RandomGenerators',
    baseClasses: []
  };
  function RepeatableRandomNumbers() {
    Phaser.State.call(this);
  }
  RepeatableRandomNumbers.prototype.create = function () {
    this.game.rnd.sow([123]);
    console.log('A');
    console.log(this.game.rnd.integer());
    console.log(this.game.rnd.integer());
    console.log(this.game.rnd.integer());
    console.log(this.game.rnd.integer());
    console.log(this.game.rnd.integer());
    this.game.rnd.sow([0]);
    console.log('B');
    console.log(this.game.rnd.integer());
    console.log(this.game.rnd.integer());
    console.log(this.game.rnd.integer());
    console.log(this.game.rnd.integer());
    console.log(this.game.rnd.integer());
    this.game.rnd.sow([123]);
    console.log('C');
    console.log(this.game.rnd.integer());
    console.log(this.game.rnd.integer());
    console.log(this.game.rnd.integer());
    console.log(this.game.rnd.integer());
    console.log(this.game.rnd.integer());
  };
  RepeatableRandomNumbers.prototype.update = function () {
  };
  RepeatableRandomNumbers.prototype.render = function () {
  };
  RepeatableRandomNumbers.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RepeatableRandomNumbers',
    baseClasses: []
  };
  function Template() {
    Phaser.State.call(this);
  }
  Template.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser.png');
  };
  Template.prototype.create = function () {
    this.sprite = this.game.add.sprite(0, 0, 'phaser');
  };
  Template.prototype.update = function () {
    this.sprite.x = this.game.input.x;
    this.sprite.y = this.game.input.y;
  };
  Template.prototype.render = function () {
  };
  Template.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Template',
    baseClasses: []
  };
  function WeightedPick() {
    Phaser.State.call(this);
  }
  WeightedPick.prototype.preload = function () {
    this.game.load.image('bg', 'assets/skies/deepblue.png');
  };
  function WeightedPick$create$ObjectLiteral() {
    this.font = '24px Courier';
    this.fill = '#fff';
    this.tabs = [150];
  }
  WeightedPick$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  WeightedPick.prototype.create = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    this.game.add.image(0, 0, 'bg');
    var test = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    var total = mutableListOf([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    tmp$ = 1000000 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var rnd = this.game.rnd.weightedPick(test);
      tmp$_0 = total.get_za3lpa$(rnd), tmp$_1 = tmp$_0, total.set_vux3hl$(rnd, tmp$_0 + 1), tmp$_1;
    }
    var style = new WeightedPick$create$ObjectLiteral();
    var list = mutableListOf([]);
    tmp$_2 = total.size - 1;
    for (var i_0 = 0; i_0 <= tmp$_2; i_0++) {
      list.add_za3rmp$([i_0, total.get_za3lpa$(i_0)]);
    }
    var listFinal = {v: mutableListOf([['Value', 'Total']])};
    var tmp$_3;
    tmp$_3 = list.iterator();
    while (tmp$_3.hasNext()) {
      var element = tmp$_3.next();
      listFinal.v.add_za3rmp$([element[0].toString(), element[1].toString()]);
    }
    var text_0 = this.game.add.text(200, 64, '', style);
    Array.isArray;
    text_0.parseList(Kotlin.kotlin.collections.copyToArray(listFinal.v));
  };
  WeightedPick.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'WeightedPick',
    baseClasses: []
  };
  function Aabb() {
    Phaser.State.call(this);
    this.mpxi = Aabb$mpxi$lambda;
  }
  Aabb.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('sky', 'assets/skies/sunset.png');
  };
  Aabb.prototype.create = function () {
    this.debugRect = new Phaser.Rectangle();
    this.overlapRect = new Phaser.Rectangle(400, 300, 90, 64);
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.mpxi = Kotlin.getBoundCallableRefForMemberFunction(this.game.physics.p2, 'mpxi');
    this.game.physics.p2.restitution = 0.8;
    this.sprite = this.game.add.sprite(200, 200, 'atari');
    this.game.physics.p2.enable(this.sprite);
    this.sprite.body.setZeroDamping();
    this.sprite.body.fixedRotation = true;
    this.text = this.game.add.text(20, 20, 'move with arrow keys', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  Aabb.prototype.update = function () {
    this.sprite.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.sprite.body.moveLeft(400);
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.moveRight(400);
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.moveUp(400);
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.moveDown(400);
    }
    if (this.debugRect.intersects(this.overlapRect)) {
      this.text.text = 'Overlapping';
    }
     else {
      this.text.text = 'move with arrow keys';
    }
  };
  Aabb.prototype.render = function () {
    var bodyAABB = this.sprite.body.data.aabb;
    this.debugRect.x = this.mpxi(bodyAABB.upperBound[0]);
    this.debugRect.y = this.mpxi(bodyAABB.upperBound[1]);
    this.debugRect.right = this.mpxi(bodyAABB.lowerBound[0]);
    this.debugRect.bottom = this.mpxi(bodyAABB.lowerBound[1]);
    this.game.debug.geom(this.debugRect);
    this.game.debug.geom(this.overlapRect);
  };
  function Aabb$mpxi$lambda(x) {
    return x;
  }
  Aabb.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Aabb',
    baseClasses: []
  };
  function AccelerateToObject() {
    Phaser.State.call(this);
  }
  AccelerateToObject.prototype.preload = function () {
    this.game.load.image('car', 'assets/sprites/car.png');
    this.game.load.image('tinycar', 'assets/sprites/tinycar.png');
  };
  AccelerateToObject.prototype.create = function () {
    var tmp$;
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.bullets = this.game.add.group();
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var bullet = this.bullets.create(this.game.rnd.integerInRange(200, 1700), this.game.rnd.integerInRange(-200, 400), 'tinycar');
      this.game.physics.p2.enable(bullet, false);
    }
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.ship = this.game.add.sprite(32, this.game.world.height - 150, 'car');
    this.game.physics.p2.enable(this.ship);
  };
  AccelerateToObject.prototype.update = function () {
    this.bullets.forEachAlive(Kotlin.getBoundCallableRefForMemberFunction(this, 'moveBullets_okw7gk$'), this);
    if (this.cursors.left.isDown) {
      this.ship.body.rotateLeft(100);
    }
     else if (this.cursors.right.isDown) {
      this.ship.body.rotateRight(100);
    }
     else {
      this.ship.body.setZeroRotation();
    }
    if (this.cursors.up.isDown) {
      this.ship.body.thrust(400);
    }
     else if (this.cursors.down.isDown) {
      this.ship.body.reverse(400);
    }
  };
  AccelerateToObject.prototype.moveBullets_okw7gk$ = function (bullet) {
    this.accelerateToObject_963aea$(bullet, this.ship, 30.0);
  };
  AccelerateToObject.prototype.accelerateToObject_963aea$ = function (obj1, obj2, speed) {
    if (speed === void 0)
      speed = 60.0;
    var angle = atan2(Phaser.Math, obj2.y - obj1.y, obj2.x - obj1.x);
    obj1.body.rotation = angle + Phaser.Math.degToRad(90);
    obj1.body.force.x = cos(Phaser.Math, angle) * speed;
    obj1.body.force.y = sin(Phaser.Math, angle) * speed;
  };
  AccelerateToObject.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AccelerateToObject',
    baseClasses: []
  };
  function BasicMovement() {
    Phaser.State.call(this);
  }
  BasicMovement.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('sky', 'assets/skies/sunset.png');
  };
  BasicMovement.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.restitution = 0.8;
    this.sprite = this.game.add.sprite(200, 200, 'atari');
    this.game.physics.p2.enable(this.sprite);
    this.sprite.body.setZeroDamping();
    this.sprite.body.fixedRotation = true;
    var text_0 = this.game.add.text(20, 20, 'move with arrow keys', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  BasicMovement.prototype.update = function () {
    this.sprite.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.sprite.body.moveLeft(400);
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.moveRight(400);
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.moveUp(400);
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.moveDown(400);
    }
  };
  BasicMovement.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BasicMovement',
    baseClasses: []
  };
  function BodyClick() {
    Phaser.State.call(this);
    this.result = 'Click a body';
  }
  BodyClick.prototype.preload = function () {
    this.game.load.image('contra2', 'assets/pics/contra2.png');
    this.game.load.image('bunny', 'assets/sprites/bunny.png');
    this.game.load.image('block', 'assets/sprites/block.png');
    this.game.load.image('wizball', 'assets/sprites/wizball.png');
    this.game.load.physics('physicsData', 'assets/physics/sprites.json');
  };
  BodyClick.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.contra = this.game.add.sprite(100, 200, 'contra2');
    this.bunny = this.game.add.sprite(550, 200, 'bunny');
    this.block = this.game.add.sprite(300, 400, 'block');
    this.wizball = this.game.add.sprite(500, 500, 'wizball');
    this.game.physics.p2.enable([this.contra, this.bunny, this.block, this.wizball], true);
    this.contra.body.clearShapes();
    this.contra.body.loadPolygon('physicsData', 'contra2');
    this.bunny.body.clearShapes();
    this.bunny.body.loadPolygon('physicsData', 'bunny');
    this.wizball.body.setCircle(45);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'click_pal8wq$'), this);
  };
  BodyClick.prototype.click_pal8wq$ = function (pointer) {
    var tmp$;
    var bodies = this.game.physics.p2.hitTest(pointer.position, [this.contra, this.bunny, this.block, this.wizball]);
    if (bodies.length === 0) {
      this.result = "You didn't click a Body";
    }
     else {
      this.result = 'You clicked: ';
      tmp$ = bodies.length - 1;
      for (var i = 0; i <= tmp$; i++) {
        this.result = this.result + bodies[i].parent.sprite.key;
        if (i < bodies.length - 1) {
          this.result = this.result + ', ';
        }
      }
    }
  };
  BodyClick.prototype.update = function () {
    this.bunny.body.rotateLeft(2);
  };
  BodyClick.prototype.render = function () {
    this.game.debug.text(this.result, 32, 32);
  };
  BodyClick.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BodyClick',
    baseClasses: []
  };
  function BodyDebug_0() {
    Phaser.State.call(this);
    this.result = 'Click a body';
  }
  BodyDebug_0.prototype.preload = function () {
    this.game.load.image('contra2', 'assets/pics/contra2.png');
    this.game.load.image('bunny', 'assets/sprites/bunny.png');
    this.game.load.image('block', 'assets/sprites/block.png');
    this.game.load.image('wizball', 'assets/sprites/wizball.png');
    this.game.load.physics('physicsData', 'assets/physics/sprites.json');
  };
  BodyDebug_0.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.contra = this.game.add.sprite(100, 200, 'contra2');
    this.bunny = this.game.add.sprite(550, 200, 'bunny');
    this.block = this.game.add.sprite(300, 400, 'block');
    this.wizball = this.game.add.sprite(500, 500, 'wizball');
    this.game.physics.p2.enable([this.contra, this.bunny], true);
    this.game.physics.p2.enable([this.block, this.wizball], true);
    this.contra.body.clearShapes();
    this.contra.body.loadPolygon('physicsData', 'contra2');
    this.bunny.body.clearShapes();
    this.bunny.body.loadPolygon('physicsData', 'bunny');
    this.wizball.body.setCircle(45);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'click_pal8wq$'), this);
    console.log(this.contra.body.debug);
    console.log(this.block.body.debug);
  };
  BodyDebug_0.prototype.click_pal8wq$ = function (pointer) {
    var tmp$;
    var bodies = this.game.physics.p2.hitTest(pointer.position, [this.contra, this.bunny, this.block, this.wizball]);
    if (bodies.length === 0) {
      this.result = "You didn't click a Body";
    }
     else {
      this.result = 'You clicked: ';
      tmp$ = bodies.length - 1;
      for (var i = 0; i <= tmp$; i++) {
        this.result = this.result + bodies[i].parent.sprite.key;
        if (i < bodies.length - 1) {
          this.result = this.result + ', ';
        }
      }
    }
  };
  BodyDebug_0.prototype.update = function () {
    this.bunny.body.rotateLeft(2);
  };
  BodyDebug_0.prototype.render = function () {
    this.game.debug.text(this.result, 32, 32);
  };
  BodyDebug_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BodyDebug',
    baseClasses: []
  };
  function CollideWorldBounds() {
    Phaser.State.call(this);
  }
  CollideWorldBounds.prototype.preload = function () {
    this.game.load.image('stars', 'assets/misc/starfield.jpg');
    this.game.load.spritesheet('ship', 'assets/sprites/humstar.png', 32, 32);
  };
  CollideWorldBounds.prototype.create = function () {
    this.starfield = this.game.add.tileSprite(0, 0, 800, 600, 'stars');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.restitution = 0.8;
    this.ship = this.game.add.sprite(200, 200, 'ship');
    this.ship.scale.set(2);
    this.ship.smoothed = false;
    this.ship.animations.add('fly', [0, 1, 2, 3, 4, 5], 10, true);
    this.ship.play('fly');
    this.game.physics.p2.enable(this.ship);
    this.ship.body.setCircle(28);
    this.ship.body.collideWorldBounds = true;
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  CollideWorldBounds.prototype.update = function () {
    this.ship.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.ship.body.moveLeft(200);
    }
     else if (this.cursors.right.isDown) {
      this.ship.body.moveRight(200);
    }
    if (this.cursors.up.isDown) {
      this.ship.body.moveUp(200);
    }
     else if (this.cursors.down.isDown) {
      this.ship.body.moveDown(200);
    }
  };
  CollideWorldBounds.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CollideWorldBounds',
    baseClasses: []
  };
  function CollisionGroups() {
    Phaser.State.call(this);
  }
  CollisionGroups.prototype.preload = function () {
    this.game.load.image('stars', 'assets/misc/starfield.jpg');
    this.game.load.spritesheet('ship', 'assets/sprites/humstar.png', 32, 32);
    this.game.load.image('panda', 'assets/sprites/spinObj_01.png');
    this.game.load.image('sweet', 'assets/sprites/spinObj_06.png');
  };
  CollisionGroups.prototype.create = function () {
    var tmp$;
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.setImpactEvents(true);
    this.game.physics.p2.restitution = 0.8;
    var playerCollisionGroup = this.game.physics.p2.createCollisionGroup();
    var pandaCollisionGroup = this.game.physics.p2.createCollisionGroup();
    this.game.physics.p2.updateBoundsCollisionGroup();
    this.starfield = this.game.add.tileSprite(0, 0, 800, 600, 'stars');
    this.starfield.fixedToCamera = true;
    var pandas = this.game.add.group();
    pandas.enableBody = true;
    pandas.physicsBodyType = Phaser.Physics.P2JS;
    tmp$ = 4 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var panda = pandas.create(this.game.world.randomX, this.game.world.randomY, 'panda');
      panda.body.setRectangle(40, 40);
      panda.body.setCollisionGroup(pandaCollisionGroup);
      panda.body.collides([pandaCollisionGroup, playerCollisionGroup]);
    }
    this.ship = this.game.add.sprite(200, 200, 'ship');
    this.ship.scale.set(2);
    this.ship.smoothed = false;
    this.ship.animations.add('fly', [0, 1, 2, 3, 4, 5], 10, true);
    this.ship.play('fly');
    this.game.physics.p2.enable(this.ship, false);
    this.ship.body.setCircle(28);
    this.ship.body.fixedRotation = true;
    this.ship.body.setCollisionGroup(playerCollisionGroup);
    this.ship.body.collides(pandaCollisionGroup, Kotlin.getBoundCallableRefForMemberFunction(this, 'hitPanda_2adkgk$'), this);
    this.game.camera.follow(this.ship);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  CollisionGroups.prototype.hitPanda_2adkgk$ = function (body1, body2) {
    body2.sprite.alpha = body2.sprite.alpha - 0.1;
  };
  CollisionGroups.prototype.update = function () {
    var tmp$, tmp$_0;
    this.ship.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.ship.body.moveLeft(200);
    }
     else if (this.cursors.right.isDown) {
      this.ship.body.moveRight(200);
    }
    if (this.cursors.up.isDown) {
      this.ship.body.moveUp(200);
    }
     else if (this.cursors.down.isDown) {
      this.ship.body.moveDown(200);
    }
    if (!this.game.camera.atLimit.x) {
      this.starfield.tilePosition.x = this.starfield.tilePosition.x + (typeof (tmp$ = this.ship.body.velocity.x) === 'number' ? tmp$ : Kotlin.throwCCE()) * 16 * this.game.time.physicsElapsed;
    }
    if (!this.game.camera.atLimit.y) {
      this.starfield.tilePosition.y = this.starfield.tilePosition.y + (typeof (tmp$_0 = this.ship.body.velocity.y) === 'number' ? tmp$_0 : Kotlin.throwCCE()) * 16 * this.game.time.physicsElapsed;
    }
  };
  CollisionGroups.prototype.render = function () {
    this.game.debug.text('Collide with the Pandas!', 32, 32);
  };
  CollisionGroups.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CollisionGroups',
    baseClasses: []
  };
  function ContactEvents() {
    Phaser.State.call(this);
    this.result = 'Move with the cursors';
  }
  ContactEvents.prototype.preload = function () {
    this.game.load.image('contra2', 'assets/pics/contra2.png');
    this.game.load.image('block', 'assets/sprites/block.png');
    this.game.load.image('wizball', 'assets/sprites/wizball.png');
    this.game.load.image('tetrisblock1', 'assets/sprites/tetrisblock1.png');
    this.game.load.image('tetrisblock2', 'assets/sprites/tetrisblock2.png');
    this.game.load.image('tetrisblock3', 'assets/sprites/tetrisblock3.png');
    this.game.load.physics('physicsData', 'assets/physics/sprites.json');
  };
  ContactEvents.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.restitution = 0.9;
    this.contra = this.game.add.sprite(200, 200, 'contra2');
    this.block = this.game.add.sprite(500, 200, 'block');
    this.wizball = this.game.add.sprite(500, 500, 'wizball');
    this.tetris1 = this.game.add.sprite(100, 450, 'tetrisblock1');
    this.tetris2 = this.game.add.sprite(300, 450, 'tetrisblock2');
    this.tetris3 = this.game.add.sprite(650, 350, 'tetrisblock3');
    this.game.physics.p2.enable([this.contra, this.block, this.wizball, this.tetris1, this.tetris2, this.tetris3], false);
    this.contra.body.clearShapes();
    this.contra.body.loadPolygon('physicsData', 'contra2');
    this.wizball.body.setCircle(45);
    this.tetris1.body.clearShapes();
    this.tetris1.body.loadPolygon('physicsData', 'tetrisblock1');
    this.tetris2.body.clearShapes();
    this.tetris2.body.loadPolygon('physicsData', 'tetrisblock2');
    this.tetris3.body.clearShapes();
    this.tetris3.body.loadPolygon('physicsData', 'tetrisblock3');
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.block.body.onBeginContact.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'blockHit_2adkgk$'), this);
  };
  ContactEvents.prototype.blockHit_2adkgk$ = function (body, bodyB) {
    if (body != null) {
      this.result = 'You last hit: ' + body.sprite.key;
    }
     else {
      this.result = 'You last hit: The wall :)';
    }
  };
  ContactEvents.prototype.update = function () {
    this.block.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.block.body.moveLeft(200);
    }
     else if (this.cursors.right.isDown) {
      this.block.body.moveRight(200);
    }
    if (this.cursors.up.isDown) {
      this.block.body.moveUp(200);
    }
     else if (this.cursors.down.isDown) {
      this.block.body.moveDown(200);
    }
  };
  ContactEvents.prototype.render = function () {
    this.game.debug.text(this.result, 32, 32);
  };
  ContactEvents.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ContactEvents',
    baseClasses: []
  };
  function ContactMaterial() {
    Phaser.State.call(this);
  }
  ContactMaterial.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('sky', 'assets/skies/sunset.png');
  };
  ContactMaterial.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.gravity.y = 100;
    this.sprite = this.game.add.sprite(200, 200, 'atari');
    this.game.physics.p2.enable(this.sprite);
    var spriteMaterial = this.game.physics.p2.createMaterial('spriteMaterial', this.sprite.body);
    var worldMaterial = this.game.physics.p2.createMaterial('worldMaterial');
    this.game.physics.p2.setWorldMaterial(worldMaterial, true, true, true, true);
    var contactMaterial = this.game.physics.p2.createContactMaterial(spriteMaterial, worldMaterial);
    contactMaterial.friction = 0.3;
    contactMaterial.restitution = 1.0;
    contactMaterial.stiffness = 1.0E7;
    contactMaterial.relaxation = 3;
    contactMaterial.frictionStiffness = 1.0E7;
    contactMaterial.frictionRelaxation = 3;
    contactMaterial.surfaceVelocity = 0;
    var text_0 = this.game.add.text(20, 20, 'move with arrow keys', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  ContactMaterial.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.sprite.body.moveLeft(200);
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.moveRight(200);
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.moveUp(200);
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.moveDown(200);
    }
  };
  ContactMaterial.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ContactMaterial',
    baseClasses: []
  };
  function DistanceConstraint() {
    Phaser.State.call(this);
  }
  DistanceConstraint.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/cokecan.png');
    this.game.load.image('ball', 'assets/sprites/red_ball.png');
    this.game.load.image('sky', 'assets/skies/cavern2.png');
  };
  DistanceConstraint.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.sprite1 = this.game.add.sprite(400, 300, 'ball');
    this.sprite2 = this.game.add.sprite(400, 400, 'atari');
    this.game.physics.p2.enable([this.sprite1, this.sprite2]);
    var constraint = this.game.physics.p2.createDistanceConstraint(this.sprite1, this.sprite2, 150);
    var text_0 = this.game.add.text(20, 20, 'move with arrow keys', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  DistanceConstraint.prototype.update = function () {
    this.sprite1.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.sprite1.body.moveLeft(400);
    }
     else if (this.cursors.right.isDown) {
      this.sprite1.body.moveRight(400);
    }
    if (this.cursors.up.isDown) {
      this.sprite1.body.moveUp(400);
    }
     else if (this.cursors.down.isDown) {
      this.sprite1.body.moveDown(400);
    }
  };
  DistanceConstraint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DistanceConstraint',
    baseClasses: []
  };
  function GearConstraint() {
    Phaser.State.call(this);
  }
  GearConstraint.prototype.preload = function () {
    this.game.load.image('sonic', 'assets/sprites/sonic_havok_sanity.png');
    this.game.load.image('ball', 'assets/sprites/arrow.png');
    this.game.load.image('sky', 'assets/skies/cavern2.png');
  };
  GearConstraint.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.sprite = this.game.add.sprite(400, 200, 'ball');
    var sonic1 = this.game.add.sprite(200, 400, 'sonic');
    var sonic2 = this.game.add.sprite(600, 400, 'sonic');
    this.game.physics.p2.enable([this.sprite, sonic1, sonic2]);
    var constraint1 = this.game.physics.p2.createGearConstraint(this.sprite, sonic1, 0, 1);
    var constraint2 = this.game.physics.p2.createGearConstraint(this.sprite, sonic2, 0, 0.5);
    var text_0 = this.game.add.text(20, 20, 'rotate with arrow keys', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  GearConstraint.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.sprite.body.rotateLeft(50);
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.rotateRight(50);
    }
  };
  GearConstraint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GearConstraint',
    baseClasses: []
  };
  function Gravity_0() {
    Phaser.State.call(this);
  }
  Gravity_0.prototype.preload = function () {
    this.game.load.image('arrow', 'assets/sprites/xenon2_ship.png');
  };
  function Gravity$create$ObjectLiteral() {
    this.fill = '#ffffff';
    this.font = '14pt Arial';
  }
  Gravity$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Gravity_0.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.stage.backgroundColor = '#124184';
    this.bmd = this.game.add.bitmapData(800, 600);
    this.bmd.context.fillStyle = '#ffffff';
    var bg = this.game.add.sprite(0, 0, this.bmd);
    this.game.physics.p2.gravity.y = 100;
    this.game.physics.p2.restitution = 0.8;
    this.sprite = this.game.add.sprite(32, 450, 'arrow');
    this.game.physics.p2.enable(this.sprite);
    this.sprite.body.fixedRotation = true;
    var text_0 = this.game.add.text(20, 20, 'click to the left / right of the ship', new Gravity$create$ObjectLiteral());
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'launch'), this);
  };
  Gravity_0.prototype.launch = function () {
    if (this.game.input.x < this.sprite.x) {
      this.sprite.body.velocity.x = -200;
      this.sprite.body.velocity.y = -200;
    }
     else {
      this.sprite.body.velocity.x = 200;
      this.sprite.body.velocity.y = -200;
    }
  };
  Gravity_0.prototype.update = function () {
    this.bmd.context.fillStyle = '#ffff00';
    this.bmd.context.fillRect(this.sprite.x, this.sprite.y, 2.0, 2.0);
  };
  Gravity_0.prototype.render = function () {
  };
  Gravity_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Gravity',
    baseClasses: []
  };
  function GravityScale() {
    Phaser.State.call(this);
  }
  GravityScale.prototype.preload = function () {
    this.game.load.image('ball', 'assets/sprites/shinyball.png');
    this.game.load.image('sky', 'assets/skies/sunset.png');
  };
  GravityScale.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.gravity.y = 300;
    var spriteMaterial = this.game.physics.p2.createMaterial('spriteMaterial');
    var worldMaterial = this.game.physics.p2.createMaterial('worldMaterial');
    var contactMaterial = this.game.physics.p2.createContactMaterial(spriteMaterial, worldMaterial, ContactMaterialOptions(void 0, 1.0));
    this.game.physics.p2.setWorldMaterial(worldMaterial);
    this.sprite1 = this.game.add.sprite(200, 100, 'ball');
    this.sprite2 = this.game.add.sprite(400, 100, 'ball');
    this.sprite3 = this.game.add.sprite(600, 100, 'ball');
    this.game.physics.p2.enable([this.sprite1, this.sprite2, this.sprite3]);
    this.sprite1.body.setMaterial(spriteMaterial);
    this.sprite2.body.setMaterial(spriteMaterial);
    this.sprite3.body.setMaterial(spriteMaterial);
    this.sprite1.body.data.gravityScale = 1;
    this.sprite2.body.data.gravityScale = 0.5;
    this.sprite3.body.data.gravityScale = 0.25;
  };
  GravityScale.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GravityScale',
    baseClasses: []
  };
  function ImpactEvents() {
    Phaser.State.call(this);
  }
  ImpactEvents.prototype.preload = function () {
    this.game.load.image('stars', 'assets/misc/starfield.jpg');
    this.game.load.spritesheet('ship', 'assets/sprites/humstar.png', 32, 32);
    this.game.load.image('panda', 'assets/sprites/spinObj_01.png');
    this.game.load.image('sweet', 'assets/sprites/spinObj_06.png');
  };
  ImpactEvents.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.restitution = 0.9;
    this.starfield = this.game.add.tileSprite(0, 0, 800, 600, 'stars');
    this.starfield.fixedToCamera = true;
    var panda = this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'panda');
    this.game.physics.p2.enable(panda, false);
    panda.body.setRectangle(40, 40, 0, 0);
    var sweet = this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'sweet');
    this.game.physics.p2.enable(sweet, false);
    sweet.body.setRectangle(40, 40, 0, 0);
    this.ship = this.game.add.sprite(200, 200, 'ship');
    this.ship.scale.set(2);
    this.ship.smoothed = false;
    this.ship.animations.add('fly', [0, 1, 2, 3, 4, 5], 10, true);
    this.ship.play('fly');
    this.game.physics.p2.enable(this.ship, false);
    this.ship.body.setCircle(28);
    this.ship.body.fixedRotation = true;
    this.game.camera.follow(this.ship);
    this.ship.body.createBodyCallback(panda, Kotlin.getBoundCallableRefForMemberFunction(this, 'hitPanda_2adkgk$'), this);
    this.game.physics.p2.setImpactEvents(true);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  ImpactEvents.prototype.hitPanda_2adkgk$ = function (body1, body2) {
    body2.sprite.alpha = body2.sprite.alpha - 0.1;
  };
  ImpactEvents.prototype.update = function () {
    var tmp$, tmp$_0;
    this.ship.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.ship.body.moveLeft(200);
    }
     else if (this.cursors.right.isDown) {
      this.ship.body.moveRight(200);
    }
    if (this.cursors.up.isDown) {
      this.ship.body.moveUp(200);
    }
     else if (this.cursors.down.isDown) {
      this.ship.body.moveDown(200);
    }
    if (!this.game.camera.atLimit.x) {
      this.starfield.tilePosition.x = this.starfield.tilePosition.x + (typeof (tmp$ = this.ship.body.velocity.x) === 'number' ? tmp$ : Kotlin.throwCCE()) * 16 * this.game.time.physicsElapsed;
    }
    if (!this.game.camera.atLimit.y) {
      this.starfield.tilePosition.y = this.starfield.tilePosition.y + (typeof (tmp$_0 = this.ship.body.velocity.y) === 'number' ? tmp$_0 : Kotlin.throwCCE()) * 16 * this.game.time.physicsElapsed;
    }
  };
  ImpactEvents.prototype.render = function () {
    this.game.debug.text('Collide with the Panda!', 32, 32);
  };
  ImpactEvents.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ImpactEvents',
    baseClasses: []
  };
  function KillAndRevive() {
    Phaser.State.call(this);
  }
  KillAndRevive.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('sky', 'assets/skies/sunset.png');
  };
  KillAndRevive.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.restitution = 0.8;
    this.sprite = this.game.add.sprite(200, 200, 'atari');
    this.game.physics.p2.enable(this.sprite);
    this.sprite.body.setZeroDamping();
    this.sprite.body.fixedRotation = true;
    var text_0 = this.game.add.text(20, 20, 'move with arrow keys, click to kill and reset', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'deathToggle_pal8wq$'), this);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  KillAndRevive.prototype.deathToggle_pal8wq$ = function (pointer) {
    if (this.sprite.alive) {
      this.sprite.kill();
    }
     else {
      reset(this.sprite, pointer.x, pointer.y);
    }
  };
  KillAndRevive.prototype.update = function () {
    this.sprite.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.sprite.body.moveLeft(400);
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.moveRight(400);
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.moveUp(400);
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.moveDown(400);
    }
  };
  KillAndRevive.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'KillAndRevive',
    baseClasses: []
  };
  function KinematicBody() {
    Phaser.State.call(this);
  }
  KinematicBody.prototype.preload = function () {
    this.game.load.image('wizball', 'assets/sprites/wizball.png');
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('sky', 'assets/skies/sunset.png');
  };
  KinematicBody.prototype.create = function () {
    this.game.world.setBounds(0, 0, 1600, 1200);
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.restitution = 0.8;
    this.sprite = this.game.add.sprite(400, 300, 'wizball');
    this.game.physics.p2.enable(this.sprite);
    this.sprite.body.setCircle(44);
    this.kinematic1 = this.game.add.sprite(200, 200, 'atari');
    this.kinematic2 = this.game.add.sprite(500, 500, 'atari');
    this.game.physics.p2.enable([this.kinematic1, this.kinematic2]);
    this.kinematic1.body.kinematic = true;
    this.kinematic2.body.kinematic = true;
    this.kinematic1.body.velocity.x = 10;
    this.kinematic2.body.velocity.x = -10;
    var text_0 = this.game.add.text(20, 20, 'move with arrow keys', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.time.events.loop(Phaser.Timer.SECOND * 20, Kotlin.getBoundCallableRefForMemberFunction(this, 'switchDirections'), this);
  };
  KinematicBody.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.sprite.body.rotateLeft(80);
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.rotateRight(80);
    }
     else {
      this.sprite.body.setZeroRotation();
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.thrust(400);
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.reverse(400);
    }
  };
  KinematicBody.prototype.switchDirections = function () {
    this.kinematic1.body.velocity.x = this.game.physics.p2.mpxi(this.kinematic1.body.velocity.x) * -1;
    this.kinematic2.body.velocity.x = this.game.physics.p2.mpxi(this.kinematic2.body.velocity.x) * -1;
  };
  KinematicBody.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'KinematicBody',
    baseClasses: []
  };
  function LoadPolygon1() {
    Phaser.State.call(this);
    this.start = false;
  }
  LoadPolygon1.prototype.preload = function () {
    this.game.load.image('contra2', 'assets/pics/contra2.png');
    this.game.load.physics('physicsData', 'assets/physics/sprites.json');
  };
  function LoadPolygon1$create$lambda(this$LoadPolygon1) {
    return function (s) {
      this$LoadPolygon1.start = true;
    };
  }
  LoadPolygon1.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.contra = this.game.add.sprite(400, 300, 'contra2');
    this.game.physics.p2.enable(this.contra, true);
    this.contra.body.clearShapes();
    this.contra.body.loadPolygon('physicsData', 'contra2');
    this.game.input.onDown.add(LoadPolygon1$create$lambda(this), this);
  };
  LoadPolygon1.prototype.update = function () {
    if (this.start != null) {
      this.contra.body.rotateLeft(5);
    }
  };
  LoadPolygon1.prototype.render = function () {
  };
  LoadPolygon1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadPolygon1',
    baseClasses: []
  };
  function LoadPolygon2() {
    Phaser.State.call(this);
    this.start = false;
  }
  LoadPolygon2.prototype.preload = function () {
    this.game.load.image('contra2', 'assets/pics/contra2.png');
    this.game.load.image('bunny', 'assets/sprites/bunny.png');
    this.game.load.image('tetrisblock1', 'assets/sprites/tetrisblock1.png');
    this.game.load.image('tetrisblock2', 'assets/sprites/tetrisblock2.png');
    this.game.load.image('tetrisblock3', 'assets/sprites/tetrisblock3.png');
    this.game.load.physics('physicsData', 'assets/physics/sprites.json');
  };
  LoadPolygon2.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.restitution = 0.8;
    this.contra = this.game.add.sprite(100, 200, 'contra2');
    this.bunny = this.game.add.sprite(500, 250, 'bunny');
    this.tetris1 = this.game.add.sprite(100, 400, 'tetrisblock1');
    this.tetris2 = this.game.add.sprite(300, 450, 'tetrisblock2');
    this.tetris3 = this.game.add.sprite(600, 450, 'tetrisblock3');
    this.game.physics.p2.enable([this.contra, this.bunny, this.tetris1, this.tetris2, this.tetris3], true);
    this.contra.body.clearShapes();
    this.contra.body.loadPolygon('physicsData', 'contra2');
    this.bunny.body.clearShapes();
    this.bunny.body.loadPolygon('physicsData', 'bunny');
    this.tetris1.body.clearShapes();
    this.tetris1.body.loadPolygon('physicsData', 'tetrisblock1');
    this.tetris2.body.clearShapes();
    this.tetris2.body.loadPolygon('physicsData', 'tetrisblock2');
    this.tetris3.body.clearShapes();
    this.tetris3.body.loadPolygon('physicsData', 'tetrisblock3');
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'boom'), this);
  };
  LoadPolygon2.prototype.boom = function () {
    if (this.game.input.activePointer.x > this.tetris1.x) {
      this.tetris1.body.rotateLeft(200);
    }
     else {
      this.tetris1.body.rotateRight(200);
    }
    if (this.game.input.activePointer.y < this.tetris1.y) {
      this.tetris1.body.moveForward(400);
    }
     else {
      this.tetris1.body.moveBackward(400);
    }
  };
  LoadPolygon2.prototype.update = function () {
  };
  LoadPolygon2.prototype.render = function () {
  };
  LoadPolygon2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadPolygon2',
    baseClasses: []
  };
  function LoadPolygon3() {
    Phaser.State.call(this);
  }
  LoadPolygon3.prototype.preload = function () {
    this.game.load.image('contra2', 'assets/pics/contra2.png');
  };
  function LoadPolygon3$create$lambda() {
  }
  LoadPolygon3.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.contra = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY - 200, 'contra2');
    this.game.physics.p2.enable(this.contra, true);
    this.contra.body.clearShapes();
    this.contra.body.addPolygon(LoadPolygon3$create$lambda, 10, 191, 26, 158, 25, 186, 13, 204);
  };
  LoadPolygon3.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadPolygon3',
    baseClasses: []
  };
  function LockConstraint() {
    Phaser.State.call(this);
  }
  LockConstraint.prototype.preload = function () {
    this.game.load.image('vu', 'assets/sprites/vu.png');
    this.game.load.image('ball', 'assets/sprites/arrow.png');
    this.game.load.image('sky', 'assets/skies/cavern2.png');
  };
  LockConstraint.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.sprite = this.game.add.sprite(400, 200, 'ball');
    var vu1 = this.game.add.sprite(400, 300, 'vu');
    this.game.physics.p2.enable([this.sprite, vu1]);
    var constraint = this.game.physics.p2.createLockConstraint(this.sprite, vu1, [0, 80], 0);
    var text_0 = this.game.add.text(20, 20, 'move with arrow keys', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  LockConstraint.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.sprite.body.moveLeft(100);
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.moveRight(100);
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.moveUp(100);
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.moveDown(100);
    }
  };
  LockConstraint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LockConstraint',
    baseClasses: []
  };
  function MouseSpring() {
    Phaser.State.call(this);
    this.drawLine = false;
  }
  MouseSpring.prototype.preload = function () {
    this.game.load.image('gummi', 'wip/gummi.png');
    this.game.load.image('cow', 'wip/cow48.png');
    this.game.load.image('cursor', 'assets/sprites/enemy-bullet.png');
  };
  MouseSpring.prototype.create = function () {
    this.game.stage.backgroundColor = '#304871';
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.gravity.y = 100;
    this.game.physics.p2.restitution = 0.8;
    this.cow = this.game.add.sprite(200, 200, 'cow');
    this.game.physics.p2.enable(this.cow, true);
    this.cow.body.setCircle(20);
    this.mouseBody = this.game.add.sprite(100, 100, 'cursor');
    this.game.physics.p2.enable(this.mouseBody, true);
    this.mouseBody.body.static = true;
    this.mouseBody.body.setCircle(10);
    this.mouseBody.body.data.shapes[0].sensor = true;
    this.line = new Phaser.Line(this.cow.x, this.cow.y, this.mouseBody.x, this.mouseBody.y);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'click_pal8wq$'), this);
    this.game.input.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'release'), this);
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'move_rxq7re$'), this);
  };
  MouseSpring.prototype.click_pal8wq$ = function (pointer) {
    var bodies = this.game.physics.p2.hitTest(pointer.position, [this.cow.body]);
    if (!(bodies.length === 0)) {
      this.mouseSpring = this.game.physics.p2.createSpring(this.mouseBody, bodies[0], 0, 30, 1);
      this.line.setTo(this.cow.x, this.cow.y, this.mouseBody.x, this.mouseBody.y);
      this.drawLine = true;
    }
  };
  MouseSpring.prototype.release = function () {
    this.game.physics.p2.removeSpring(this.mouseSpring);
    this.drawLine = false;
  };
  MouseSpring.prototype.move_rxq7re$ = function (pointer, x, y) {
    this.mouseBody.body.x = x;
    this.mouseBody.body.y = y;
    this.line.setTo(this.cow.x, this.cow.y, this.mouseBody.x, this.mouseBody.y);
  };
  MouseSpring.prototype.preRender = function () {
    if (this.line != null) {
      this.line.setTo(this.cow.x, this.cow.y, this.mouseBody.x, this.mouseBody.y);
    }
  };
  MouseSpring.prototype.render = function () {
    if (this.drawLine != null) {
      this.game.debug.geom(this.line);
    }
  };
  MouseSpring.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MouseSpring',
    baseClasses: []
  };
  function MovementConstraint() {
    Phaser.State.call(this);
  }
  MovementConstraint.prototype.preload = function () {
    this.game.load.image('ball', 'assets/sprites/blue_ball.png');
    this.game.load.image('background', 'assets/games/starstruck/background2.png');
    this.game.load.spritesheet('dude', 'assets/games/starstruck/dude.png', 32, 48);
  };
  MovementConstraint.prototype.create = function () {
    var bg = this.game.add.tileSprite(0, 0, 800, 600, 'background');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.gravity.y = 200;
    this.player = this.game.add.sprite(200, 400, 'dude');
    this.player.animations.add('left', [0, 1, 2, 3], 10, true);
    this.player.animations.add('turn', [4], 20, true);
    this.player.animations.add('right', [5, 6, 7, 8], 10, true);
    this.game.physics.p2.enable(this.player);
    this.player.body.fixedRotation = true;
    this.sprite2 = this.game.add.sprite(400, 400, 'ball');
    this.game.physics.p2.enable(this.sprite2);
    this.sprite2.body.fixedRotation = true;
    var constraint = this.game.physics.p2.createLockConstraint(this.sprite2, this.player, [0, 50], 80);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  MovementConstraint.prototype.update = function () {
    this.sprite2.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.sprite2.body.moveLeft(400);
    }
     else if (this.cursors.right.isDown) {
      this.sprite2.body.moveRight(400);
    }
    if (this.cursors.up.isDown) {
      this.sprite2.body.moveUp(400);
    }
     else if (this.cursors.down.isDown) {
      this.sprite2.body.moveDown(400);
    }
  };
  MovementConstraint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MovementConstraint',
    baseClasses: []
  };
  function PhysicsGroup() {
    Phaser.State.call(this);
  }
  PhysicsGroup.prototype.preload = function () {
    this.game.load.image('ball', 'assets/sprites/pangball.png');
  };
  PhysicsGroup.prototype.create = function () {
    var tmp$;
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.stage.backgroundColor = '#124184';
    this.game.physics.p2.gravity.y = 100;
    this.game.physics.p2.restitution = 1.0;
    var group = this.game.add.physicsGroup(Phaser.Physics.P2JS);
    tmp$ = 32 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var ball = group.create(this.game.world.randomX, this.game.rnd.between(0, 100), 'ball');
      ball.body.setCircle(16);
      ball.body.fixedRotation = true;
    }
  };
  PhysicsGroup.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PhysicsGroup',
    baseClasses: []
  };
  function PickUpObject() {
    Phaser.State.call(this);
  }
  PickUpObject.prototype.preload = function () {
    this.game.load.image('tetrisblock1', 'assets/sprites/tetrisblock1.png');
    this.game.load.image('tetrisblock2', 'assets/sprites/tetrisblock2.png');
    this.game.load.image('tetrisblock3', 'assets/sprites/tetrisblock3.png');
    this.game.load.physics('physicsData', 'assets/physics/sprites.json');
  };
  PickUpObject.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.gravity.y = 1000;
    this.tetris1 = this.game.add.sprite(300, 100, 'tetrisblock1');
    this.tetris2 = this.game.add.sprite(375, 200, 'tetrisblock2');
    this.tetris3 = this.game.add.sprite(450, 300, 'tetrisblock3');
    var blockCollisionGroup = this.game.physics.p2.createCollisionGroup();
    this.game.physics.p2.updateBoundsCollisionGroup();
    this.game.physics.p2.enable([this.tetris1, this.tetris2, this.tetris3], false);
    this.tetris1.body.clearShapes();
    this.tetris1.body.loadPolygon('physicsData', 'tetrisblock1');
    this.tetris1.body.setCollisionGroup(blockCollisionGroup);
    this.tetris1.body.collides([blockCollisionGroup]);
    this.tetris2.body.clearShapes();
    this.tetris2.body.loadPolygon('physicsData', 'tetrisblock2');
    this.tetris2.body.setCollisionGroup(blockCollisionGroup);
    this.tetris2.body.collides([blockCollisionGroup]);
    this.tetris3.body.clearShapes();
    this.tetris3.body.loadPolygon('physicsData', 'tetrisblock3');
    this.tetris3.body.setCollisionGroup(blockCollisionGroup);
    this.tetris3.body.collides([blockCollisionGroup]);
    this.mouseBody = new p2.Body();
    this.game.physics.p2.world.addBody(this.mouseBody);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'click_pal8wq$'), this);
    this.game.input.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'release'), this);
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'move_pal8wq$'), this);
  };
  PickUpObject.prototype.click_pal8wq$ = function (pointer) {
    var bodies = this.game.physics.p2.hitTest(pointer.position, [this.tetris1.body, this.tetris2.body, this.tetris3.body]);
    var physicsPos = [this.game.physics.p2.pxmi(pointer.position.x), this.game.physics.p2.pxmi(pointer.position.y)];
    if (!(bodies.length === 0)) {
      var clickedBody = bodies[0];
      var localPointInBody = [0.0, 0.0];
      clickedBody.toLocalFrame(localPointInBody, physicsPos);
      this.mouseConstraint = this.game.physics.p2.createRevoluteConstraint(this.mouseBody, [0, 0], clickedBody, [this.game.physics.p2.mpxi(localPointInBody[0]), this.game.physics.p2.mpxi(localPointInBody[1])]);
    }
  };
  PickUpObject.prototype.release = function () {
    this.game.physics.p2.removeConstraint(this.mouseConstraint);
  };
  PickUpObject.prototype.move_pal8wq$ = function (pointer) {
    this.mouseBody.position[0] = this.game.physics.p2.pxmi(pointer.position.x);
    this.mouseBody.position[1] = this.game.physics.p2.pxmi(pointer.position.y);
  };
  PickUpObject.prototype.update = function () {
  };
  PickUpObject.prototype.render = function () {
  };
  PickUpObject.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PickUpObject',
    baseClasses: []
  };
  function PlatformerMaterial() {
    Phaser.State.call(this);
    this.facing = 'left';
    this.jumpTimer = 0.0;
    this.yAxis = p2.vec2.fromValues(0, 1);
  }
  PlatformerMaterial.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/block.png');
    this.game.load.image('background', 'assets/games/starstruck/background2.png');
    this.game.load.spritesheet('dude', 'assets/games/starstruck/dude.png', 32, 48);
  };
  PlatformerMaterial.prototype.create = function () {
    var tmp$;
    var bg = this.game.add.tileSprite(0, 0, 800, 600, 'background');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.gravity.y = 350;
    this.game.physics.p2.world.defaultContactMaterial.friction = 0.3;
    this.game.physics.p2.world.setGlobalStiffness(100000.0);
    this.player = this.game.add.sprite(200, 200, 'dude');
    this.player.animations.add('left', [0, 1, 2, 3], 10, true);
    this.player.animations.add('turn', [4], 20, true);
    this.player.animations.add('right', [5, 6, 7, 8], 10, true);
    this.game.physics.p2.enable(this.player);
    this.player.body.fixedRotation = true;
    this.player.body.damping = 0.5;
    var spriteMaterial = this.game.physics.p2.createMaterial('spriteMaterial', this.player.body);
    var worldMaterial = this.game.physics.p2.createMaterial('worldMaterial');
    var boxMaterial = this.game.physics.p2.createMaterial('worldMaterial');
    this.game.physics.p2.setWorldMaterial(worldMaterial, true, true, true, true);
    tmp$ = 4 - 1;
    for (var i = 1; i <= tmp$; i++) {
      var box = this.game.add.sprite(300, 645 - 95 * i, 'atari');
      this.game.physics.p2.enable(box);
      box.body.mass = 6;
      box.body.setMaterial(boxMaterial);
    }
    var groundPlayerCM = this.game.physics.p2.createContactMaterial(spriteMaterial, worldMaterial, ContactMaterialOptions(0.0));
    var groundBoxesCM = this.game.physics.p2.createContactMaterial(worldMaterial, boxMaterial, ContactMaterialOptions(0.6));
    var text_0 = this.game.add.text(20, 20, 'move with arrow, space to jump', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.jumpButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
  };
  PlatformerMaterial.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.player.body.moveLeft(200);
      if (!Kotlin.equals(this.facing, 'left')) {
        this.player.animations.play('left');
        this.facing = 'left';
      }
    }
     else if (this.cursors.right.isDown) {
      this.player.body.moveRight(200);
      if (!Kotlin.equals(this.facing, 'right')) {
        this.player.animations.play('right');
        this.facing = 'right';
      }
    }
     else {
      this.player.body.velocity.x = 0;
      if (!Kotlin.equals(this.facing, 'idle')) {
        this.player.animations.stop();
        if (Kotlin.equals(this.facing, 'left')) {
          this.player.frame = 0;
        }
         else {
          this.player.frame = 5;
        }
        this.facing = 'idle';
      }
    }
    if (this.jumpButton.isDown && this.game.time.now > this.jumpTimer && this.checkIfCanJump()) {
      this.player.body.moveUp(300);
      this.jumpTimer = this.game.time.now + 750;
    }
  };
  PlatformerMaterial.prototype.checkIfCanJump = function () {
    var result = false;
    var mm = this.game.physics.p2.world.narrowphase.contactEquations.length - 1;
    for (var i = 0; i <= mm; i++) {
      var c = this.game.physics.p2.world.narrowphase.contactEquations[i];
      if (c.bodyA === this.player.body.data || c.bodyB === this.player.body.data) {
        var d = p2.vec2.dot(c.normalA, this.yAxis);
        if (c.bodyA === this.player.body.data) {
          d *= -1;
        }
        if (d > 0.5) {
          result = true;
        }
      }
    }
    return result;
  };
  PlatformerMaterial.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PlatformerMaterial',
    baseClasses: []
  };
  function PostbroadphaseCallback() {
    Phaser.State.call(this);
  }
  PostbroadphaseCallback.prototype.preload = function () {
    this.game.load.image('stars', 'assets/misc/starfield.jpg');
    this.game.load.spritesheet('ship', 'assets/sprites/humstar.png', 32, 32);
    this.game.load.spritesheet('veggies', 'assets/sprites/fruitnveg64wh37.png', 64, 64);
  };
  PostbroadphaseCallback.prototype.create = function () {
    var tmp$;
    this.game.world.setBounds(0, 0, 1600, 1200);
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.restitution = 0.9;
    this.starfield = this.game.add.tileSprite(0, 0, 800, 600, 'stars');
    this.starfield.fixedToCamera = true;
    var veggies = this.game.add.group();
    veggies.enableBody = true;
    veggies.physicsBodyType = Phaser.Physics.P2JS;
    var vegFrames = [1, 3, 4, 8];
    tmp$ = 25 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var veg = veggies.create(this.game.world.randomX, this.game.world.randomY, 'veggies', this.game.rnd.pick(vegFrames));
      veg.body.setCircle(26);
    }
    this.ship = this.game.add.sprite(200, 200, 'ship');
    this.ship.name = 'ship';
    this.ship.scale.set(2);
    this.ship.smoothed = false;
    this.ship.animations.add('fly', [0, 1, 2, 3, 4, 5], 10, true);
    this.ship.play('fly');
    this.game.physics.p2.enable(this.ship, false);
    this.ship.body.setCircle(28);
    this.ship.body.fixedRotation = true;
    this.game.camera.follow(this.ship);
    this.game.physics.p2.setPostBroadphaseCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'checkVeg_2adkgk$'), this);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  PostbroadphaseCallback.prototype.checkVeg_2adkgk$ = function (body1, body2) {
    if (body1.sprite.name === 'ship' && body2.sprite.frame === 4 || (body2.sprite.name === 'ship' && body1.sprite.frame === 4)) {
      return false;
    }
    return true;
  };
  PostbroadphaseCallback.prototype.update = function () {
    var tmp$, tmp$_0;
    this.ship.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.ship.body.moveLeft(200);
    }
     else if (this.cursors.right.isDown) {
      this.ship.body.moveRight(200);
    }
    if (this.cursors.up.isDown) {
      this.ship.body.moveUp(200);
    }
     else if (this.cursors.down.isDown) {
      this.ship.body.moveDown(200);
    }
    if (!this.game.camera.atLimit.x) {
      this.starfield.tilePosition.x = this.starfield.tilePosition.x - (typeof (tmp$ = this.ship.body.velocity.x) === 'number' ? tmp$ : Kotlin.throwCCE()) * this.game.time.physicsElapsed;
    }
    if (!this.game.camera.atLimit.y) {
      this.starfield.tilePosition.y = this.starfield.tilePosition.y - (typeof (tmp$_0 = this.ship.body.velocity.y) === 'number' ? tmp$_0 : Kotlin.throwCCE()) * this.game.time.physicsElapsed;
    }
  };
  PostbroadphaseCallback.prototype.render = function () {
    this.game.debug.text('World bodies: ' + this.game.physics.p2.total, 32, 32);
  };
  PostbroadphaseCallback.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PostbroadphaseCallback',
    baseClasses: []
  };
  function PrismaticConstraint() {
    Phaser.State.call(this);
  }
  PrismaticConstraint.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari800xl.png');
    this.game.load.image('lift', 'assets/sprites/flectrum.png');
    this.game.load.image('sky', 'assets/skies/cavern2.png');
  };
  PrismaticConstraint.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.sprite = this.game.add.sprite(200, 400, 'atari');
    this.vu1 = this.game.add.sprite(400, 400, 'lift');
    this.game.physics.p2.enable([this.sprite, this.vu1]);
    this.sprite.body.fixedRotation = true;
    this.vu1.body.fixedRotation = true;
    var constraint = this.game.physics.p2.createPrismaticConstraint(this.sprite, this.vu1, false, [150, 0], [-15, 0], new Float32Array([0.0, 1.0]));
    var text_0 = this.game.add.text(20, 20, 'move with arrow keys', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  PrismaticConstraint.prototype.update = function () {
    this.sprite.body.setZeroVelocity();
    this.vu1.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.sprite.body.moveLeft(200);
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.moveRight(200);
    }
    if (this.cursors.up.isDown) {
      this.vu1.body.moveUp(200);
    }
     else if (this.cursors.down.isDown) {
      this.vu1.body.moveDown(200);
    }
  };
  PrismaticConstraint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PrismaticConstraint',
    baseClasses: []
  };
  function RemoveSpring() {
    Phaser.State.call(this);
  }
  RemoveSpring.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('ball', 'assets/sprites/red_ball.png');
    this.game.load.image('sky', 'assets/skies/cavern2.png');
  };
  RemoveSpring.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.sprite1 = this.game.add.sprite(400, 300, 'ball');
    this.sprite2 = this.game.add.sprite(400, 400, 'atari');
    this.game.physics.p2.enable([this.sprite1, this.sprite2]);
    this.sprite1.body.collideWorldBounds = true;
    this.sprite2.body.collideWorldBounds = true;
    this.spring = this.game.physics.p2.createSpring(this.sprite1, this.sprite2, 20, 10, 1);
    var text_0 = this.game.add.text(20, 20, 'move with arrow keys, click to remove spring', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'removeSpring'), this);
  };
  RemoveSpring.prototype.removeSpring = function () {
    this.game.physics.p2.removeSpring(this.spring);
  };
  RemoveSpring.prototype.update = function () {
    this.sprite2.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.sprite2.body.moveLeft(400);
    }
     else if (this.cursors.right.isDown) {
      this.sprite2.body.moveRight(400);
    }
  };
  RemoveSpring.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RemoveSpring',
    baseClasses: []
  };
  function RevoluteConstraintExample() {
    Phaser.State.call(this);
  }
  RevoluteConstraintExample.prototype.preload = function () {
    this.game.load.image('vu', 'assets/sprites/vu.png');
    this.game.load.image('ball', 'assets/sprites/arrow.png');
    this.game.load.image('sky', 'assets/skies/cavern2.png');
  };
  RevoluteConstraintExample.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.sprite = this.game.add.sprite(400, 300, 'ball');
    var vu1 = this.game.add.sprite(400, 300, 'vu');
    this.game.physics.p2.enable([this.sprite, vu1]);
    this.sprite.body.clearCollision(true, true);
    vu1.body.clearCollision(true, true);
    var constraint = this.game.physics.p2.createRevoluteConstraint(this.sprite, [50, 100], vu1, [0.0, 0.0]);
    var text_0 = this.game.add.text(20, 20, 'rotate with arrow keys', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  RevoluteConstraintExample.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.sprite.body.rotateLeft(50);
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.rotateRight(50);
    }
  };
  RevoluteConstraintExample.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RevoluteConstraintExample',
    baseClasses: []
  };
  function Springs() {
    Phaser.State.call(this);
  }
  Springs.prototype.preload = function () {
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('ball', 'assets/sprites/red_ball.png');
    this.game.load.image('sky', 'assets/skies/cavern2.png');
  };
  Springs.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.sprite1 = this.game.add.sprite(400, 300, 'ball');
    this.sprite2 = this.game.add.sprite(400, 400, 'atari');
    this.game.physics.p2.enable([this.sprite1, this.sprite2]);
    this.sprite1.body.collideWorldBounds = true;
    this.sprite2.body.collideWorldBounds = true;
    var spring = this.game.physics.p2.createSpring(this.sprite1, this.sprite2, 20, 10, 1);
    var text_0 = this.game.add.text(20, 20, 'move with arrow keys', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  Springs.prototype.update = function () {
    this.sprite2.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.sprite2.body.moveLeft(400);
    }
     else if (this.cursors.right.isDown) {
      this.sprite2.body.moveRight(400);
    }
  };
  Springs.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Springs',
    baseClasses: []
  };
  function StaticBody() {
    Phaser.State.call(this);
  }
  StaticBody.prototype.preload = function () {
    this.game.load.image('wizball', 'assets/sprites/wizball.png');
    this.game.load.image('atari', 'assets/sprites/atari130xe.png');
    this.game.load.image('sky', 'assets/skies/sunset.png');
  };
  StaticBody.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.restitution = 0.8;
    this.sprite = this.game.add.sprite(400, 300, 'wizball');
    this.game.physics.p2.enable(this.sprite);
    this.sprite.body.setCircle(44);
    this.static1 = this.game.add.sprite(200, 200, 'atari');
    this.static2 = this.game.add.sprite(500, 500, 'atari');
    this.game.physics.p2.enable([this.static1, this.static2]);
    this.static1.body.static = true;
    this.static2.body.static = true;
    var text_0 = this.game.add.text(20, 20, 'move with arrow keys', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  StaticBody.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.sprite.body.rotateLeft(80);
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.rotateRight(80);
    }
     else {
      this.sprite.body.setZeroRotation();
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.thrust(400);
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.reverse(400);
    }
  };
  StaticBody.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'StaticBody',
    baseClasses: []
  };
  function Thrust() {
    Phaser.State.call(this);
  }
  Thrust.prototype.preload = function () {
    this.game.load.image('stars', 'assets/misc/starfield.jpg');
    this.game.load.image('ship', 'assets/sprites/thrust_ship2.png');
  };
  Thrust.prototype.create = function () {
    this.game.world.setBounds(0, 0, 1920, 1200);
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.restitution = 0.8;
    this.starfield = this.game.add.tileSprite(0, 0, 800, 600, 'stars');
    this.starfield.fixedToCamera = true;
    this.ship = this.game.add.sprite(200, 200, 'ship');
    this.game.physics.p2.enable(this.ship);
    this.game.camera.follow(this.ship);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  Thrust.prototype.update = function () {
    var tmp$, tmp$_0;
    if (this.cursors.left.isDown) {
      this.ship.body.rotateLeft(100);
    }
     else if (this.cursors.right.isDown) {
      this.ship.body.rotateRight(100);
    }
     else {
      this.ship.body.setZeroRotation();
    }
    if (this.cursors.up.isDown) {
      this.ship.body.thrust(400);
    }
     else if (this.cursors.down.isDown) {
      this.ship.body.reverse(400);
    }
    if (!this.game.camera.atLimit.x) {
      this.starfield.tilePosition.x = this.starfield.tilePosition.x - (typeof (tmp$ = this.ship.body.velocity.x) === 'number' ? tmp$ : Kotlin.throwCCE()) * this.game.time.physicsElapsed;
    }
    if (!this.game.camera.atLimit.y) {
      this.starfield.tilePosition.y = this.starfield.tilePosition.y - (typeof (tmp$_0 = this.ship.body.velocity.y) === 'number' ? tmp$_0 : Kotlin.throwCCE()) * this.game.time.physicsElapsed;
    }
  };
  Thrust.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Thrust',
    baseClasses: []
  };
  function ThrustLeftRight() {
    Phaser.State.call(this);
  }
  ThrustLeftRight.prototype.preload = function () {
    this.game.load.image('stars', 'assets/misc/starfield.jpg');
    this.game.load.image('ship', 'assets/sprites/thrust_ship2.png');
  };
  ThrustLeftRight.prototype.create = function () {
    this.game.world.setBounds(0, 0, 1920, 1200);
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.restitution = 0.8;
    this.starfield = this.game.add.tileSprite(0, 0, 800, 600, 'stars');
    this.starfield.fixedToCamera = true;
    this.ship = this.game.add.sprite(200, 200, 'ship');
    this.game.physics.p2.enable(this.ship);
    this.game.camera.follow(this.ship);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  ThrustLeftRight.prototype.update = function () {
    var tmp$, tmp$_0;
    if (this.cursors.left.isDown) {
      this.ship.body.thrustLeft(100);
    }
     else if (this.cursors.right.isDown) {
      this.ship.body.thrustRight(100);
    }
    if (this.cursors.up.isDown) {
      this.ship.body.thrust(400);
    }
     else if (this.cursors.down.isDown) {
      this.ship.body.reverse(400);
    }
    if (!this.game.camera.atLimit.x) {
      this.starfield.tilePosition.x = this.starfield.tilePosition.x - (typeof (tmp$ = this.ship.body.velocity.x) === 'number' ? tmp$ : Kotlin.throwCCE()) * this.game.time.physicsElapsed;
    }
    if (!this.game.camera.atLimit.y) {
      this.starfield.tilePosition.y = this.starfield.tilePosition.y - (typeof (tmp$_0 = this.ship.body.velocity.y) === 'number' ? tmp$_0 : Kotlin.throwCCE()) * this.game.time.physicsElapsed;
    }
  };
  ThrustLeftRight.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ThrustLeftRight',
    baseClasses: []
  };
  function TilemapExample() {
    Phaser.State.call(this);
  }
  TilemapExample.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/maps/collision_test.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('ground_1x1', 'assets/tilemaps/tiles/ground_1x1.png');
    this.game.load.image('walls_1x2', 'assets/tilemaps/tiles/walls_1x2.png');
    this.game.load.image('tiles2', 'assets/tilemaps/tiles/tiles2.png');
    this.game.load.image('ship', 'assets/sprites/thrust_ship2.png');
  };
  TilemapExample.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.stage.backgroundColor = '#2d2d2d';
    this.map = this.game.add.tilemap('map');
    this.map.addTilesetImage('ground_1x1');
    this.map.addTilesetImage('walls_1x2');
    this.map.addTilesetImage('tiles2');
    this.layer = this.map.createLayer('Tile Layer 1');
    this.layer.resizeWorld();
    this.map.setCollisionBetween(1, 12);
    this.game.physics.p2.convertTilemap(this.map, this.layer);
    this.ship = this.game.add.sprite(200, 200, 'ship');
    this.game.physics.p2.enable(this.ship);
    this.game.camera.follow(this.ship);
    this.game.physics.p2.setBoundsToWorld(true, true, true, true, false);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  TilemapExample.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.ship.body.rotateLeft(100);
    }
     else if (this.cursors.right.isDown) {
      this.ship.body.rotateRight(100);
    }
     else {
      this.ship.body.setZeroRotation();
    }
    if (this.cursors.up.isDown) {
      this.ship.body.thrust(400);
    }
     else if (this.cursors.down.isDown) {
      this.ship.body.reverse(400);
    }
  };
  TilemapExample.prototype.render = function () {
  };
  TilemapExample.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TilemapExample',
    baseClasses: []
  };
  function TilemapGravity() {
    Phaser.State.call(this);
    this.facing = 'left';
    this.jumpTimer = 0.0;
  }
  TilemapGravity.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/maps/collision_test.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('ground_1x1', 'assets/tilemaps/tiles/ground_1x1.png');
    this.game.load.image('walls_1x2', 'assets/tilemaps/tiles/walls_1x2.png');
    this.game.load.image('tiles2', 'assets/tilemaps/tiles/tiles2.png');
    this.game.load.spritesheet('dude', 'assets/games/starstruck/dude.png', 32, 48);
  };
  TilemapGravity.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.stage.backgroundColor = '#2d2d2d';
    this.map = this.game.add.tilemap('map');
    this.map.addTilesetImage('ground_1x1');
    this.map.addTilesetImage('walls_1x2');
    this.map.addTilesetImage('tiles2');
    this.layer = this.map.createLayer('Tile Layer 1');
    this.layer.resizeWorld();
    this.map.setCollisionBetween(1, 12);
    this.game.physics.p2.convertTilemap(this.map, this.layer);
    this.game.physics.p2.restitution = 0.5;
    this.game.physics.p2.gravity.y = 300;
    this.player = this.game.add.sprite(100, 200, 'dude');
    this.player.animations.add('left', [0, 1, 2, 3], 10, true);
    this.player.animations.add('turn', [4], 20, true);
    this.player.animations.add('right', [5, 6, 7, 8], 10, true);
    this.game.physics.p2.enable(this.player);
    this.player.body.fixedRotation = true;
    this.game.camera.follow(this.player);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.jumpButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
  };
  TilemapGravity.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.player.body.moveLeft(200);
      if (!Kotlin.equals(this.facing, 'left')) {
        this.player.animations.play('left');
        this.facing = 'left';
      }
    }
     else if (this.cursors.right.isDown) {
      this.player.body.moveRight(200);
      if (!Kotlin.equals(this.facing, 'right')) {
        this.player.animations.play('right');
        this.facing = 'right';
      }
    }
     else {
      this.player.body.velocity.x = 0;
      if (!Kotlin.equals(this.facing, 'idle')) {
        this.player.animations.stop();
        if (Kotlin.equals(this.facing, 'left')) {
          this.player.frame = 0;
        }
         else {
          this.player.frame = 5;
        }
        this.facing = 'idle';
      }
    }
    if (this.jumpButton.isDown && this.game.time.now > this.jumpTimer && this.checkIfCanJump()) {
      this.player.body.moveUp(300);
      this.jumpTimer = this.game.time.now + 750;
    }
  };
  TilemapGravity.prototype.checkIfCanJump = function () {
    var tmp$;
    var yAxis = p2.vec2.fromValues(0, 1);
    var result = false;
    tmp$ = this.game.physics.p2.world.narrowphase.contactEquations.length - 1;
    for (var i = 0; i <= tmp$; i++) {
      var c = this.game.physics.p2.world.narrowphase.contactEquations[i];
      if (c.bodyA === this.player.body.data || c.bodyB === this.player.body.data) {
        var d = p2.vec2.dot(c.normalA, yAxis);
        if (c.bodyA === this.player.body.data)
          d *= -1;
        if (d > 0.5)
          result = true;
      }
    }
    return result;
  };
  TilemapGravity.prototype.render = function () {
  };
  TilemapGravity.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TilemapGravity',
    baseClasses: []
  };
  function TilespriteExample() {
    Phaser.State.call(this);
  }
  TilespriteExample.prototype.preload = function () {
    this.game.load.image('sky', 'assets/skies/sky4.png');
    this.game.load.image('starfield', 'assets/misc/starfield.jpg');
    this.game.load.spritesheet('veggies', 'assets/sprites/fruitnveg64wh37.png', 64, 64);
  };
  TilespriteExample.prototype.create = function () {
    var tmp$;
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.restitution = 0.8;
    this.sprite = this.game.add.tileSprite(300, 450, 200, 50, 'starfield');
    this.game.physics.p2.enable(this.sprite);
    var veggies = this.game.add.group();
    veggies.enableBody = true;
    veggies.physicsBodyType = Phaser.Physics.P2JS;
    var vegFrames = [1, 3, 4, 8];
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var veg = veggies.create(this.game.world.randomX, this.game.world.randomY, 'veggies', this.game.rnd.pick(vegFrames));
      veg.body.setCircle(26);
    }
    var text_0 = this.game.add.text(20, 20, 'move with arrow keys', TextStyle(void 0, void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  TilespriteExample.prototype.update = function () {
    this.sprite.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.sprite.body.moveLeft(400);
      this.sprite.tilePosition.x = this.sprite.tilePosition.x - 8;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.moveRight(400);
      this.sprite.tilePosition.x = this.sprite.tilePosition.x + 8;
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.moveUp(400);
      this.sprite.tilePosition.y = this.sprite.tilePosition.y - 8;
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.moveDown(400);
      this.sprite.tilePosition.y = this.sprite.tilePosition.y + 8;
    }
  };
  TilespriteExample.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TilespriteExample',
    baseClasses: []
  };
  function WorldBoundary() {
    Phaser.State.call(this);
  }
  WorldBoundary.prototype.preload = function () {
    this.game.load.image('stars', 'assets/misc/starfield.jpg');
    this.game.load.spritesheet('ship', 'assets/sprites/humstar.png', 32, 32);
  };
  WorldBoundary.prototype.create = function () {
    this.game.world.setBounds(0, 0, 1600, 1200);
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.starfield = this.game.add.tileSprite(0, 0, 800, 600, 'stars');
    this.starfield.fixedToCamera = true;
    this.ship = this.game.add.sprite(200, 200, 'ship');
    this.ship.scale.set(2);
    this.ship.smoothed = false;
    this.ship.animations.add('fly', [0, 1, 2, 3, 4, 5], 10, true);
    this.ship.play('fly');
    this.game.physics.p2.enable(this.ship, true);
    this.game.camera.follow(this.ship);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  WorldBoundary.prototype.update = function () {
    var tmp$, tmp$_0;
    this.ship.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.ship.body.moveLeft(200);
    }
     else if (this.cursors.right.isDown) {
      this.ship.body.moveRight(200);
    }
    if (this.cursors.up.isDown) {
      this.ship.body.moveUp(200);
    }
     else if (this.cursors.down.isDown) {
      this.ship.body.moveDown(200);
    }
    if (!this.game.camera.atLimit.x) {
      this.starfield.tilePosition.x = this.starfield.tilePosition.x - (typeof (tmp$ = this.ship.body.velocity.x) === 'number' ? tmp$ : Kotlin.throwCCE()) * this.game.time.physicsElapsed;
    }
    if (!this.game.camera.atLimit.y) {
      this.starfield.tilePosition.y = this.starfield.tilePosition.y - (typeof (tmp$_0 = this.ship.body.velocity.y) === 'number' ? tmp$_0 : Kotlin.throwCCE()) * this.game.time.physicsElapsed;
    }
  };
  WorldBoundary.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'WorldBoundary',
    baseClasses: []
  };
  function WorldMove() {
    Phaser.State.call(this);
  }
  WorldMove.prototype.preload = function () {
    this.game.load.image('stars', 'assets/misc/starfield.jpg');
    this.game.load.spritesheet('ship', 'assets/sprites/humstar.png', 32, 32);
    this.game.load.image('ball', 'assets/sprites/shinyball.png');
  };
  WorldMove.prototype.create = function () {
    var tmp$;
    this.game.world.setBounds(0, 0, 1600, 1200);
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.game.physics.p2.restitution = 0.9;
    this.starfield = this.game.add.tileSprite(0, 0, 800, 600, 'stars');
    this.starfield.fixedToCamera = true;
    var balls = this.game.add.group();
    balls.enableBody = true;
    balls.physicsBodyType = Phaser.Physics.P2JS;
    tmp$ = 50 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var ball = balls.create(this.game.world.randomX, this.game.world.randomY, 'ball');
      ball.body.setCircle(16);
    }
    this.ship = this.game.add.sprite(200, 200, 'ship');
    this.ship.scale.set(2);
    this.ship.smoothed = false;
    this.ship.animations.add('fly', [0, 1, 2, 3, 4, 5], 10, true);
    this.ship.play('fly');
    this.game.physics.p2.enable(this.ship, false);
    this.ship.body.setCircle(28);
    this.game.camera.follow(this.ship);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  WorldMove.prototype.update = function () {
    var tmp$, tmp$_0;
    this.ship.body.setZeroVelocity();
    if (this.cursors.left.isDown) {
      this.ship.body.moveLeft(200);
    }
     else if (this.cursors.right.isDown) {
      this.ship.body.moveRight(200);
    }
    if (this.cursors.up.isDown) {
      this.ship.body.moveUp(200);
    }
     else if (this.cursors.down.isDown) {
      this.ship.body.moveDown(200);
    }
    if (!this.game.camera.atLimit.x) {
      this.starfield.tilePosition.x = this.starfield.tilePosition.x - (typeof (tmp$ = this.ship.body.velocity.x) === 'number' ? tmp$ : Kotlin.throwCCE()) * this.game.time.physicsElapsed;
    }
    if (!this.game.camera.atLimit.y) {
      this.starfield.tilePosition.y = this.starfield.tilePosition.y - (typeof (tmp$_0 = this.ship.body.velocity.y) === 'number' ? tmp$_0 : Kotlin.throwCCE()) * this.game.time.physicsElapsed;
    }
  };
  WorldMove.prototype.render = function () {
  };
  WorldMove.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'WorldMove',
    baseClasses: []
  };
  function AutoScale() {
    Phaser.State.call(this);
  }
  AutoScale.prototype.preload = function () {
    this.game.load.image('bubble', 'assets/particles/bubble.png');
    this.game.load.image('water', 'assets/skies/underwater2.png');
  };
  function AutoScale$create$ObjectLiteral() {
    this.emitX = 800;
  }
  AutoScale$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  AutoScale.prototype.create = function () {
    this.game.add.image(0, 0, 'water');
    this.emitter = this.game.add.emitter(this.game.world.centerX, 400, 400);
    this.emitter.makeParticles('bubble');
    this.emitter.setRotation(0, 0);
    this.emitter.setAlpha(0.1, 1, 3000);
    this.emitter.setScale(0.1, 1, 0.1, 1, 6000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Quintic, 'Out'));
    this.emitter.gravity = -200;
    this.emitter.start(false, 5000, 10);
    this.emitter.emitX = 0;
    this.game.add.tween(this.emitter).to(new AutoScale$create$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true, 0, IntCompanionObject.MAX_VALUE, true);
  };
  AutoScale.prototype.update = function () {
    this.emitter.customSort(Kotlin.getBoundCallableRefForMemberFunction(this, 'scaleSort_zemaj2$'), this);
  };
  AutoScale.prototype.scaleSort_zemaj2$ = function (a, b) {
    if (a.scale.x < b.scale.x) {
      return -1;
    }
     else if (a.scale.x > b.scale.x) {
      return 1;
    }
     else {
      return 0;
    }
  };
  AutoScale.prototype.render = function () {
  };
  AutoScale.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AutoScale',
    baseClasses: []
  };
  function ClickBurst() {
    Phaser.State.call(this);
  }
  ClickBurst.prototype.preload = function () {
    this.game.load.image('diamond', 'assets/sprites/diamond.png');
  };
  ClickBurst.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = 3372953;
    this.emitter = this.game.add.emitter(0, 0, 100);
    this.emitter.makeParticles('diamond');
    this.emitter.gravity = 200;
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'particleBurst_pal8wq$'), this);
  };
  ClickBurst.prototype.particleBurst_pal8wq$ = function (pointer) {
    this.emitter.x = pointer.x;
    this.emitter.y = pointer.y;
    this.emitter.start(true, 2000, null, 10);
  };
  ClickBurst.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ClickBurst',
    baseClasses: []
  };
  function Collision() {
    Phaser.State.call(this);
  }
  Collision.prototype.preload = function () {
    this.game.load.image('sky', 'assets/skies/sky4.png');
    this.game.load.spritesheet('veggies', 'assets/sprites/fruitnveg32wh37.png', 32, 32);
  };
  Collision.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.emitter = this.game.add.emitter(this.game.world.centerX, this.game.world.centerY, 250);
    this.emitter.makeParticles('veggies', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 200, true, true);
    this.emitter.minParticleSpeed.setTo(-200, -300);
    this.emitter.maxParticleSpeed.setTo(200, -400);
    this.emitter.gravity = 150;
    this.emitter.bounce.setTo(0.5, 0.5);
    this.emitter.angularDrag = 30;
    this.emitter.start(false, 8000, 400);
  };
  Collision.prototype.update = function () {
    this.game.physics.arcade.collide(this.emitter);
  };
  Collision.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Collision',
    baseClasses: []
  };
  function DestroyEmitter() {
    Phaser.State.call(this);
  }
  DestroyEmitter.prototype.preload = function () {
    this.game.load.image('diamond', 'assets/sprites/diamond.png');
  };
  DestroyEmitter.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = 3372953;
    this.emitter = this.game.add.emitter(0, 0, 100);
    this.emitter.makeParticles('diamond');
    this.emitter.gravity = 200;
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'particleBurst_pal8wq$'), this);
  };
  DestroyEmitter.prototype.particleBurst_pal8wq$ = function (pointer) {
    this.emitter.x = pointer.x;
    this.emitter.y = pointer.y;
    this.emitter.start(true, 4000, null, 10);
    this.game.time.events.add(2000, Kotlin.getBoundCallableRefForMemberFunction(this, 'destroyEmitter'), this);
  };
  DestroyEmitter.prototype.destroyEmitter = function () {
    this.emitter.destroy();
  };
  DestroyEmitter.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DestroyEmitter',
    baseClasses: []
  };
  function DiamondBurst() {
    Phaser.State.call(this);
  }
  DiamondBurst.prototype.preload = function () {
    this.game.load.image('diamond', 'assets/sprites/diamond.png');
  };
  DiamondBurst.prototype.create = function () {
    this.game.stage.backgroundColor = '#337799';
    this.emitter = this.game.add.emitter(this.game.world.centerX, 200, 200);
    this.emitter.makeParticles('diamond');
    this.emitter.start(false, 5000, 20);
  };
  DiamondBurst.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DiamondBurst',
    baseClasses: []
  };
  function EmitterWidth() {
    Phaser.State.call(this);
  }
  EmitterWidth.prototype.preload = function () {
    this.game.load.image('bubble', 'assets/particles/bubble.png');
    this.game.load.image('water', 'assets/skies/sunset.png');
  };
  EmitterWidth.prototype.create = function () {
    this.game.add.image(0, 0, 'water');
    this.emitter = this.game.add.emitter(this.game.world.centerX, 200, 200);
    this.emitter.width = 800.0;
    this.emitter.makeParticles('bubble');
    this.emitter.minParticleSpeed.set(0, 300);
    this.emitter.maxParticleSpeed.set(0, 400);
    this.emitter.setRotation(0, 0);
    this.emitter.setAlpha(0.3, 0.8);
    this.emitter.setScale(0.5, 0.5, 1, 1);
    this.emitter.gravity = -200;
    this.emitter.start(false, 5000, 100);
  };
  EmitterWidth.prototype.render = function () {
  };
  EmitterWidth.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'EmitterWidth',
    baseClasses: []
  };
  function Firestarter() {
    Phaser.State.call(this);
  }
  Firestarter.prototype.preload = function () {
    this.game.load.image('space', 'assets/misc/starfield.jpg');
    this.game.load.image('fire1', 'assets/particles/fire1.png');
    this.game.load.image('fire2', 'assets/particles/fire2.png');
    this.game.load.image('fire3', 'assets/particles/fire3.png');
    this.game.load.image('smoke', 'assets/particles/smoke-puff.png');
    this.game.load.spritesheet('ball', 'assets/particles/plasmaball.png', 128, 128);
  };
  Firestarter.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.add.tileSprite(0, 0, this.game.width, this.game.height, 'space');
    this.emitter = this.game.add.emitter(this.game.world.centerX, this.game.world.centerY, 400);
    this.emitter.makeParticles(['fire1', 'fire2', 'fire3', 'smoke']);
    this.emitter.gravity = 200;
    this.emitter.setAlpha(1, 0, 3000);
    this.emitter.setScale(0.8, 0, 0.8, 0, 3000);
    this.emitter.start(false, 3000, 5);
    this.sprite = this.game.add.sprite(0, 300, 'ball', 0);
    enable(this.game.physics.arcade, this.sprite);
    this.game.physics.arcade.gravity.y = 150.0;
    this.game.physics.arcade.checkCollision.left = false;
    this.game.physics.arcade.checkCollision.right = false;
    this.sprite.body.setSize(80, 80, 0, 0);
    this.sprite.body.collideWorldBounds = true;
    this.sprite.body.bounce.set(1);
    this.sprite.body.velocity.set(300, 200);
    this.sprite.inputEnabled = true;
    this.sprite.input.enableDrag();
    this.sprite.events.onDragStart.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDragStart'), this);
    this.sprite.events.onDragStop.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onDragStop'), this);
    this.sprite.animations.add('pulse');
    this.sprite.play('pulse', 30, true);
    this.sprite.anchor.set(0.5);
    this.createText_98i29q$(16, 16, 'If you can catch the fireball, drag it around');
  };
  Firestarter.prototype.update = function () {
    var px = this.sprite.body.velocity.x;
    var py = this.sprite.body.velocity.y;
    px *= -1;
    py *= -1;
    this.emitter.minParticleSpeed.set(px, py);
    this.emitter.maxParticleSpeed.set(px, py);
    this.emitter.emitX = this.sprite.x;
    this.emitter.emitY = this.sprite.y;
    this.game.world.wrap(this.sprite, 64);
  };
  Firestarter.prototype.onDragStart = function () {
    this.sprite.body.moves = false;
  };
  Firestarter.prototype.onDragStop = function () {
    this.sprite.body.moves = true;
  };
  Firestarter.prototype.createText_98i29q$ = function (x, y, string) {
    var text_0 = this.game.add.text(x, y, string);
    text_0.font = 'Arial Black';
    text_0.fontSize = 20;
    text_0.fill = '#ffffff';
    text_0.setShadow(2, 2, 'rgba(0, 0, 0, 0.7)', 2);
    return text_0;
  };
  Firestarter.prototype.render = function () {
  };
  Firestarter.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Firestarter',
    baseClasses: []
  };
  function Flow() {
    Phaser.State.call(this);
  }
  Flow.prototype.preload = function () {
    this.game.load.image('sky', 'assets/skies/sky4.png');
    this.game.load.image('leaf', 'assets/particles/leaf1.png');
  };
  Flow.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.emitter = this.game.add.emitter(this.game.world.centerX, 0, 100);
    this.emitter.makeParticles('leaf');
    this.emitter.minParticleSpeed.setTo(-300, 30);
    this.emitter.maxParticleSpeed.setTo(300, 100);
    this.emitter.minParticleScale = 0.1;
    this.emitter.maxParticleScale = 0.5;
    this.emitter.gravity = 250;
    this.emitter.flow(2000, 500, 5, -1);
  };
  Flow.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Flow',
    baseClasses: []
  };
  function Glass() {
    Phaser.State.call(this);
  }
  Glass.prototype.preload = function () {
    this.game.load.image('glass', 'assets/particles/glass.png');
    this.game.load.image('water', 'assets/demoscene/blue-raster-floor.png');
  };
  Glass.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.add.tileSprite(0, 344, 800, 256, 'water');
    this.emitter = this.game.add.emitter(this.game.world.centerX, 200);
    this.emitter.makeParticles('glass');
    this.emitter.setXSpeed(-200, 200);
    this.emitter.setYSpeed(-150, -250);
    this.emitter.particleBringToTop = true;
    this.emitter.setAlpha(0.1, 1, 500);
    this.emitter.setScale(-2, 2, 1, 1, 3000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Sinusoidal, 'InOut'), true);
    this.emitter.gravity = 300;
    this.emitter.start(false, 5000, 700, 50);
  };
  Glass.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Glass',
    baseClasses: []
  };
  function NoRotation() {
    Phaser.State.call(this);
  }
  NoRotation.prototype.preload = function () {
    this.game.load.image('alien', 'assets/sprites/space-baddie.png');
  };
  NoRotation.prototype.create = function () {
    var emitter = this.game.add.emitter(this.game.world.centerX, this.game.world.centerY, 250);
    emitter.makeParticles('alien');
    emitter.minParticleSpeed.setTo(-300, -300);
    emitter.maxParticleSpeed.setTo(300, 300);
    emitter.minRotation = 0;
    emitter.maxRotation = 0;
    emitter.start(false, 4000, 15);
  };
  NoRotation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'NoRotation',
    baseClasses: []
  };
  function ParticleAlpha() {
    Phaser.State.call(this);
  }
  ParticleAlpha.prototype.preload = function () {
    this.game.load.image('corona', 'assets/particles/blue.png');
  };
  ParticleAlpha.prototype.create = function () {
    this.game.stage.backgroundColor = '#000000';
    this.emitter = this.game.add.emitter(this.game.world.centerX, 500, 200);
    this.emitter.makeParticles('corona');
    this.emitter.setRotation(0, 0);
    this.emitter.setAlpha(0.3, 0.8);
    this.emitter.setScale(0.5, 1);
    this.emitter.gravity = -200;
    this.emitter.start(false, 5000, 100);
  };
  ParticleAlpha.prototype.render = function () {
  };
  ParticleAlpha.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ParticleAlpha',
    baseClasses: []
  };
  function ParticleScale() {
    Phaser.State.call(this);
  }
  ParticleScale.prototype.preload = function () {
    this.game.load.image('sky', 'assets/skies/sky4.png');
    this.game.load.spritesheet('veggies', 'assets/sprites/fruitnveg32wh37.png', 32, 32);
  };
  ParticleScale.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.emitter = this.game.add.emitter(this.game.world.centerX, this.game.world.centerY, 20);
    this.emitter.makeParticles('veggies', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 20, true, true);
    this.emitter.minParticleSpeed.setTo(-200, -300);
    this.emitter.maxParticleSpeed.setTo(200, -400);
    this.emitter.minParticleScale = 0.5;
    this.emitter.maxParticleScale = 2;
    this.emitter.gravity = 150;
    this.emitter.bounce.setTo(0.5, 0.5);
    this.emitter.angularDrag = 30;
    this.emitter.start(false, 6000, 100);
  };
  ParticleScale.prototype.update = function () {
    this.game.physics.arcade.collide(this.emitter);
  };
  ParticleScale.prototype.render = function () {
    var tmp$;
    tmp$ = this.emitter.total - 1;
    for (var i = 0; i <= tmp$; i++) {
      if (this.emitter.children[i].visible) {
      }
    }
  };
  ParticleScale.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ParticleScale',
    baseClasses: []
  };
  function ParticlesVsPlatforms() {
    Phaser.State.call(this);
  }
  ParticlesVsPlatforms.prototype.preload = function () {
    this.game.load.spritesheet('balls', 'assets/sprites/balls.png', 17, 17);
    this.game.load.image('platform', 'assets/sprites/platform.png');
  };
  ParticlesVsPlatforms.prototype.create = function () {
    this.emitter = this.game.add.emitter(50, this.game.world.centerY - 200);
    this.emitter.bounce.setTo(1);
    this.emitter.setXSpeed(100, 200);
    this.emitter.setYSpeed(-50, 50);
    this.emitter.makeParticles('balls', 0, 250, true, true);
    this.platform = this.game.add.sprite(300, 500, 'platform');
    this.platform.width = 200.0;
    enable(this.game.physics.arcade, this.platform);
    this.platform.body.immovable = true;
    this.emitter.start(false, 5000, 20);
  };
  ParticlesVsPlatforms.prototype.update = function () {
    this.game.physics.arcade.collide(this.emitter, this.platform, Kotlin.getBoundCallableRefForMemberFunction(this, 'change_ge0c0c$'), null, this);
  };
  ParticlesVsPlatforms.prototype.change_ge0c0c$ = function (platform, particle) {
    particle.kill();
  };
  ParticlesVsPlatforms.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ParticlesVsPlatforms',
    baseClasses: []
  };
  function Rain() {
    Phaser.State.call(this);
  }
  Rain.prototype.preload = function () {
    this.game.load.image('sky', 'assets/skies/underwater3.png');
    this.game.load.spritesheet('rain', 'assets/sprites/rain.png', 17, 17);
  };
  Rain.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    var emitter = this.game.add.emitter(this.game.world.centerX, 0, 400);
    emitter.width = this.game.world.width;
    emitter.makeParticles('rain');
    emitter.minParticleScale = 0.1;
    emitter.maxParticleScale = 0.5;
    emitter.setYSpeed(300, 500);
    emitter.setXSpeed(-5, 5);
    emitter.minRotation = 0;
    emitter.maxRotation = 0;
    emitter.start(false, 1600, 5, 0);
  };
  Rain.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Rain',
    baseClasses: []
  };
  function RandomSprite() {
    Phaser.State.call(this);
  }
  RandomSprite.prototype.preload = function () {
    this.game.load.image('carrot', 'assets/sprites/carrot.png');
    this.game.load.image('star', 'assets/misc/star_particle.png');
    this.game.load.image('diamond', 'assets/sprites/diamond.png');
  };
  RandomSprite.prototype.create = function () {
    this.game.stage.backgroundColor = 3372953;
    this.emitter = this.game.add.emitter(this.game.world.centerX, 200, 200);
    this.emitter.makeParticles(['diamond', 'carrot', 'star']);
    this.emitter.start(false, 5000, 20);
  };
  RandomSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RandomSprite',
    baseClasses: []
  };
  function SmokeTrail() {
    Phaser.State.call(this);
  }
  SmokeTrail.prototype.preload = function () {
    this.game.load.image('smoke', 'assets/particles/smoke-puff.png');
  };
  function SmokeTrail$create$ObjectLiteral() {
    this.emitX = 800 - 64;
  }
  SmokeTrail$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function SmokeTrail$create$ObjectLiteral_0() {
    this.emitY = 200;
  }
  SmokeTrail$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SmokeTrail.prototype.create = function () {
    this.game.stage.backgroundColor = '#03273e';
    this.emitter = this.game.add.emitter(this.game.world.centerX, 500, 400);
    this.emitter.makeParticles('smoke');
    this.emitter.setXSpeed(0, 0);
    this.emitter.setYSpeed(0, 0);
    this.emitter.setRotation(0, 0);
    this.emitter.setAlpha(0.1, 1, 3000);
    this.emitter.setScale(0.4, 2, 0.4, 2, 6000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Quintic, 'Out'));
    this.emitter.gravity = -100;
    this.emitter.start(false, 4000, 20);
    this.emitter.emitX = 64;
    this.emitter.emitY = 500;
    this.game.add.tween(this.emitter).to(new SmokeTrail$create$ObjectLiteral(), 1000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Sinusoidal, 'InOut'), true, 0, IntCompanionObject.MAX_VALUE, true);
    this.game.add.tween(this.emitter).to(new SmokeTrail$create$ObjectLiteral_0(), 4000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Sinusoidal, 'InOut'), true, 0, IntCompanionObject.MAX_VALUE, true);
  };
  SmokeTrail.prototype.update = function () {
    this.emitter.customSort(Kotlin.getBoundCallableRefForMemberFunction(this, 'scaleSort_zemaj2$'), this);
  };
  SmokeTrail.prototype.scaleSort_zemaj2$ = function (a, b) {
    if (a.scale.x < b.scale.x) {
      return -1;
    }
     else if (a.scale.x > b.scale.x) {
      return 1;
    }
     else {
      return 0;
    }
  };
  SmokeTrail.prototype.render = function () {
  };
  SmokeTrail.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SmokeTrail',
    baseClasses: []
  };
  function Snow() {
    Phaser.State.call(this);
    this.max = 0.0;
    this.update_interval = 4 * 60;
    this.i = 0;
  }
  Snow.prototype.preload = function () {
    this.game.load.image('sky', 'assets/skies/sky3.png');
    this.game.load.spritesheet('snowflakes', 'assets/sprites/snowflakes.png', 17, 17);
    this.game.load.spritesheet('snowflakes_large', 'assets/sprites/snowflakes_large.png', 64, 64);
  };
  Snow.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.back_emitter = this.game.add.emitter(this.game.world.centerX, -32, 600);
    this.back_emitter.makeParticles('snowflakes', [0, 1, 2, 3, 4, 5]);
    this.back_emitter.maxParticleScale = 0.6;
    this.back_emitter.minParticleScale = 0.2;
    this.back_emitter.setYSpeed(20, 100);
    this.back_emitter.gravity = 0;
    this.back_emitter.width = this.game.world.width * 1.5;
    this.back_emitter.minRotation = 0;
    this.back_emitter.maxRotation = 40;
    this.mid_emitter = this.game.add.emitter(this.game.world.centerX, -32, 250);
    this.mid_emitter.makeParticles('snowflakes', [0, 1, 2, 3, 4, 5]);
    this.mid_emitter.maxParticleScale = 1.2;
    this.mid_emitter.minParticleScale = 0.8;
    this.mid_emitter.setYSpeed(50, 150);
    this.mid_emitter.gravity = 0;
    this.mid_emitter.width = this.game.world.width * 1.5;
    this.mid_emitter.minRotation = 0;
    this.mid_emitter.maxRotation = 40;
    this.front_emitter = this.game.add.emitter(this.game.world.centerX, -32, 50);
    this.front_emitter.makeParticles('snowflakes_large', [0, 1, 2, 3, 4, 5]);
    this.front_emitter.maxParticleScale = 1;
    this.front_emitter.minParticleScale = 0.5;
    this.front_emitter.setYSpeed(100, 200);
    this.front_emitter.gravity = 0;
    this.front_emitter.width = this.game.world.width * 1.5;
    this.front_emitter.minRotation = 0;
    this.front_emitter.maxRotation = 40;
    this.changeWindDirection();
    this.back_emitter.start(false, 14000, 20);
    this.mid_emitter.start(false, 12000, 40);
    this.front_emitter.start(false, 6000, 1000);
  };
  Snow.prototype.update = function () {
    this.i++;
    if (this.i === this.update_interval) {
      this.changeWindDirection();
      this.update_interval = floor(Phaser.Math, random(Phaser.Math) * 20) * 60;
      this.i = 0;
    }
  };
  Snow.prototype.changeWindDirection = function () {
    var multi = floor(Phaser.Math, (this.max + 200) / 4);
    var frag = floor(Phaser.Math, random(Phaser.Math) * 100) - multi;
    this.max = this.max + frag;
    if (this.max > 200)
      this.max = 150.0;
    if (this.max < -200)
      this.max = -150.0;
    this.setXSpeed_ornf5y$(this.back_emitter, this.max);
    this.setXSpeed_ornf5y$(this.mid_emitter, this.max);
    this.setXSpeed_ornf5y$(this.front_emitter, this.max);
  };
  function Snow$setXSpeed$lambda(closure$max, this$Snow) {
    return function (p) {
      this$Snow.setParticleXSpeed_v6lbzm$(p, closure$max);
    };
  }
  Snow.prototype.setXSpeed_ornf5y$ = function (emitter, max) {
    emitter.setXSpeed(max - 20, max);
    emitter.forEachAlive(Snow$setXSpeed$lambda(max, this));
  };
  Snow.prototype.setParticleXSpeed_v6lbzm$ = function (particle, max) {
    particle.body.velocity.x = max - floor(Phaser.Math, random(Phaser.Math) * 30);
  };
  Snow.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Snow',
    baseClasses: []
  };
  function TweenedEmitter() {
    Phaser.State.call(this);
  }
  TweenedEmitter.prototype.preload = function () {
    this.game.load.image('bubble', 'assets/particles/bubble.png');
    this.game.load.image('water', 'assets/demoscene/blue-raster-floor.png');
  };
  function TweenedEmitter$create$ObjectLiteral() {
    this.emitX = 600;
  }
  TweenedEmitter$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenedEmitter.prototype.create = function () {
    this.game.add.tileSprite(0, 344, 800, 256, 'water');
    this.emitter = this.game.add.emitter(this.game.world.centerX, 32, 250);
    this.emitter.makeParticles('bubble');
    this.emitter.setXSpeed(0, 0);
    this.emitter.setYSpeed(200, 200);
    this.emitter.particleBringToTop = true;
    this.emitter.setRotation(0, 0);
    this.emitter.setAlpha(0.1, 1, 2000);
    this.emitter.setScale(0.1, 2, 0.1, 2, 4000);
    this.emitter.gravity = 100;
    this.emitter.start(false, 5000, 50);
    this.emitter.emitX = 200;
    this.game.add.tween(this.emitter).to(new TweenedEmitter$create$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Back, 'InOut'), true, 0, IntCompanionObject.MAX_VALUE, true);
  };
  TweenedEmitter.prototype.update = function () {
  };
  TweenedEmitter.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TweenedEmitter',
    baseClasses: []
  };
  function WhenParticlesCollide() {
    Phaser.State.call(this);
  }
  WhenParticlesCollide.prototype.preload = function () {
    this.game.load.image('sky', 'assets/skies/cavern2.png');
    this.game.load.spritesheet('balls', 'assets/sprites/balls.png', 17, 17);
  };
  WhenParticlesCollide.prototype.create = function () {
    this.game.add.image(0, 0, 'sky');
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.leftEmitter = this.game.add.emitter(50, this.game.world.centerY - 200);
    this.leftEmitter.bounce.setTo(0.5, 0.5);
    this.leftEmitter.setXSpeed(100, 200);
    this.leftEmitter.setYSpeed(-50, 50);
    this.leftEmitter.makeParticles('balls', 0, 250, true, true);
    this.rightEmitter = this.game.add.emitter(this.game.world.width - 50, this.game.world.centerY - 200);
    this.rightEmitter.bounce.setTo(0.5, 0.5);
    this.rightEmitter.setXSpeed(-100, -200);
    this.rightEmitter.setYSpeed(-50, 50);
    this.rightEmitter.makeParticles('balls', 1, 250, true, true);
    this.leftEmitter.start(false, 5000, 20);
    this.rightEmitter.start(false, 5000, 20);
  };
  WhenParticlesCollide.prototype.update = function () {
    this.game.physics.arcade.collide(this.leftEmitter, this.rightEmitter, Kotlin.getBoundCallableRefForMemberFunction(this, 'change_ge0c0c$'), null, this);
  };
  WhenParticlesCollide.prototype.change_ge0c0c$ = function (a, b) {
    a.frame = 3;
    b.frame = 3;
  };
  WhenParticlesCollide.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'WhenParticlesCollide',
    baseClasses: []
  };
  function WorldParticles() {
    Phaser.State.call(this);
  }
  WorldParticles.prototype.preload = function () {
    this.game.load.image('sky', 'assets/pics/remember-me.jpg');
    this.game.load.image('leaf', 'assets/particles/leaf1.png');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  WorldParticles.prototype.create = function () {
    this.game.world.setBounds(0, 0, 1920, 1200);
    this.game.physics.arcade.gravity.y = 100.0;
    var sky = this.game.add.image(0, 0, 'sky');
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.emitter = this.game.add.emitter(400, 100, 100);
    this.emitter.makeParticles('leaf');
    this.emitter.minParticleSpeed.setTo(-300, 30);
    this.emitter.maxParticleSpeed.setTo(300, 100);
    this.emitter.minParticleScale = 0.1;
    this.emitter.maxParticleScale = 0.5;
    this.emitter.gravity = 250;
    this.emitter.flow(2000, 500, 5, -1);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'dropSprite_pal8wq$'), this);
  };
  WorldParticles.prototype.dropSprite_pal8wq$ = function (pointer) {
    var m = this.game.add.sprite(pointer.worldX, pointer.worldY, 'mushroom');
    enable(this.game.physics.arcade, m);
    m.body.collideWorldBounds = true;
  };
  WorldParticles.prototype.update = function () {
    if (this.cursors.up.isDown) {
      this.game.camera.y = this.game.camera.y - 4;
    }
     else if (this.cursors.down.isDown) {
      this.game.camera.y = this.game.camera.y + 4;
    }
    if (this.cursors.left.isDown) {
      this.game.camera.x = this.game.camera.x - 4;
    }
     else if (this.cursors.right.isDown) {
      this.game.camera.x = this.game.camera.x + 4;
    }
  };
  WorldParticles.prototype.render = function () {
    this.game.debug.cameraInfo(this.game.camera, 32, 32);
  };
  WorldParticles.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'WorldParticles',
    baseClasses: []
  };
  function ZeroGravity() {
    Phaser.State.call(this);
  }
  ZeroGravity.prototype.preload = function () {
    this.game.load.spritesheet('balls', 'assets/sprites/balls.png', 17, 17);
  };
  ZeroGravity.prototype.create = function () {
    var emitter = this.game.add.emitter(this.game.world.centerX, this.game.world.centerY, 250);
    emitter.makeParticles('balls', [0, 1, 2, 3, 4, 5]);
    emitter.minParticleSpeed.setTo(-400, -400);
    emitter.maxParticleSpeed.setTo(400, 400);
    emitter.gravity = 0;
    emitter.start(false, 4000, 15);
  };
  ZeroGravity.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ZeroGravity',
    baseClasses: []
  };
  function AddAnImage() {
    Phaser.State.call(this);
  }
  AddAnImage.prototype.preload = function () {
    this.game.load.image('pic', 'assets/pics/acryl_bladerunner.png');
  };
  AddAnImage.prototype.create = function () {
    var image_0 = this.game.add.image(100, 100, 'pic');
  };
  AddAnImage.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AddAnImage',
    baseClasses: []
  };
  function AddASprite() {
    Phaser.State.call(this);
  }
  AddASprite.prototype.preload = function () {
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  AddASprite.prototype.create = function () {
    var test = this.game.add.sprite(200, 200, 'mushroom');
  };
  AddASprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AddASprite',
    baseClasses: []
  };
  function AddSeveralSprites() {
    Phaser.State.call(this);
    this.timer = 0.0;
    this.total = 0.0;
  }
  AddSeveralSprites.prototype.preload = function () {
    this.game.load.spritesheet('mummy', 'assets/sprites/metalslug_mummy37x45.png', 37, 45, 18);
  };
  AddSeveralSprites.prototype.create = function () {
    this.releaseMummy();
  };
  function AddSeveralSprites$releaseMummy$ObjectLiteral(this$AddSeveralSprites, closure$mummy) {
    this.x = this$AddSeveralSprites.game.width + (1600 + closure$mummy.v.x);
  }
  AddSeveralSprites$releaseMummy$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  AddSeveralSprites.prototype.releaseMummy = function () {
    var mummy = {v: this.game.add.sprite(-(random(Phaser.Math) * 800), this.game.world.randomY, 'mummy')};
    mummy.v.scale.setTo(2, 2);
    mummy.v.angle = this.game.rnd.angle();
    mummy.v.animations.add('walk');
    mummy.v.animations.play('walk', 20, true);
    this.game.add.tween(mummy.v).to(new AddSeveralSprites$releaseMummy$ObjectLiteral(this, mummy), 20000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
    this.total++;
    this.timer = this.game.time.now + 100;
  };
  AddSeveralSprites.prototype.update = function () {
    if (this.total < 200 && this.game.time.now > this.timer) {
      this.releaseMummy();
    }
  };
  AddSeveralSprites.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AddSeveralSprites',
    baseClasses: []
  };
  function AlignInRectangle() {
    Phaser.State.call(this);
  }
  AlignInRectangle.prototype.preload = function () {
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
    this.game.load.image('orb', 'assets/sprites/orb-red.png');
  };
  AlignInRectangle.prototype.create = function () {
    this.game.stage.backgroundColor = '#3433bb';
    this.sprite3 = this.game.add.sprite(200, 400, 'mushroom');
    this.sprite3.anchor.set(0.5);
    this.sprite3.scale.set(2);
    this.sprite1 = this.game.add.sprite(200, 150, 'mushroom');
    this.sprite1.anchor.set(0.5);
    this.sprite2 = this.game.add.sprite(200, 250, 'orb');
    this.rect = new Phaser.Rectangle(100, 50, 600, 500);
    this.sprite1.alignIn(this.rect, Phaser.TOP_LEFT);
    this.sprite2.alignIn(this.rect, Phaser.TOP_CENTER);
    this.sprite3.alignIn(this.rect, Phaser.BOTTOM_RIGHT);
  };
  AlignInRectangle.prototype.render = function () {
    this.game.debug.rectangle(this.rect, '#ffffff', false);
    this.game.debug.geom(this.rect.getPoint(Phaser.TOP_LEFT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.TOP_CENTER), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.TOP_RIGHT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.MIDDLE_LEFT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.MIDDLE_CENTER), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.MIDDLE_RIGHT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.BOTTOM_LEFT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.BOTTOM_CENTER), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.BOTTOM_RIGHT), '#ff00ff');
  };
  AlignInRectangle.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AlignInRectangle',
    baseClasses: []
  };
  function AlignMultipleSprites() {
    Phaser.State.call(this);
  }
  AlignMultipleSprites.prototype.preload = function () {
    this.game.load.image('block', 'assets/sprites/block.png');
  };
  AlignMultipleSprites.prototype.create = function () {
    var sprite1 = this.game.add.sprite(70, 250, 'block');
    var sprite2 = alignTo(this.game.add.sprite(0, 0, 'block'), sprite1, Phaser.RIGHT_CENTER, 16);
    var sprite3 = alignTo(this.game.add.sprite(0, 0, 'block'), sprite2, Phaser.RIGHT_CENTER, 16);
    var sprite4 = alignTo(this.game.add.sprite(0, 0, 'block'), sprite3, Phaser.RIGHT_CENTER, 16);
    var sprite5 = alignTo(this.game.add.sprite(0, 0, 'block'), sprite4, Phaser.RIGHT_CENTER, 16);
    var sprite6 = alignTo(this.game.add.sprite(0, 0, 'block'), sprite5, Phaser.RIGHT_CENTER, 16);
  };
  AlignMultipleSprites.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AlignMultipleSprites',
    baseClasses: []
  };
  function AlignTextToSprite() {
    Phaser.State.call(this);
  }
  AlignTextToSprite.prototype.preload = function () {
    this.game.load.image('pic', 'assets/pics/ladycop.png');
  };
  AlignTextToSprite.prototype.create = function () {
    var style = TextStyle('32px Courier', void 0, void 0, void 0, void 0, void 0, '#00ff44');
    var sprite1 = this.game.add.sprite(220, 160, 'pic');
    var text1 = this.game.add.text(0, 0, 'Phaser', style);
    var text2 = this.game.add.text(0, 0, '2.4.9', style);
    var text3 = this.game.add.text(0, 0, 'Aligning Text', style);
    alignTo(text1, sprite1, Phaser.RIGHT_TOP, 16);
    alignTo(text2, sprite1, Phaser.RIGHT_CENTER, 16);
    alignTo(text3, sprite1, Phaser.RIGHT_BOTTOM, 16);
  };
  AlignTextToSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AlignTextToSprite',
    baseClasses: []
  };
  function AlignToRectangle() {
    Phaser.State.call(this);
  }
  AlignToRectangle.prototype.preload = function () {
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
    this.game.load.image('orb', 'assets/sprites/orb-red.png');
  };
  AlignToRectangle.prototype.create = function () {
    this.game.stage.backgroundColor = '#3433bb';
    this.sprite3 = this.game.add.sprite(200, 400, 'mushroom');
    this.sprite3.anchor.set(0.5);
    this.sprite3.scale.set(2);
    this.sprite1 = this.game.add.sprite(200, 150, 'mushroom');
    this.sprite1.anchor.set(0.5);
    this.sprite2 = this.game.add.sprite(200, 250, 'orb');
    this.rect = new Phaser.Rectangle(200, 200, 400, 300);
    alignTo(this.sprite1, this.rect, Phaser.TOP_CENTER);
    alignTo(this.sprite2, this.rect, Phaser.BOTTOM_RIGHT);
    alignTo(this.sprite3, this.rect, Phaser.LEFT_CENTER);
  };
  AlignToRectangle.prototype.render = function () {
    this.game.debug.rectangle(this.rect, '#ffffff', false);
    this.game.debug.geom(this.rect.getPoint(Phaser.TOP_LEFT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.TOP_CENTER), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.TOP_RIGHT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.MIDDLE_LEFT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.MIDDLE_CENTER), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.MIDDLE_RIGHT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.BOTTOM_LEFT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.BOTTOM_CENTER), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.BOTTOM_RIGHT), '#ff00ff');
  };
  AlignToRectangle.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AlignToRectangle',
    baseClasses: []
  };
  function AlignToSprite() {
    Phaser.State.call(this);
  }
  AlignToSprite.prototype.preload = function () {
    this.game.load.image('pic', 'assets/pics/spaceship.png');
    this.game.load.image('pangball', 'assets/sprites/32x32.png');
  };
  AlignToSprite.prototype.create = function () {
    var pic = this.game.add.sprite(0, 0, 'pic');
    this.game.world.createMultiple(12, 'pangball', 0, true);
    pic.alignIn(this.game.world.bounds, Phaser.CENTER);
    alignTo(this.game.world.getChildAt(1), pic, Phaser.TOP_LEFT);
    alignTo(this.game.world.getChildAt(2), pic, Phaser.TOP_CENTER);
    alignTo(this.game.world.getChildAt(3), pic, Phaser.TOP_RIGHT);
    alignTo(this.game.world.getChildAt(4), pic, Phaser.LEFT_TOP);
    alignTo(this.game.world.getChildAt(5), pic, Phaser.LEFT_CENTER);
    alignTo(this.game.world.getChildAt(6), pic, Phaser.LEFT_BOTTOM);
    alignTo(this.game.world.getChildAt(7), pic, Phaser.RIGHT_TOP);
    alignTo(this.game.world.getChildAt(8), pic, Phaser.RIGHT_CENTER);
    alignTo(this.game.world.getChildAt(9), pic, Phaser.RIGHT_BOTTOM);
    alignTo(this.game.world.getChildAt(10), pic, Phaser.BOTTOM_LEFT);
    alignTo(this.game.world.getChildAt(11), pic, Phaser.BOTTOM_CENTER);
    alignTo(this.game.world.getChildAt(12), pic, Phaser.BOTTOM_RIGHT);
  };
  AlignToSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AlignToSprite',
    baseClasses: []
  };
  function AlignWithinSprite() {
    Phaser.State.call(this);
  }
  AlignWithinSprite.prototype.preload = function () {
    this.game.load.image('leon', 'assets/pics/shocktroopers_leon.png');
    this.game.load.image('toy', 'assets/pics/shocktroopers_toy.png');
    this.game.load.image('pic', 'assets/pics/spaceship.png');
    this.game.load.image('block', 'assets/sprites/block.png');
  };
  AlignWithinSprite.prototype.create = function () {
    var pic = this.game.add.sprite(0, 0, 'pic');
    var sprite1 = this.game.add.sprite(0, 0, 'leon');
    var sprite2 = this.game.add.sprite(0, 0, 'toy');
    var sprite3 = this.game.add.sprite(0, 0, 'block');
    pic.alignIn(this.game.world.bounds, Phaser.CENTER);
    sprite1.alignIn(pic, Phaser.BOTTOM_RIGHT);
    sprite2.alignIn(pic, Phaser.BOTTOM_LEFT);
    sprite3.alignIn(pic, Phaser.TOP_CENTER, 0, -10);
  };
  AlignWithinSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AlignWithinSprite',
    baseClasses: []
  };
  function Anchor() {
    Phaser.State.call(this);
    this.dec = false;
  }
  Anchor.prototype.preload = function () {
    this.game.load.image('pic', 'assets/pics/lance-overdose-loader_eye.png');
  };
  Anchor.prototype.create = function () {
    this.game.stage.backgroundColor = '#0072bc';
    this.point = new Phaser.Point(300.0, 300.0);
    this.sprite = this.game.add.sprite(this.point.x, this.point.y, 'pic');
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'updateAnchor'), this);
  };
  Anchor.prototype.update = function () {
  };
  Anchor.prototype.updateAnchor = function () {
    if (this.dec) {
      this.sprite.anchor.x = this.sprite.anchor.x - 0.1;
      this.sprite.anchor.y = this.sprite.anchor.y - 0.1;
      if (this.sprite.anchor.x <= 0) {
        this.dec = false;
      }
    }
     else {
      this.sprite.anchor.x = this.sprite.anchor.x + 0.1;
      this.sprite.anchor.y = this.sprite.anchor.y + 0.1;
      if (this.sprite.anchor.x >= 1) {
        this.dec = true;
      }
    }
  };
  Anchor.prototype.render = function () {
    this.game.debug.geom(this.point, 'rgb(0,255,0)');
    this.game.debug.text('Anchor X: ' + this.sprite.anchor.x + ' Y: ' + this.sprite.anchor.y, 32, 32);
    this.game.debug.text('Sprite X: ' + this.sprite.x + ' Y: ' + this.sprite.y, 32, 64);
    this.game.debug.text('Click to adjust the anchor', 32, 96);
  };
  Anchor.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Anchor',
    baseClasses: []
  };
  function ChildSprites() {
    Phaser.State.call(this);
  }
  ChildSprites.prototype.preload = function () {
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
    this.game.load.spritesheet('mummy', 'assets/sprites/metalslug_mummy37x45.png', 37, 45, 18);
  };
  ChildSprites.prototype.create = function () {
    this.parent = this.game.add.sprite(100, 100, 'mushroom');
    this.parent.addChild(this.game.make.sprite(-50, -50, 'mummy'));
    this.parent.addChild(this.game.make.sprite(100, 0, 'mummy'));
    this.parent.addChild(this.game.make.sprite(200, 200, 'mummy'));
    this.child = this.parent.addChild(this.game.make.sprite(0, 100, 'mummy'));
  };
  ChildSprites.prototype.update = function () {
    this.parent.x = this.parent.x + 0.1;
    this.child.x = this.child.x + 0.1;
  };
  ChildSprites.prototype.render = function () {
    this.game.debug.text(this.parent.width.toString(), 32, 32);
    this.game.debug.geom(getBounds(this.parent));
  };
  ChildSprites.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ChildSprites',
    baseClasses: []
  };
  function CollideWorldBounds_0() {
    Phaser.State.call(this);
  }
  CollideWorldBounds_0.prototype.preload = function () {
    this.game.load.image('pineapple', 'assets/sprites/pineapple.png');
  };
  CollideWorldBounds_0.prototype.create = function () {
    var tmp$;
    this.pineapples = this.game.add.group();
    this.pineapples.enableBody = true;
    this.pineapples.physicsBodyType = Phaser.Physics.ARCADE;
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var pineapple = this.pineapples.create(200 + i * 48, 50, 'pineapple');
      pineapple.body.collideWorldBounds = true;
      pineapple.body.gravity.x = this.game.rnd.integerInRange(-50, 50);
      pineapple.body.gravity.y = 100 + random(Phaser.Math) * 100;
      pineapple.body.bounce.setTo(0.9, 0.9);
    }
  };
  CollideWorldBounds_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CollideWorldBounds',
    baseClasses: []
  };
  function Destroy() {
    Phaser.State.call(this);
  }
  Destroy.prototype.preload = function () {
    this.game.load.image('plane', 'assets/misc/boss1.png');
    this.game.load.image('sky', 'assets/tests/sky-2x.png');
  };
  Destroy.prototype.create = function () {
    var tmp$;
    this.game.add.sprite(0, 0, 'sky');
    var mx = this.game.width - this.game.cache.getImage('plane').width;
    var my = this.game.height - this.game.cache.getImage('plane').height;
    tmp$ = 5 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var sprite = this.game.add.sprite(this.game.rnd.integerInRange(0, mx), this.game.rnd.integerInRange(0, my), 'plane');
      sprite.inputEnabled = true;
      sprite.input.useHandCursor = true;
      sprite.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'destroySprite_okw7gk$'), this);
    }
  };
  Destroy.prototype.destroySprite_okw7gk$ = function (sprite) {
    destroy(sprite);
  };
  Destroy.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Destroy',
    baseClasses: []
  };
  function DestroyTexture() {
    Phaser.State.call(this);
  }
  DestroyTexture.prototype.preload = function () {
    this.game.load.image('plane', 'assets/misc/boss1.png');
  };
  DestroyTexture.prototype.create = function () {
    var bmd = this.game.add.bitmapData(256, 256);
    bmd.fill(0, 0, 255, 0.5);
    this.sprite1 = this.game.add.sprite(0, 0, bmd);
    this.sprite2 = this.game.add.sprite(200, 0, 'plane');
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'destroySprite'), this);
  };
  DestroyTexture.prototype.destroySprite = function () {
    this.sprite1.destroy(true, true);
    var bmd = this.game.add.bitmapData(256, 256);
    bmd.fill(255, 0, 255, 0.5);
    this.sprite3 = this.game.add.sprite(0, 0, bmd);
  };
  DestroyTexture.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DestroyTexture',
    baseClasses: []
  };
  function DynamicCrop() {
    Phaser.State.call(this);
    this.w = 0.0;
    this.h = 0.0;
  }
  DynamicCrop.prototype.preload = function () {
    this.game.load.image('trsi', 'assets/pics/trsipic1_lazur.jpg');
  };
  DynamicCrop.prototype.create = function () {
    this.pic = this.game.add.sprite(0, 0, 'trsi');
    this.w = this.pic.width;
    this.h = this.pic.height;
    this.cropRect = new Phaser.Rectangle(0, 0, 128, 128);
    crop(this.pic, this.cropRect);
  };
  DynamicCrop.prototype.update = function () {
    if (this.game.input.x < this.w && this.game.input.y < this.h) {
      this.pic.x = this.game.input.x;
      this.pic.y = this.game.input.y;
      this.cropRect.x = this.game.input.x;
      this.cropRect.y = this.game.input.y;
      this.pic.updateCrop();
    }
  };
  DynamicCrop.prototype.render = function () {
    this.game.debug.text('x: ' + this.game.input.x + ' y: ' + this.game.input.y, 32, 32);
  };
  DynamicCrop.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DynamicCrop',
    baseClasses: []
  };
  function FixedScale() {
    Phaser.State.call(this);
  }
  FixedScale.prototype.preload = function () {
    this.game.load.image('disk', 'assets/sprites/copy-that-floppy.png');
    this.game.load.image('ball', 'assets/sprites/mushroom2.png');
  };
  function FixedScale$create$ObjectLiteral() {
    this.x = 3;
    this.y = 3;
  }
  FixedScale$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  FixedScale.prototype.create = function () {
    this.parent = this.game.add.sprite(100, 100, 'disk');
    this.parent.name = 'disk';
    this.child = this.game.make.sprite(0, 0, 'ball');
    this.parent.addChild(this.child);
    setScaleMinMax(this.child, 1, 2);
    this.game.add.tween(this.parent.scale).to(new FixedScale$create$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true, 0, 1000, true);
  };
  FixedScale.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FixedScale',
    baseClasses: []
  };
  function HorizontalCrop() {
    Phaser.State.call(this);
  }
  HorizontalCrop.prototype.preload = function () {
    this.game.load.image('trsi', 'assets/pics/trsipic1_lazur.jpg');
  };
  function HorizontalCrop$create$ObjectLiteral(this$HorizontalCrop) {
    this.width = this$HorizontalCrop.pic.width;
  }
  HorizontalCrop$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  HorizontalCrop.prototype.create = function () {
    this.pic = this.game.add.image(this.game.world.centerX, 550, 'trsi');
    this.pic.anchor.setTo(0.5, 1);
    this.cropRect = new Phaser.Rectangle(0, 0, 0, this.pic.height);
    console.log(this.cropRect);
    var tween = this.game.add.tween(this.cropRect).to(new HorizontalCrop$create$ObjectLiteral(this), 3000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), false, 0, 1000, true);
    this.pic.crop(this.cropRect);
    tween.start();
  };
  HorizontalCrop.prototype.update = function () {
    this.pic.updateCrop();
  };
  HorizontalCrop.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'HorizontalCrop',
    baseClasses: []
  };
  function Mask() {
    Phaser.State.call(this);
  }
  Mask.prototype.preload = function () {
    this.game.load.image('chaos', 'assets/pics/hotshot-chaos_in_tokyo.png');
  };
  Mask.prototype.create = function () {
    this.sprite = this.game.add.sprite(0, 0, 'chaos');
    this.sprite.scale.set(2);
    this.mask = this.game.add.graphics(0, 0);
    this.mask.beginFill(16777215);
    this.mask.drawCircle(100, 100, 100);
    this.sprite.mask = this.mask;
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'move_rxq7re$'), this);
  };
  Mask.prototype.move_rxq7re$ = function (pointer, x, y) {
    this.mask.x = x - 100;
    this.mask.y = y - 100;
  };
  Mask.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Mask',
    baseClasses: []
  };
  function MoveASprite() {
    Phaser.State.call(this);
  }
  MoveASprite.prototype.preload = function () {
    this.game.load.atlasJSONHash('bot', 'assets/sprites/running_bot.png', 'assets/sprites/running_bot.json');
  };
  MoveASprite.prototype.create = function () {
    this.s = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'bot');
    this.s.anchor.setTo(0.5, 0.5);
    this.s.scale.setTo(2, 2);
    this.s.animations.add('run');
    this.s.animations.play('run', 10, true);
  };
  MoveASprite.prototype.update = function () {
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {
      this.s.x = this.s.x - 4;
    }
     else if (this.game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {
      this.s.x = this.s.x + 4;
    }
    if (this.game.input.keyboard.isDown(Phaser.Keyboard.UP)) {
      this.s.y = this.s.y - 4;
    }
     else if (this.game.input.keyboard.isDown(Phaser.Keyboard.DOWN)) {
      this.s.y = this.s.y + 4;
    }
  };
  MoveASprite.prototype.render = function () {
    this.game.debug.spriteInfo(this.s, 20, 32);
  };
  MoveASprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MoveASprite',
    baseClasses: []
  };
  function MovementMask() {
    Phaser.State.call(this);
  }
  MovementMask.prototype.preload = function () {
    this.game.load.image('box', 'assets/sprites/block.png');
    this.game.load.image('platform', 'assets/sprites/platform.png');
  };
  function MovementMask$create$ObjectLiteral() {
    this.y = 200;
  }
  MovementMask$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function MovementMask$create$ObjectLiteral_0() {
    this.x = 232;
  }
  MovementMask$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  MovementMask.prototype.create = function () {
    var platform = this.game.add.sprite(150, this.game.world.centerY, 'platform');
    platform.height = 8.0;
    this.box = this.game.add.sprite(570, 400, 'box');
    this.box.anchor.set(0.5);
    var mask = this.game.add.graphics(0, 0);
    mask.beginFill(16777215);
    mask.drawRect(platform.x, platform.y - 200, platform.width, 200);
    this.box.mask = mask;
    this.game.add.tween(this.box).to(new MovementMask$create$ObjectLiteral(), 500, 'Sine.easeInOut', true, 0, -1, true);
    this.game.add.tween(this.box).to(new MovementMask$create$ObjectLiteral_0(), 3000, 'Sine.easeInOut', true, 0, -1, true);
  };
  MovementMask.prototype.update = function () {
    this.box.rotation = this.box.rotation + 0.04;
  };
  MovementMask.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MovementMask',
    baseClasses: []
  };
  function OutOfBounds() {
    Phaser.State.call(this);
  }
  OutOfBounds.prototype.preload = function () {
    this.game.load.image('alien', 'assets/sprites/space-baddie.png');
    this.game.load.image('ship', 'assets/sprites/shmup-ship.png');
  };
  OutOfBounds.prototype.create = function () {
    var tmp$, tmp$_0;
    this.game.physics.setBoundsToWorld();
    this.player = this.game.add.sprite(400, 500, 'ship');
    this.player.anchor.setTo(0.5, 0.5);
    this.aliens = this.game.add.group();
    this.aliens.enableBody = true;
    this.aliens.physicsBodyType = Phaser.Physics.ARCADE;
    tmp$ = 4 - 1;
    for (var y = 0; y <= tmp$; y++) {
      tmp$_0 = 10 - 1;
      for (var x = 0; x <= tmp$_0; x++) {
        var alien = this.aliens.create(200 + x * 48, y * 50, 'alien');
        alien.name = 'alien' + x.toString() + y.toString();
        alien.checkWorldBounds = true;
        alien.events.onOutOfBounds.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'alienOut_okw7gk$'), this);
        alien.body.velocity.y = 50 + random(Phaser.Math) * 200;
      }
    }
  };
  OutOfBounds.prototype.alienOut_okw7gk$ = function (alien) {
    reset(alien, alien.x, 0);
    alien.body.velocity.y = 50 + random(Phaser.Math) * 200;
  };
  OutOfBounds.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'OutOfBounds',
    baseClasses: []
  };
  function OverlapTweenWithoutPhysics() {
    Phaser.State.call(this);
  }
  OverlapTweenWithoutPhysics.prototype.preload = function () {
    this.game.load.image('atari1', 'assets/sprites/atari130xe.png');
    this.game.load.image('atari2', 'assets/sprites/atari800xl.png');
  };
  function OverlapTweenWithoutPhysics$create$ObjectLiteral() {
    this.y = 400;
  }
  OverlapTweenWithoutPhysics$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function OverlapTweenWithoutPhysics$create$ObjectLiteral_0() {
    this.fill = '#ffffff';
  }
  OverlapTweenWithoutPhysics$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  OverlapTweenWithoutPhysics.prototype.create = function () {
    this.sprite1 = this.game.add.sprite(100, 200, 'atari1');
    this.sprite1.inputEnabled = true;
    this.sprite1.input.enableDrag();
    this.sprite2 = this.game.add.sprite(400, 100, 'atari2');
    this.game.add.tween(this.sprite2).to(new OverlapTweenWithoutPhysics$create$ObjectLiteral(), 3000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Cubic, 'InOut'), true, 0, IntCompanionObject.MAX_VALUE, true);
    this.text = this.game.add.text(16, 16, 'Drag the sprite. Overlapping: false', new OverlapTweenWithoutPhysics$create$ObjectLiteral_0());
  };
  OverlapTweenWithoutPhysics.prototype.update = function () {
    if (this.checkOverlap_ge0c0c$(this.sprite1, this.sprite2)) {
      this.text.text = 'Drag the sprite. Overlapping: true';
    }
     else {
      this.text.text = 'Drag the sprite. Overlapping: false';
    }
  };
  OverlapTweenWithoutPhysics.prototype.checkOverlap_ge0c0c$ = function (spriteA, spriteB) {
    var boundsA = getBounds(spriteA);
    var boundsB = getBounds(spriteB);
    return Phaser.Rectangle.intersects(boundsA, boundsB);
  };
  OverlapTweenWithoutPhysics.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'OverlapTweenWithoutPhysics',
    baseClasses: []
  };
  function OverlapWithoutPhysics() {
    Phaser.State.call(this);
  }
  OverlapWithoutPhysics.prototype.preload = function () {
    this.game.load.image('atari1', 'assets/sprites/atari130xe.png');
    this.game.load.image('atari2', 'assets/sprites/atari800xl.png');
  };
  function OverlapWithoutPhysics$create$ObjectLiteral() {
    this.fill = '#ffffff';
  }
  OverlapWithoutPhysics$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  OverlapWithoutPhysics.prototype.create = function () {
    this.sprite1 = this.game.add.sprite(100, 200, 'atari1');
    this.sprite1.inputEnabled = true;
    this.sprite1.input.enableDrag();
    this.sprite2 = this.game.add.sprite(400, 400, 'atari2');
    this.sprite2.inputEnabled = true;
    this.sprite2.input.enableDrag();
    this.text = this.game.add.text(16, 16, 'Drag the sprites. Overlapping: false', new OverlapWithoutPhysics$create$ObjectLiteral());
  };
  OverlapWithoutPhysics.prototype.update = function () {
    if (this.checkOverlap_ge0c0c$(this.sprite1, this.sprite2)) {
      this.text.text = 'Drag the sprites. Overlapping: true';
    }
     else {
      this.text.text = 'Drag the sprites. Overlapping: false';
    }
  };
  OverlapWithoutPhysics.prototype.checkOverlap_ge0c0c$ = function (spriteA, spriteB) {
    var boundsA = getBounds(spriteA);
    var boundsB = getBounds(spriteB);
    return Phaser.Rectangle.intersects(boundsA, boundsB);
  };
  OverlapWithoutPhysics.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'OverlapWithoutPhysics',
    baseClasses: []
  };
  function Pivot() {
    Phaser.State.call(this);
  }
  Pivot.prototype.preload = function () {
    this.game.load.image('arrow', 'assets/sprites/arrow.png');
  };
  Pivot.prototype.create = function () {
    this.game.stage.backgroundColor = '#3e5f96';
    this.arrow1 = this.game.add.sprite(200, 150, 'arrow');
    this.arrow1.pivot.x = 100.0;
    this.arrow2 = this.game.add.sprite(600, 150, 'arrow');
    this.arrow2.pivot.y = 100.0;
    this.arrow3 = this.game.add.sprite(200, 450, 'arrow');
    this.arrow3.pivot.x = 100.0;
    this.arrow3.pivot.y = 100.0;
    this.arrow4 = this.game.add.sprite(600, 450, 'arrow');
    this.arrow4.pivot.x = 100.0;
    this.arrow4.anchor.set(0.5);
  };
  Pivot.prototype.update = function () {
    this.arrow1.rotation = this.arrow1.rotation + 0.05;
    this.arrow2.rotation = this.arrow2.rotation + 0.05;
    this.arrow3.rotation = this.arrow3.rotation + 0.05;
    this.arrow4.rotation = this.arrow4.rotation + 0.05;
  };
  Pivot.prototype.render = function () {
    this.game.debug.geom(new Phaser.Point(this.arrow1.x, this.arrow1.y), '#ffff00');
    this.game.debug.geom(new Phaser.Point(this.arrow2.x, this.arrow2.y), '#ffff00');
    this.game.debug.geom(new Phaser.Point(this.arrow3.x, this.arrow3.y), '#ffff00');
    this.game.debug.geom(new Phaser.Point(this.arrow4.x, this.arrow4.y), '#ffff00');
  };
  Pivot.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Pivot',
    baseClasses: []
  };
  function Rope() {
    Phaser.State.call(this);
    this.shouldDebug = false;
  }
  Rope.prototype.preload = function () {
    this.game.load.image('snake', 'assets/sprites/snake.png');
  };
  function Rope$create$lambda(closure$count, closure$points) {
    return function () {
      var tmp$;
      closure$count.v += 0.1;
      tmp$ = closure$points.v.size - 1;
      for (var i = 0; i <= tmp$; i++) {
        closure$points.v.get_za3lpa$(i).y = sin(Phaser.Math, i * 0.5 + closure$count.v) * 20;
      }
    };
  }
  Rope.prototype.create = function () {
    var tmp$;
    var count = {v: 0.0};
    var length = 918 / 20 | 0;
    var points = {v: mutableListOf([])};
    tmp$ = 20 - 1;
    for (var i = 0; i <= tmp$; i++) {
      points.v.add_za3rmp$(new Phaser.Point(i * length, 0.0));
    }
    this.rope = this.game.add.rope(32, this.game.world.centerY, 'snake', null, Kotlin.kotlin.collections.copyToArray(points.v));
    this.rope.scale.set(0.8);
    this.rope.updateAnimation = Rope$create$lambda(count, points);
    this.debugKey = this.game.input.keyboard.addKey(Phaser.Keyboard.D);
    this.debugKey.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'toggleDebug'));
  };
  Rope.prototype.render = function () {
    if (this.shouldDebug) {
      this.game.debug.ropeSegments(this.rope);
    }
    this.game.debug.text('(D) to show debug', 20, 32);
  };
  Rope.prototype.toggleDebug = function () {
    this.shouldDebug = !this.shouldDebug;
  };
  Rope.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Rope',
    baseClasses: []
  };
  function RotateAndScale() {
    Phaser.State.call(this);
  }
  RotateAndScale.prototype.preload = function () {
    this.game.load.image('disk', 'assets/sprites/copy-that-floppy.png');
  };
  function RotateAndScale$create$ObjectLiteral() {
    this.angle = 45;
  }
  RotateAndScale$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function RotateAndScale$create$ObjectLiteral_0() {
    this.x = 2;
    this.y = 2;
  }
  RotateAndScale$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  RotateAndScale.prototype.create = function () {
    this.sprite = this.game.add.sprite(400, 100, 'disk');
    this.game.add.tween(this.sprite).to(new RotateAndScale$create$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
    this.game.add.tween(this.sprite.scale).to(new RotateAndScale$create$ObjectLiteral_0(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
  };
  RotateAndScale.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RotateAndScale',
    baseClasses: []
  };
  function RotatedAtlasFrameSupport() {
    Phaser.State.call(this);
  }
  RotatedAtlasFrameSupport.prototype.preload = function () {
    this.game.load.atlas('atlas', 'assets/sprites/atlas_rotated.png', 'assets/sprites/atlas_rotated.json');
  };
  RotatedAtlasFrameSupport.prototype.create = function () {
    this.game.stage.backgroundColor = '#404040';
    var cactuar = this.game.add.sprite(0, 0, 'atlas', 'cactuar');
    var contra = this.game.add.sprite(300, 0, 'atlas', 'contra1');
    contra.tint = 16711680;
    console.log(contra.width, contra.height);
    var lulu = this.game.add.sprite(500, 0, 'atlas', 'shocktroopers_lulu2');
  };
  RotatedAtlasFrameSupport.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RotatedAtlasFrameSupport',
    baseClasses: []
  };
  function RotateSpriteAroundPoint() {
    Phaser.State.call(this);
  }
  RotateSpriteAroundPoint.prototype.preload = function () {
    this.game.load.image('ship', 'assets/sprites/shmup-ship2.png');
    this.game.load.image('ball', 'assets/sprites/blue_ball.png');
  };
  RotateSpriteAroundPoint.prototype.create = function () {
    this.game.stage.backgroundColor = '#001255';
    this.ship = this.game.add.sprite(400, 300, 'ship');
    this.ship.anchor.setTo(0.5, 0.5);
    enable(this.game.physics.arcade, this.ship);
    this.orb = this.game.add.sprite(400, 300, 'ball');
    this.orb.anchor.setTo(0.5);
    this.orb.pivot.x = 100.0;
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  RotateSpriteAroundPoint.prototype.update = function () {
    this.ship.body.velocity.x = 0.0;
    this.ship.body.velocity.y = 0.0;
    if (this.cursors.left.isDown) {
      this.ship.body.velocity.x = -300.0;
    }
     else if (this.cursors.right.isDown) {
      this.ship.body.velocity.x = 300.0;
    }
    if (this.cursors.up.isDown) {
      this.ship.body.velocity.y = -300.0;
    }
     else if (this.cursors.down.isDown) {
      this.ship.body.velocity.y = 300.0;
    }
    this.orb.rotation = this.orb.rotation + 0.05;
  };
  RotateSpriteAroundPoint.prototype.preRender = function () {
    this.orb.x = this.ship.x;
    this.orb.y = this.ship.y;
  };
  RotateSpriteAroundPoint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RotateSpriteAroundPoint',
    baseClasses: []
  };
  function ScaleASprite() {
    Phaser.State.call(this);
  }
  ScaleASprite.prototype.preload = function () {
    this.game.load.image('disk', 'assets/sprites/darkwing_crazy.png');
  };
  ScaleASprite.prototype.create = function () {
    var tmp$;
    tmp$ = 15 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var sprite = this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'disk');
      var rand = this.game.rnd.realInRange(-2, 6);
      sprite.scale.setTo(rand, rand);
    }
  };
  ScaleASprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ScaleASprite',
    baseClasses: []
  };
  function SharedSpriteTextures() {
    Phaser.State.call(this);
  }
  SharedSpriteTextures.prototype.preload = function () {
    this.game.load.atlas('atlas', 'assets/pics/texturepacker_test.png', 'assets/pics/texturepacker_test.json');
  };
  SharedSpriteTextures.prototype.create = function () {
    this.game.stage.backgroundColor = '#404040';
    this.chick = this.game.add.sprite(64, 64, 'atlas');
    this.chick.frameName = 'budbrain_chick.png';
    this.cop = this.game.add.sprite(600, 64, 'atlas');
    this.cop.frameName = 'ladycop.png';
    this.robot = this.game.add.sprite(50, 300, 'atlas');
    this.robot.frameName = 'robot.png';
    this.car = this.game.add.sprite(100, 400, 'atlas');
    this.car.frameName = 'supercars_parsec.png';
    this.mech = this.game.add.sprite(250, 100, 'atlas');
    this.mech.frameName = 'titan_mech.png';
  };
  SharedSpriteTextures.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SharedSpriteTextures',
    baseClasses: []
  };
  function SpriteBounds() {
    Phaser.State.call(this);
  }
  SpriteBounds.prototype.preload = function () {
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  SpriteBounds.prototype.create = function () {
    this.game.stage.backgroundColor = '#3433bb';
    this.sprite1 = this.game.add.sprite(200, 150, 'mushroom');
    this.sprite1.anchor.set(0.5);
    this.sprite2 = this.game.add.sprite(200, 250, 'mushroom');
    this.sprite3 = this.game.add.sprite(200, 400, 'mushroom');
    this.sprite3.anchor.set(0.5);
    this.sprite3.scale.set(2);
    this.rect = new Phaser.Rectangle(100, 50, 600, 500);
    console.log(this.rect.centerX);
    console.log(this.rect.getPoint(Phaser.TOP_CENTER));
    this.sprite1.centerX = this.rect.centerX;
    this.sprite2.centerX = this.rect.centerX;
    this.sprite3.centerX = this.rect.centerX;
  };
  SpriteBounds.prototype.render = function () {
    this.game.debug.rectangle(this.rect, '#ffffff', false);
    this.game.debug.geom(this.rect.getPoint(Phaser.TOP_LEFT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.TOP_CENTER), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.TOP_RIGHT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.MIDDLE_LEFT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.MIDDLE_CENTER), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.MIDDLE_RIGHT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.BOTTOM_LEFT), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.BOTTOM_CENTER), '#ff00ff');
    this.game.debug.geom(this.rect.getPoint(Phaser.BOTTOM_RIGHT), '#ff00ff');
  };
  SpriteBounds.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpriteBounds',
    baseClasses: []
  };
  function SpriteDimensions() {
    Phaser.State.call(this);
  }
  SpriteDimensions.prototype.preload = function () {
    this.game.load.image('disk', 'assets/sprites/darkwing_crazy.png');
    this.game.load.atlas('bot', 'assets/sprites/running_bot.png', 'assets/sprites/running_bot.json');
  };
  SpriteDimensions.prototype.create = function () {
    var sprite1 = this.game.add.sprite(0, 0, 'disk');
    console.log('sprite1');
    console.log(sprite1.width, sprite1.height);
    var sprite2 = this.game.add.sprite(200, 0, 'disk');
    sprite2.scale.set(0.5);
    console.log('sprite2');
    console.log(sprite2.width, sprite2.height);
    console.log(sprite2.texture.width, sprite2.texture.height);
    var sprite3 = this.game.add.sprite(400, 0, 'bot', 'run06');
    sprite3.scale.set(2);
    console.log('sprite3');
    console.log(sprite3.width, sprite3.height);
    console.log(sprite3.texture.width, sprite3.texture.height);
  };
  SpriteDimensions.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpriteDimensions',
    baseClasses: []
  };
  function SpriteFromBitmapdata() {
    Phaser.State.call(this);
  }
  SpriteFromBitmapdata.prototype.preload = function () {
  };
  SpriteFromBitmapdata.prototype.create = function () {
    var bmd = this.game.add.bitmapData(128, 128);
    bmd.ctx.beginPath();
    bmd.ctx.rect(0.0, 0.0, 128.0, 128.0);
    bmd.ctx.fillStyle = '#ff0000';
    bmd.ctx.fill();
    var sprite = this.game.add.sprite(200, 200, bmd);
  };
  SpriteFromBitmapdata.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpriteFromBitmapdata',
    baseClasses: []
  };
  function SpriteGroupMask() {
    Phaser.State.call(this);
  }
  SpriteGroupMask.prototype.preload = function () {
    this.game.load.image('box', 'assets/sprites/block.png');
    this.game.load.image('platform', 'assets/sprites/platform.png');
  };
  function SpriteGroupMask$create$ObjectLiteral() {
    this.y = 200;
  }
  SpriteGroupMask$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function SpriteGroupMask$create$ObjectLiteral_0() {
    this.y = 200;
  }
  SpriteGroupMask$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function SpriteGroupMask$create$ObjectLiteral_1() {
    this.y = 200;
  }
  SpriteGroupMask$create$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SpriteGroupMask.prototype.create = function () {
    var platform = this.game.add.sprite(0, this.game.world.centerY, 'platform');
    platform.width = this.game.width;
    platform.height = 8.0;
    this.group = this.game.add.group();
    var box1 = this.group.create(200, 300, 'box');
    var box2 = this.group.create(400, 300, 'box');
    var box3 = this.group.create(600, 300, 'box');
    this.group.setAll('anchor.x', 0.5);
    this.group.setAll('anchor.y', 0.5);
    var mask = this.game.add.graphics(0, 100);
    mask.beginFill(16777215);
    mask.drawRect(130, 0, 140, 200);
    mask.drawRect(330, 0, 140, 200);
    mask.drawRect(530, 0, 140, 200);
    this.group.mask = mask;
    this.game.add.tween(box1).to(new SpriteGroupMask$create$ObjectLiteral(), 1000, 'Sine.easeInOut', true, 0, -1, true);
    this.game.add.tween(box2).to(new SpriteGroupMask$create$ObjectLiteral_0(), 1000, 'Sine.easeInOut', true, 500, -1, true);
    this.game.add.tween(box3).to(new SpriteGroupMask$create$ObjectLiteral_1(), 1000, 'Sine.easeInOut', true, 1000, -1, true);
  };
  function SpriteGroupMask$update$lambda(box) {
    box.rotation = box.rotation + 0.04;
  }
  SpriteGroupMask.prototype.update = function () {
    this.group.forEach(SpriteGroupMask$update$lambda);
  };
  SpriteGroupMask.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpriteGroupMask',
    baseClasses: []
  };
  function SpriteRotation() {
    Phaser.State.call(this);
  }
  SpriteRotation.prototype.preload = function () {
    this.game.load.image('arrow', 'assets/sprites/arrow.png');
  };
  SpriteRotation.prototype.create = function () {
    this.game.stage.backgroundColor = '#0072bc';
    this.sprite = this.game.add.sprite(400, 300, 'arrow');
    this.sprite.anchor.setTo(0.5, 0.5);
  };
  SpriteRotation.prototype.update = function () {
    this.sprite.angle = this.sprite.angle + 1;
  };
  SpriteRotation.prototype.render = function () {
    this.game.debug.spriteInfo(this.sprite, 32, 32);
  };
  SpriteRotation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpriteRotation',
    baseClasses: []
  };
  function Spritesheet() {
    Phaser.State.call(this);
  }
  Spritesheet.prototype.preload = function () {
    this.game.load.spritesheet('ms', 'assets/sprites/metalslug_mummy37x45.png', 37, 45, 18);
  };
  function Spritesheet$create$ObjectLiteral(this$Spritesheet) {
    this.x = this$Spritesheet.game.width;
  }
  Spritesheet$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Spritesheet.prototype.create = function () {
    this.sprite = this.game.add.sprite(40, 100, 'ms');
    this.sprite.animations.add('walk');
    this.sprite.animations.play('walk', 50, true);
    this.game.add.tween(this.sprite).to(new Spritesheet$create$ObjectLiteral(this), 10000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
  };
  Spritesheet.prototype.update = function () {
    if (this.sprite.x >= 300) {
      this.sprite.scale.x = this.sprite.scale.x + 0.01;
      this.sprite.scale.y = this.sprite.scale.y + 0.01;
    }
  };
  Spritesheet.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Spritesheet',
    baseClasses: []
  };
  function SpriteTint() {
    Phaser.State.call(this);
  }
  SpriteTint.prototype.preload = function () {
    this.game.load.atlas('atlas', 'assets/sprites/seacreatures_json.png', 'assets/sprites/seacreatures_json.json');
  };
  SpriteTint.prototype.create = function () {
    this.sprite = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'atlas', 'greenJellyfish0000');
    this.sprite.anchor.set(0.5);
    this.sprite.tint = random(Phaser.Math) * 16777215;
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'changeTint'), this);
  };
  SpriteTint.prototype.changeTint = function () {
    this.sprite.tint = random(Phaser.Math) * 16777215;
  };
  SpriteTint.prototype.update = function () {
    this.sprite.rotation = this.sprite.rotation + 0.02;
  };
  SpriteTint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpriteTint',
    baseClasses: []
  };
  function VerticalCrop() {
    Phaser.State.call(this);
  }
  VerticalCrop.prototype.preload = function () {
    this.game.load.image('trsi', 'assets/pics/trsipic1_lazur.jpg');
  };
  function VerticalCrop$create$ObjectLiteral(this$VerticalCrop) {
    this.height = this$VerticalCrop.pic.height;
  }
  VerticalCrop$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  VerticalCrop.prototype.create = function () {
    this.pic = this.game.add.sprite(this.game.world.centerX, 550, 'trsi');
    this.pic.anchor.setTo(0.5, 1);
    this.cropRect = new Phaser.Rectangle(0, 0, this.pic.width, 0);
    var tween = this.game.add.tween(this.cropRect).to(new VerticalCrop$create$ObjectLiteral(this), 3000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), false, 0, 1000, true);
    crop(this.pic, this.cropRect);
    tween.start();
  };
  VerticalCrop.prototype.update = function () {
    this.pic.updateCrop();
  };
  VerticalCrop.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'VerticalCrop',
    baseClasses: []
  };
  function BitmapFontCacheAsBitmap() {
    Phaser.State.call(this);
  }
  BitmapFontCacheAsBitmap.prototype.preload = function () {
    this.game.load.bitmapFont('desyrel', 'assets/fonts/bitmapFonts/desyrel.png', 'assets/fonts/bitmapFonts/desyrel.xml');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  BitmapFontCacheAsBitmap.prototype.create = function () {
    var bob = this.game.add.sprite(200, 200, 'mushroom');
    var bob2 = this.game.add.sprite(300, 200, 'mushroom');
    bob.cacheAsBitmap = true;
    bob2.cacheAsBitmap = true;
  };
  BitmapFontCacheAsBitmap.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BitmapFontCacheAsBitmap',
    baseClasses: []
  };
  function BitmapfontDrag() {
    Phaser.State.call(this);
  }
  BitmapfontDrag.prototype.preload = function () {
    this.game.load.bitmapFont('carrier_command', 'assets/fonts/bitmapFonts/carrier_command.png', 'assets/fonts/bitmapFonts/carrier_command.xml');
  };
  BitmapfontDrag.prototype.create = function () {
    this.bmpText = this.game.add.bitmapText(10, 100, 'carrier_command', 'Drag me around !', 34);
    this.bmpText.inputEnabled = true;
    this.bmpText.input.enableDrag();
  };
  BitmapfontDrag.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BitmapfontDrag',
    baseClasses: []
  };
  function BitmapFontFromTextureAtlas() {
    Phaser.State.call(this);
  }
  BitmapFontFromTextureAtlas.prototype.preload = function () {
    this.game.load.atlas('atlas', 'assets/sprites/atlas-mixed.png', 'assets/sprites/atlas-mixed.json');
    this.game.load.xml('fontData', 'assets/fonts/bitmapFonts/desyrel.xml');
  };
  BitmapFontFromTextureAtlas.prototype.create = function () {
    this.game.cache.addBitmapFontFromAtlas('myFont', 'atlas', 'desyrel', 'fontData', 'xml', 0, 0);
    this.bmpText = this.game.add.bitmapText(0, 100, 'myFont', 'A Bitmap Font\nfrom a Texture Atlas', 64);
    this.bmpText.align = 'center';
    var ball = this.game.add.sprite(0, 100, 'atlas', 'wizball');
    enable(this.game.physics.arcade, ball);
    ball.body.bounce.set(1);
    ball.body.collideWorldBounds = true;
    ball.body.velocity.set(200, 100);
    ball.body.gravity.y = 200.0;
  };
  BitmapFontFromTextureAtlas.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BitmapFontFromTextureAtlas',
    baseClasses: []
  };
  function BitmapFonts() {
    Phaser.State.call(this);
  }
  BitmapFonts.prototype.preload = function () {
    this.game.load.bitmapFont('desyrel', 'assets/fonts/bitmapFonts/desyrel.png', 'assets/fonts/bitmapFonts/desyrel.xml');
  };
  BitmapFonts.prototype.create = function () {
    this.bmpText = this.game.add.bitmapText(200, 100, 'desyrel', 'Phaser & Pixi\nrocking!', 64);
  };
  BitmapFonts.prototype.update = function () {
    this.bmpText.text = 'Phaser & Pixi\nrocking!\n' + round(Phaser.Math, this.game.time.now);
  };
  BitmapFonts.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BitmapFonts',
    baseClasses: []
  };
  function BitmaptextAnchorX() {
    Phaser.State.call(this);
  }
  BitmaptextAnchorX.prototype.preload = function () {
    this.game.load.bitmapFont('desyrel', 'assets/fonts/bitmapFonts/desyrel.png', 'assets/fonts/bitmapFonts/desyrel.xml');
  };
  BitmaptextAnchorX.prototype.create = function () {
    var text1 = this.game.add.bitmapText(400, 70, 'desyrel', 'Anchor.x = 0', 64);
    var text2 = this.game.add.bitmapText(400, 270, 'desyrel', 'Anchor.x = 0.5', 64);
    text2.anchor.x = 0.5;
    var text3 = this.game.add.bitmapText(400, 470, 'desyrel', 'Anchor.x = 1', 64);
    text3.anchor.x = 1.0;
    this.line = new Phaser.Line(400, 0, 400, 600);
  };
  BitmaptextAnchorX.prototype.render = function () {
    this.game.debug.geom(this.line);
  };
  BitmaptextAnchorX.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BitmaptextAnchorX',
    baseClasses: []
  };
  function BitmaptextAnchorY() {
    Phaser.State.call(this);
  }
  BitmaptextAnchorY.prototype.preload = function () {
    this.game.load.bitmapFont('desyrel', 'assets/fonts/bitmapFonts/desyrel.png', 'assets/fonts/bitmapFonts/desyrel.xml');
  };
  BitmaptextAnchorY.prototype.create = function () {
    var text_0 = this.game.add.bitmapText(400, 300, 'desyrel', 'Middle Earth', 64);
    text_0.anchor.x = 0.5;
    text_0.anchor.y = 0.5;
    this.line1 = new Phaser.Line(400, 0, 400, 600);
    this.line2 = new Phaser.Line(0, 300, 800, 300);
  };
  BitmaptextAnchorY.prototype.render = function () {
    this.game.debug.geom(this.line1);
    this.game.debug.geom(this.line2);
  };
  BitmaptextAnchorY.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BitmaptextAnchorY',
    baseClasses: []
  };
  function BitmaptextMaxWidth() {
    Phaser.State.call(this);
    this.text = 'Lorem ipsum ';
    this.words = ['dolor', 'sit', 'amet', 'consectetuer', 'adipiscing', 'elit', 'aenean', 'commodo', 'ligula', 'eget', 'massa', 'sociis', 'natoque', 'penatibus', 'et', 'magnis', 'dis', 'parturient', 'montes'];
    this.run = 5;
    this.current = 2;
  }
  BitmaptextMaxWidth.prototype.preload = function () {
    this.game.load.bitmapFont('gem', 'assets/fonts/bitmapFonts/gem.png', 'assets/fonts/bitmapFonts/gem.xml');
  };
  BitmaptextMaxWidth.prototype.create = function () {
    this.game.stage.backgroundColor = 2566178;
    this.bmpText = this.game.add.bitmapText(32, 32, 'gem', this.text, 16);
    this.bmpText.maxWidth = 400;
    var marker = this.game.add.graphics(432, 0);
    marker.beginFill(10936878);
    marker.drawRect(0, 0, 1, this.game.height);
    marker.endFill();
    this.game.time.events.repeat(100, 200, Kotlin.getBoundCallableRefForMemberFunction(this, 'addText'), this);
  };
  BitmaptextMaxWidth.prototype.addText = function () {
    var word = this.game.rnd.pick(this.words);
    if (this.current === 0) {
      var $receiver = word;
      word = $receiver.length > 0 ? $receiver.substring(0, 1).toUpperCase() + $receiver.substring(1) : $receiver;
    }
    this.text += word;
    this.current++;
    if (this.current === this.run) {
      this.text += '. ';
      this.run = this.game.rnd.between(3, 6);
      this.current = 0;
    }
     else {
      this.text += ' ';
    }
    this.bmpText.text = this.text;
  };
  BitmaptextMaxWidth.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BitmaptextMaxWidth',
    baseClasses: []
  };
  function BitmaptextPurgeGlyphs() {
    Phaser.State.call(this);
    this.text = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quid ergo aliud intellegetur nisi uti ne quae pars naturae neglegatur? Si longus, levis Ita relinquet duas, de quibus etiam atque etiam consideret. Optime, inquam. Sed quanta sit alias, nunc tantum possitne esse tanta.\n\nQuid, si etiam iucunda memoria est praeteritorum malorum? Consequatur summas voluptates non modo parvo, sed per me nihilo, si potest Atque his de rebus et splendida est eorum et illustris oratio. Mihi enim satis est, ipsis non satis. Ergo ita: non posse honeste vivi, nisi honeste vivatur? Mihi quidem Antiochum, quem audis, satis belle videris attendere. Et quod est munus, quod opus sapientiae? Ex rebus enim timiditas, non ex vocabulis nascitur. Ex ea difficultate illae fallaciloquae, ut ait Accius, malitiae natae sunt. Nonne videmus quanta perturbatio rerum omnium consequatur, quanta confusio? Quae cum magnifice primo dici viderentur, considerata minus probabantur.\n\n---> Click to remove text';
  }
  BitmaptextPurgeGlyphs.prototype.preload = function () {
    this.game.load.bitmapFont('gem', 'assets/fonts/bitmapFonts/gem.png', 'assets/fonts/bitmapFonts/gem.xml');
  };
  BitmaptextPurgeGlyphs.prototype.create = function () {
    this.game.stage.backgroundColor = 2566178;
    this.bmpText = this.game.add.bitmapText(32, 32, 'gem', this.text, 16);
    this.bmpText.maxWidth = 400;
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'chopText'), this);
  };
  BitmaptextPurgeGlyphs.prototype.chopText = function () {
    this.bmpText.text = this.text.substring(0, 26);
    var purged = this.bmpText.purgeGlyphs();
    this.game.add.bitmapText(32, 128, 'gem', 'Purged ' + purged + ' glyphs', 32);
  };
  BitmaptextPurgeGlyphs.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BitmaptextPurgeGlyphs',
    baseClasses: []
  };
  function BitmaptextWithPhysics() {
    Phaser.State.call(this);
  }
  BitmaptextWithPhysics.prototype.preload = function () {
    this.game.load.bitmapFont('desyrel', 'assets/fonts/bitmapFonts/desyrel.png', 'assets/fonts/bitmapFonts/desyrel.xml');
    this.game.load.bitmapFont('stack', 'assets/fonts/bitmapFonts/shortStack.png', 'assets/fonts/bitmapFonts/shortStack.xml');
  };
  BitmaptextWithPhysics.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.text1 = this.game.add.bitmapText(200, 100, 'desyrel', 'BitmapText', 64);
    this.text2 = this.game.add.bitmapText(400, 400, 'stack', 'with Physics', 32);
    enable_2(this.game.physics.arcade, [this.text1, this.text2]);
    this.text1.body.velocity.setTo(200, 200);
    this.text1.body.collideWorldBounds = true;
    this.text1.body.bounce.set(1);
    this.text2.body.velocity.setTo(-100, -100);
    this.text2.body.collideWorldBounds = true;
    this.text2.body.bounce.set(1);
  };
  BitmaptextWithPhysics.prototype.update = function () {
    this.game.physics.arcade.collide(this.text1, this.text2);
  };
  BitmaptextWithPhysics.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BitmaptextWithPhysics',
    baseClasses: []
  };
  function BitmaptextWithPhysicsUpdating() {
    Phaser.State.call(this);
    this.words = ['Ouch!', 'bump', 'eek', 'look out', 'careful', 'mind out', 'watch it!', 'OI!', 'Owww', 'Grrrr', 'that hurt', 'bully'];
  }
  BitmaptextWithPhysicsUpdating.prototype.preload = function () {
    this.game.load.bitmapFont('desyrel', 'assets/fonts/bitmapFonts/desyrel.png', 'assets/fonts/bitmapFonts/desyrel.xml');
    this.game.load.bitmapFont('stack', 'assets/fonts/bitmapFonts/shortStack.png', 'assets/fonts/bitmapFonts/shortStack.xml');
  };
  BitmaptextWithPhysicsUpdating.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.text1 = this.game.add.bitmapText(200, 100, 'desyrel', 'BitmapText', 64);
    this.text2 = this.game.add.bitmapText(400, 400, 'stack', 'with Physics', 32);
    enable_2(this.game.physics.arcade, [this.text1, this.text2]);
    this.text1.body.velocity.setTo(200, 200);
    this.text1.body.collideWorldBounds = true;
    this.text1.body.bounce.set(1);
    this.text2.body.velocity.setTo(-100, -100);
    this.text2.body.collideWorldBounds = true;
    this.text2.body.bounce.set(1);
  };
  BitmaptextWithPhysicsUpdating.prototype.update = function () {
    this.game.physics.arcade.collide(this.text1, this.text2, Kotlin.getBoundCallableRefForMemberFunction(this, 'onCollide_ge0c0c$'));
  };
  BitmaptextWithPhysicsUpdating.prototype.onCollide_ge0c0c$ = function (a, b) {
    this.text1.text = this.game.rnd.pick(this.words);
  };
  BitmaptextWithPhysicsUpdating.prototype.render = function () {
  };
  BitmaptextWithPhysicsUpdating.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BitmaptextWithPhysicsUpdating',
    baseClasses: []
  };
  function CenterText() {
    Phaser.State.call(this);
  }
  CenterText.prototype.preload = function () {
    this.game.load.image('bg', 'assets/skies/deepblue.png');
  };
  CenterText.prototype.create = function () {
    this.game.add.image(0, 0, 'bg');
    var bar = this.game.add.graphics();
    bar.beginFill(0, 0.2);
    bar.drawRect(0, 100, 800, 100);
    var style = TextStyle('bold 32px Arial', void 0, void 0, void 0, void 0, void 0, '#fff', void 0, 'center', 'middle');
    this.text = this.game.add.text(0, 0, 'phaser 2.4 text bounds', style);
    this.text.setShadow(3, 3, 'rgba(0,0,0,0.5)', 2);
    this.text.setTextBounds(0, 100, 800, 100);
  };
  CenterText.prototype.render = function () {
  };
  CenterText.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CenterText',
    baseClasses: []
  };
  function CenterTextOnSprite() {
    Phaser.State.call(this);
  }
  CenterTextOnSprite.prototype.preload = function () {
    this.game.load.image('pic', 'assets/pics/fof_background.png');
  };
  function CenterTextOnSprite$create$ObjectLiteral(this$CenterTextOnSprite) {
    this.font = '32px Arial';
    this.fill = '#ff0044';
    this.wordWrap = true;
    this.wordWrapWidth = this$CenterTextOnSprite.sprite.width;
    this.align = 'center';
    this.backgroundColor = '#ffff00';
  }
  CenterTextOnSprite$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  CenterTextOnSprite.prototype.create = function () {
    this.game.stage.backgroundColor = 6118749;
    this.sprite = this.game.add.sprite(200, 200, 'pic');
    this.sprite.inputEnabled = true;
    this.sprite.input.enableDrag();
    var style = new CenterTextOnSprite$create$ObjectLiteral(this);
    this.text = this.game.add.text(0, 0, '- text on a sprite -\ndrag me', style);
    this.text.anchor.set(0.5);
  };
  CenterTextOnSprite.prototype.update = function () {
    this.text.x = floor(Phaser.Math, this.sprite.x + this.sprite.width / 2);
    this.text.y = floor(Phaser.Math, this.sprite.y + this.sprite.height / 2);
  };
  CenterTextOnSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CenterTextOnSprite',
    baseClasses: []
  };
  function CleanText() {
    Phaser.State.call(this);
  }
  CleanText.prototype.preload = function () {
    this.game.load.bitmapFont('desyrel', 'assets/fonts/bitmapFonts/desyrel.png', 'assets/fonts/bitmapFonts/desyrel.xml');
  };
  CleanText.prototype.create = function () {
    var dirtyString = 'The Desyrel\u2122 font doesn"t have\na trademark character\nor a \u20ACEuro sign.\nString.size: ';
    var text1 = this.game.add.bitmapText(100, 64, 'desyrel', dirtyString + dirtyString.length, 32);
  };
  CleanText.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CleanText',
    baseClasses: []
  };
  function ColoredCharacters() {
    Phaser.State.call(this);
  }
  ColoredCharacters.prototype.create = function () {
    var style = TextStyle('65px Arial', void 0, void 0, void 0, void 0, void 0, '#ffffff', 'center');
    var text_0 = this.game.add.text(this.game.world.centerX, this.game.world.centerY, '- phaser -\nwith a sprinkle of\npixi dust', style);
    text_0.anchor.set(0.5);
    text_0.addColor('#ffff00', 16);
    text_0.addColor('#ffffff', 25);
    text_0.addColor('#ff00ff', 28);
    text_0.addColor('#ffffff', 32);
  };
  ColoredCharacters.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ColoredCharacters',
    baseClasses: []
  };
  function DisplayTextWordByWord() {
    Phaser.State.call(this);
    this.content = ['The sky above the port was the color of television, tuned to a dead channel.', "`It's not like I'm using,' Case heard someone say, as he shouldered his way ", "through the crowd around the door of the Chat. `It's like my body's developed", "this massive drug deficiency.' It was a Sprawl voice and a Sprawl joke.", 'The Chatsubo was a bar for professional expatriates you could drink there for', 'a week and never hear two words in Japanese.', '', 'Ratz was tending bar, his prosthetic arm jerking monotonously as he filled a tray', 'of glasses with draft Kirin. He saw Case and smiled, his teeth a webwork of', 'East European steel and brown decay. Case found a place at the bar, between the', "unlikely tan on one of Lonny Zone's whores and the crisp naval uniform of a tall", 'African whose cheekbones were ridged with precise rows of tribal scars. `Wage was', "in here early, with two joeboys,' Ratz said, shoving a draft across the bar with", "his good hand. `Maybe some business with you, Case?'", '', 'Case shrugged. The girl to his right giggled and nudged him.', "The bartender's smile widened. His ugliness was the stuff of legend. In an age of", 'affordable beauty, there was something heraldic about his lack of it. The antique', 'arm whined as he reached for another mug.', '', '', 'From Neuromancer by William Gibson'];
    this.line = Kotlin.kotlin.collections.emptyList();
    this.wordIndex = 0;
    this.lineIndex = 0;
    this.wordDelay = 120;
    this.lineDelay = 400;
  }
  DisplayTextWordByWord.prototype.create = function () {
    this.text = this.game.add.text(32, 32, '', TextStyle('15px Arial', void 0, void 0, void 0, void 0, void 0, '#19de65'));
    this.nextLine();
  };
  DisplayTextWordByWord.prototype.nextLine = function () {
    if (this.lineIndex === this.content.length) {
      return;
    }
    this.line = split(this.content[this.lineIndex], [' ']);
    this.wordIndex = 0;
    this.game.time.events.repeat(this.wordDelay, this.line.size, Kotlin.getBoundCallableRefForMemberFunction(this, 'nextWord'), this);
    this.lineIndex++;
  };
  DisplayTextWordByWord.prototype.nextWord = function () {
    var tmp$ = this.text;
    var $receiver = this.text.text;
    var str = this.line.get_za3lpa$(this.wordIndex) + ' ';
    tmp$.text = $receiver.concat(str);
    this.wordIndex++;
    if (this.wordIndex === this.line.size) {
      this.text.text = this.text.text.concat('\n');
      this.game.time.events.add(this.lineDelay, Kotlin.getBoundCallableRefForMemberFunction(this, 'nextLine'), this);
    }
  };
  DisplayTextWordByWord.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DisplayTextWordByWord',
    baseClasses: []
  };
  function DynamicTextShadow() {
    Phaser.State.call(this);
  }
  DynamicTextShadow.prototype.create = function () {
    this.game.stage.setBackgroundColor(16512725);
    this.text = this.game.add.text(this.game.world.centerX, 250, '  dynamic shadows  ');
    this.text.anchor.set(0.5);
    this.text.align = 'center';
    this.text.font = 'Arial Black';
    this.text.fontSize = 70;
    this.text.fontWeight = 'bold';
    this.text.fill = '#ec008c';
    this.text.setShadow(0, 0, 'rgba(0, 0, 0, 0.5)', 0);
  };
  DynamicTextShadow.prototype.update = function () {
    var offset = this.moveToXY_jndk2s$(this.game.input.activePointer, this.text.x, this.text.y, 8.0);
    this.text.setShadow(offset.x, offset.y, 'rgba(0, 0, 0, 0.5)', this.distanceToPointer_8pwlqj$(this.text, this.game.input.activePointer) / 30);
  };
  DynamicTextShadow.prototype.distanceToPointer_8pwlqj$ = function (displayObject, pointer) {
    var _dx = displayObject.x - pointer.x;
    var _dy = displayObject.y - pointer.y;
    return sqrt(Phaser.Math, _dx * _dx + _dy * _dy);
  };
  function DynamicTextShadow$moveToXY$ObjectLiteral(closure$x, closure$y) {
    this.x = closure$x.v;
    this.y = closure$y.v;
  }
  DynamicTextShadow$moveToXY$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  DynamicTextShadow.prototype.moveToXY_jndk2s$ = function (displayObject, x, y, speed) {
    var _angle = atan2(Phaser.Math, y - displayObject.y, x - displayObject.x);
    var x_0 = {v: cos(Phaser.Math, _angle) * speed};
    var y_0 = {v: sin(Phaser.Math, _angle) * speed};
    return new DynamicTextShadow$moveToXY$ObjectLiteral(x_0, y_0);
  };
  DynamicTextShadow.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DynamicTextShadow',
    baseClasses: []
  };
  function HelloArial() {
    Phaser.State.call(this);
  }
  HelloArial.prototype.create = function () {
    var style = TextStyle('65px Arial', void 0, void 0, void 0, void 0, void 0, '#ff0044', 'center');
    var text_0 = this.game.add.text(this.game.world.centerX, this.game.world.centerY, '- phaser -\nwith a sprinkle of\npixi dust', style);
    text_0.anchor.set(0.5);
  };
  HelloArial.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'HelloArial',
    baseClasses: []
  };
  function KernOfDuty() {
    Phaser.State.call(this);
    this.content = [' ', 'photon storm presents', 'a phaser production', ' ', 'Kern of Duty', ' ', 'directed by rich davey', 'rendering by mat groves', '    ', '03:45, November 4th, 2014', 'somewhere in the north pacific', 'mission control bravo ...'];
    this.index = 0;
    this.line = '';
  }
  KernOfDuty.prototype.preload = function () {
    this.game.load.image('cod', 'assets/pics/cod.jpg');
  };
  KernOfDuty.prototype.create = function () {
    this.game.add.sprite(0, 0, 'cod');
    this.text = this.game.add.text(32, 380, '', TextStyle('30pt Courier', void 0, void 0, void 0, void 0, void 0, '#19cb65', void 0, void 0, void 0, '#119f4e', 2));
    this.nextLine();
  };
  KernOfDuty.prototype.updateLine = function () {
    if (this.line.length < this.content[this.index].length) {
      var tmp$ = this.content[this.index];
      var endIndex = this.line.length + 1;
      this.line = tmp$.substring(0, endIndex);
      this.text.setText(this.line);
    }
     else {
      this.game.time.events.add(Phaser.Timer.SECOND * 2, Kotlin.getBoundCallableRefForMemberFunction(this, 'nextLine'), this);
    }
  };
  KernOfDuty.prototype.nextLine = function () {
    this.index++;
    if (this.index < this.content.length) {
      this.line = '';
      this.game.time.events.repeat(80, this.content[this.index].length + 1, Kotlin.getBoundCallableRefForMemberFunction(this, 'updateLine'), this);
    }
  };
  KernOfDuty.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'KernOfDuty',
    baseClasses: []
  };
  function Littera() {
    Phaser.State.call(this);
  }
  Littera.prototype.preload = function () {
    this.game.load.bitmapFont('shortStack', 'assets/fonts/bitmapFonts/shortStack.png', 'assets/fonts/bitmapFonts/shortStack.fnt');
  };
  Littera.prototype.create = function () {
    this.game.add.bitmapText(32, 32, 'shortStack', 'This font was generated using the\nfree Littera web site\n\nhttp://kvazars.com/littera/', 32);
  };
  Littera.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Littera',
    baseClasses: []
  };
  function RemoveText() {
    Phaser.State.call(this);
  }
  function RemoveText$create$ObjectLiteral() {
    this.font = '65px Arial';
    this.fill = '#ff0044';
    this.align = 'center';
  }
  RemoveText$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  RemoveText.prototype.create = function () {
    this.text = this.game.add.text(this.game.world.centerX, this.game.world.centerY, '- phaser -\nclick to remove', new RemoveText$create$ObjectLiteral());
    this.text.anchor.setTo(0.5, 0.5);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'removeText'), this);
  };
  RemoveText.prototype.removeText = function () {
    destroy(this.text);
  };
  RemoveText.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RemoveText',
    baseClasses: []
  };
  function RetroFont1() {
    Phaser.State.call(this);
  }
  RetroFont1.prototype.preload = function () {
    this.game.load.image('knightHawks', 'assets/fonts/retroFonts/KNIGHT3.png');
  };
  RetroFont1.prototype.create = function () {
    var tmp$;
    this.font = this.game.add.retroFont('knightHawks', 31, 25, Phaser.RetroFont.TEXT_SET6, 10, 1, 1);
    tmp$ = 19 - 1;
    for (var c = 1; c <= tmp$; c++) {
      var i = this.game.add.image(this.game.world.centerX, 6 + c * 32, this.font);
      i.tint = random(Phaser.Math) * 16777215;
      i.anchor.set(0.5, 1);
    }
  };
  RetroFont1.prototype.update = function () {
    this.font.text = 'phaser x: ' + this.game.input.x + ' y: ' + this.game.input.y;
  };
  RetroFont1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RetroFont1',
    baseClasses: []
  };
  function RetroFont2() {
    Phaser.State.call(this);
  }
  RetroFont2.prototype.preload = function () {
    this.game.load.image('goldFont', 'assets/fonts/retroFonts/gold_font.png');
    this.game.load.image('bluePink', 'assets/fonts/retroFonts/bluepink_font.png');
    this.game.load.image('forgotten', 'assets/pics/forgotten_worlds.png');
  };
  RetroFont2.prototype.create = function () {
    this.font1 = this.game.add.retroFont('goldFont', 16, 16, '!     :() ,?.' + Phaser.RetroFont.TEXT_SET10, 20, 0, 0);
    this.font1.text = 'phaser brings you retro style bitmap fonts';
    this.image1 = this.game.add.image(this.game.world.centerX, 48, this.font1);
    this.image1.anchor.set(0.5);
    this.font2 = this.game.add.retroFont('bluePink', 32, 32, Phaser.RetroFont.TEXT_SET2, 10);
    this.font2.setText('phaser 2\nin the house', true, 0, 8, Phaser.RetroFont.ALIGN_CENTER);
    this.image2 = this.game.add.image(this.game.world.centerX, 220, this.font2);
    this.image2.anchor.set(0.5);
    this.game.add.image(0, this.game.height - 274, 'forgotten');
    this.game.time.events.loop(Phaser.Timer.SECOND * 2, Kotlin.getBoundCallableRefForMemberFunction(this, 'change'), this);
  };
  RetroFont2.prototype.change = function () {
    this.image2.tint = random(Phaser.Math) * 16777215;
  };
  RetroFont2.prototype.update = function () {
    this.image2.rotation = this.image2.rotation + 2 * this.game.time.physicsElapsed;
  };
  RetroFont2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RetroFont2',
    baseClasses: []
  };
  function SetPropertiesAfterCreation() {
    Phaser.State.call(this);
  }
  SetPropertiesAfterCreation.prototype.preload = function () {
    this.game.load.bitmapFont('desyrel', 'assets/fonts/bitmapFonts/desyrel.png', 'assets/fonts/bitmapFonts/desyrel.xml');
  };
  SetPropertiesAfterCreation.prototype.create = function () {
    this.text = this.game.add.bitmapText(0, 100, 'desyrel', "I'm growing", 64);
  };
  SetPropertiesAfterCreation.prototype.update = function () {
    if (this.text.fontSize < 250) {
      this.text.fontSize = this.text.fontSize + 1;
    }
  };
  SetPropertiesAfterCreation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SetPropertiesAfterCreation',
    baseClasses: []
  };
  function TextBounds() {
    Phaser.State.call(this);
    this.ipsum = 'Click to change alignment\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Quid ergo aliud intellegetur nisi uti ne quae pars naturae neglegatur?\n\nSi longus, levis Ita relinquet duas, de quibus etiam atque etiam consideret. Optime, inquam. Sed quanta sit alias, nunc tantum possitne esse tanta.\n\nQuid, si etiam iucunda memoria est praeteritorum malorum?';
    this.align = [new TextBounds$align$ObjectLiteral(), new TextBounds$align$ObjectLiteral_0(), new TextBounds$align$ObjectLiteral_1(), new TextBounds$align$ObjectLiteral_2(), new TextBounds$align$ObjectLiteral_3(), new TextBounds$align$ObjectLiteral_4(), new TextBounds$align$ObjectLiteral_5(), new TextBounds$align$ObjectLiteral_6(), new TextBounds$align$ObjectLiteral_7()];
    this.i = 0;
  }
  TextBounds.prototype.preload = function () {
    this.game.load.image('bg', 'assets/skies/deepblue.png');
  };
  TextBounds.prototype.create = function () {
    this.game.add.image(0, 0, 'bg');
    var style = TextStyle('16px Arial', void 0, void 0, void 0, void 0, void 0, '#fff', 'left', 'left', 'top', void 0, void 0, true, 300);
    this.text = this.game.add.text(0, 0, this.ipsum, style);
    this.text.setTextBounds(16, 16, 768, 568);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'changeAlign'), this);
  };
  TextBounds.prototype.changeAlign = function () {
    this.i++;
    if (this.i === this.align.length) {
      this.i = 0;
    }
    this.text.align = this.align[this.i].a;
    this.text.boundsAlignH = this.align[this.i].h;
    this.text.boundsAlignV = this.align[this.i].v;
  };
  TextBounds.prototype.render = function () {
  };
  function TextBounds$align$ObjectLiteral() {
    this.h = 'left';
    this.v = 'top';
    this.a = 'left';
  }
  TextBounds$align$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TextBounds$align$ObjectLiteral_0() {
    this.h = 'center';
    this.v = 'top';
    this.a = 'center';
  }
  TextBounds$align$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TextBounds$align$ObjectLiteral_1() {
    this.h = 'right';
    this.v = 'top';
    this.a = 'right';
  }
  TextBounds$align$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TextBounds$align$ObjectLiteral_2() {
    this.h = 'left';
    this.v = 'middle';
    this.a = 'left';
  }
  TextBounds$align$ObjectLiteral_2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TextBounds$align$ObjectLiteral_3() {
    this.h = 'center';
    this.v = 'middle';
    this.a = 'center';
  }
  TextBounds$align$ObjectLiteral_3.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TextBounds$align$ObjectLiteral_4() {
    this.h = 'right';
    this.v = 'middle';
    this.a = 'right';
  }
  TextBounds$align$ObjectLiteral_4.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TextBounds$align$ObjectLiteral_5() {
    this.h = 'left';
    this.v = 'bottom';
    this.a = 'left';
  }
  TextBounds$align$ObjectLiteral_5.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TextBounds$align$ObjectLiteral_6() {
    this.h = 'center';
    this.v = 'bottom';
    this.a = 'center';
  }
  TextBounds$align$ObjectLiteral_6.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TextBounds$align$ObjectLiteral_7() {
    this.h = 'right';
    this.v = 'bottom';
    this.a = 'right';
  }
  TextBounds$align$ObjectLiteral_7.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TextBounds.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TextBounds',
    baseClasses: []
  };
  function TextEvents() {
    Phaser.State.call(this);
    this.clicks = 0;
  }
  function TextEvents$create$ObjectLiteral() {
    this.font = '65px Arial';
    this.fill = '#ff0044';
    this.align = 'center';
  }
  TextEvents$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TextEvents.prototype.create = function () {
    var text_0 = this.game.add.text(this.game.world.centerX, this.game.world.centerY, 'click and drag me', new TextEvents$create$ObjectLiteral());
    text_0.anchor.set(0.5);
    text_0.inputEnabled = true;
    text_0.input.enableDrag();
    text_0.events.onInputOver.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'over_okw7gk$'), this);
    text_0.events.onInputOut.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'out_okw7gk$'), this);
    text_0.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'down_okw7gk$'), this);
    text_0.events.onInputUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'up_okw7gk$'), this);
  };
  TextEvents.prototype.over_okw7gk$ = function (item) {
    var tmp$;
    var item_0 = Kotlin.isType(tmp$ = item, Phaser.Text) ? tmp$ : Kotlin.throwCCE();
    item_0.fill = '#ffff44';
    item_0.text = 'clicked ' + this.clicks + ' times';
  };
  TextEvents.prototype.out_okw7gk$ = function (item) {
    var tmp$;
    var item_0 = Kotlin.isType(tmp$ = item, Phaser.Text) ? tmp$ : Kotlin.throwCCE();
    item_0.fill = '#ff0044';
    item_0.text = 'click and drag me';
  };
  TextEvents.prototype.down_okw7gk$ = function (item) {
    var tmp$;
    var item_0 = Kotlin.isType(tmp$ = item, Phaser.Text) ? tmp$ : Kotlin.throwCCE();
    this.clicks++;
    item_0.text = 'clicked ' + this.clicks + ' times';
  };
  TextEvents.prototype.up_okw7gk$ = function (item) {
    var tmp$;
    var item_0 = Kotlin.isType(tmp$ = item, Phaser.Text) ? tmp$ : Kotlin.throwCCE();
    item_0.text = 'thanks for clicking!';
  };
  TextEvents.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TextEvents',
    baseClasses: []
  };
  function TextGradient() {
    Phaser.State.call(this);
  }
  TextGradient.prototype.create = function () {
    this.text = this.game.add.text(this.game.world.centerX, this.game.world.centerY, '- phaser gradient text -');
    this.text.anchor.set(0.5);
    this.text.align = 'center';
    this.text.font = 'Arial';
    this.text.fontWeight = 'bold';
    this.text.fontSize = 70;
    var grd = this.text.context.createLinearGradient(0.0, 0.0, 0.0, this.text.height);
    grd.addColorStop(0.0, '#8ED6FF');
    grd.addColorStop(1.0, '#004CB3');
    this.text.fill = grd;
  };
  TextGradient.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TextGradient',
    baseClasses: []
  };
  function TextLineSpacing() {
    Phaser.State.call(this);
  }
  function TextLineSpacing$create$ObjectLiteral() {
    this.font = '32px Arial';
    this.fill = '#ffffff';
    this.backgroundColor = 'rgba(0;  var 255;  var 0;  var 0.25)';
  }
  TextLineSpacing$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TextLineSpacing$create$ObjectLiteral_0() {
    this.font = '32px Arial';
    this.fill = '#ffffff';
    this.backgroundColor = 'rgba(0;  var 255;  var 0;  var 0.25)';
  }
  TextLineSpacing$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TextLineSpacing.prototype.create = function () {
    this.game.stage.backgroundColor = '#5d5d5d';
    var haiku = 'Turtles and mushrooms\nYou are in the wrong castle\nFireball mustache';
    var text_0 = this.game.add.text(100, 64, haiku, new TextLineSpacing$create$ObjectLiteral());
    text_0.lineSpacing = -20;
    var haiku2 = 'Green hat, Master Sword\nMonsters and chickens beware\nMoney making game';
    var text2 = this.game.add.text(100, 300, haiku2, new TextLineSpacing$create$ObjectLiteral_0());
    text2.lineSpacing = 40;
  };
  TextLineSpacing.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TextLineSpacing',
    baseClasses: []
  };
  function TextReflect() {
    Phaser.State.call(this);
  }
  TextReflect.prototype.create = function () {
    this.game.stage.backgroundColor = 3868512;
    this.text = this.game.add.text(this.game.world.centerX, this.game.world.centerY, '- PHASER -');
    this.text.anchor.set(0.5);
    this.text.align = 'center';
    this.text.font = 'Arial';
    this.text.fontWeight = 'bold';
    this.text.fontSize = 70;
    this.text.fill = '#ffffff';
    this.textReflect = this.game.add.text(this.game.world.centerX, this.game.world.centerY + 50, '- PHASER -');
    this.textReflect.anchor.set(0.5);
    this.textReflect.align = 'center';
    this.textReflect.scale.y = -1.0;
    this.textReflect.font = 'Arial';
    this.textReflect.fontWeight = 'bold';
    this.textReflect.fontSize = 70;
    var grd = this.textReflect.context.createLinearGradient(0.0, 0.0, 0.0, this.text.canvas.height);
    grd.addColorStop(0.0, 'rgba(255,255,255,0)');
    grd.addColorStop(1.0, 'rgba(255,255,255,0.08)');
    this.textReflect.fill = grd;
  };
  TextReflect.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TextReflect',
    baseClasses: []
  };
  function TextShadowStroke() {
    Phaser.State.call(this);
  }
  TextShadowStroke.prototype.preload = function () {
    this.game.load.image('lulu', 'assets/pics/shocktroopers_lulu2.png');
  };
  function TextShadowStroke$create$ObjectLiteral() {
    this.font = '74px Arial Black';
    this.fill = '#c51b7d';
  }
  TextShadowStroke$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TextShadowStroke$create$ObjectLiteral_0() {
    this.font = '74px Arial Black';
    this.fill = '#c51b7d';
  }
  TextShadowStroke$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TextShadowStroke$create$ObjectLiteral_1() {
    this.font = '74px Arial Black';
    this.fill = '#c51b7d';
  }
  TextShadowStroke$create$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TextShadowStroke$create$ObjectLiteral_2() {
    this.font = '74px Arial Black';
    this.fill = '#c51b7d';
  }
  TextShadowStroke$create$ObjectLiteral_2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TextShadowStroke.prototype.create = function () {
    this.game.stage.backgroundColor = 12434877;
    this.game.add.image(660, 412, 'lulu');
    var text1 = this.game.add.text(20, 50, 'Shadow Stroke', new TextShadowStroke$create$ObjectLiteral());
    text1.stroke = '#de77ae';
    text1.strokeThickness = 16;
    text1.setShadow(2, 2, '#333333', 2, true, false);
    var text2 = this.game.add.text(20, 180, 'Shadow Fill', new TextShadowStroke$create$ObjectLiteral_0());
    text2.stroke = '#de77ae';
    text2.strokeThickness = 16;
    text2.setShadow(2, 2, '#333333', 2, false, true);
    var text3 = this.game.add.text(20, 310, 'Shadow Both', new TextShadowStroke$create$ObjectLiteral_1());
    text3.stroke = '#de77ae';
    text3.strokeThickness = 16;
    text3.setShadow(2, 2, '#333333', 2, true, true);
    var text4 = this.game.add.text(20, 440, 'Shadow None', new TextShadowStroke$create$ObjectLiteral_2());
    text4.stroke = '#de77ae';
    text4.strokeThickness = 16;
    text4.setShadow(2, 2, '#333333', 2, false, false);
  };
  TextShadowStroke.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TextShadowStroke',
    baseClasses: []
  };
  function TextStroke() {
    Phaser.State.call(this);
  }
  TextStroke.prototype.create = function () {
    this.game.stage.setBackgroundColor(2960685);
    this.text = this.game.add.text(this.game.world.centerX, this.game.world.centerY, '- phaser text stroke -');
    this.text.anchor.set(0.5);
    this.text.align = 'center';
    this.text.font = 'Arial Black';
    this.text.fontSize = 50;
    this.text.fontWeight = 'bold';
    this.text.stroke = '#000000';
    this.text.strokeThickness = 6;
    this.text.fill = '#43d637';
  };
  TextStroke.prototype.update = function () {
  };
  TextStroke.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TextStroke',
    baseClasses: []
  };
  function TextStrokeWithColor() {
    Phaser.State.call(this);
  }
  TextStrokeWithColor.prototype.create = function () {
    this.game.stage.setBackgroundColor(2960685);
    this.text = this.game.add.text(this.game.world.centerX, this.game.world.centerY, '- phaser text stroke -');
    this.text.anchor.set(0.5);
    this.text.align = 'center';
    this.text.font = 'Arial Black';
    this.text.fontSize = 50;
    this.text.fontWeight = 'bold';
    this.text.stroke = '#000000';
    this.text.strokeThickness = 8;
    this.text.fill = '#43d637';
    this.text.addColor('#ff00ff', 9);
    this.text.addColor('#43d637', 13);
    this.text.addStrokeColor('#ff0000', 13);
    this.text.addStrokeColor('#000000', 20);
  };
  TextStrokeWithColor.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TextStrokeWithColor',
    baseClasses: []
  };
  function TextTabs() {
    Phaser.State.call(this);
  }
  TextTabs.prototype.preload = function () {
    this.game.load.image('bg', 'assets/skies/deepblue.png');
  };
  TextTabs.prototype.create = function () {
    this.game.add.image(0, 0, 'bg');
    var style = TextStyle('20px Courier', void 0, void 0, void 0, void 0, void 0, '#fff', void 0, void 0, void 0, void 0, void 0, void 0, void 0, 132);
    this.text = this.game.add.text(100, 64, 'Armor\tSpells\tDamage\tWeapons', style);
    var text2 = this.game.add.text(100, 120, '100\tFire\t+50\tAxe\n67\tIce\t+23\tStaff', style);
  };
  TextTabs.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TextTabs',
    baseClasses: []
  };
  function TextTabsFromArray() {
    Phaser.State.call(this);
  }
  TextTabsFromArray.prototype.preload = function () {
    this.game.load.image('bg', 'assets/skies/deepblue.png');
  };
  function TextTabsFromArray$create$ObjectLiteral() {
    this.font = '16px Courier';
    this.fill = '#fff';
    this.tabs = [164, 120, 80];
  }
  TextTabsFromArray$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TextTabsFromArray.prototype.create = function () {
    this.game.add.image(0, 0, 'bg');
    var style = new TextTabsFromArray$create$ObjectLiteral();
    var headings = ['Name', 'Damage', 'Speed', 'Notes'];
    this.text = this.game.add.text(32, 64, '', style);
    this.text.parseList(headings);
    var swords = [['Knife', '1d3', '1', ''], ['Dagger', '1d4', '1', 'May be thrown'], ['Rapier', '1d6', '2', 'Max strength damage bonus +1'], ['Sabre', '1d6', '3', 'Max strength damage bonus +3'], ['Cutlass', '1d6', '5', ''], ['Scimitar', '2d4', '4', ''], ['Long Sword', '1d8+1', '6', ''], ['Bastard Sword', '1d10+1', '8', 'Requires 2 hands to use effectively'], ['Great Sword', '1d12+1', '10', 'Must always be used with 2 hands']];
    var text2 = this.game.add.text(32, 120, '', style);
    text2.parseList(swords);
  };
  TextTabsFromArray.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TextTabsFromArray',
    baseClasses: []
  };
  function TextTint() {
    Phaser.State.call(this);
    this.clicks = 0;
  }
  function TextTint$create$ObjectLiteral() {
    this.font = '65px Arial';
    this.fill = '#ffff00';
    this.align = 'center';
  }
  TextTint$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TextTint.prototype.create = function () {
    var text_0 = this.game.add.text(this.game.world.centerX, this.game.world.centerY, 'Click me', new TextTint$create$ObjectLiteral());
    text_0.anchor.set(0.5);
    text_0.inputEnabled = true;
    text_0.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'down_okw7gk$'), this);
  };
  TextTint.prototype.down_okw7gk$ = function (item) {
    var tmp$;
    this.clicks++;
    var item_0 = Kotlin.isType(tmp$ = item, Phaser.Text) ? tmp$ : Kotlin.throwCCE();
    item_0.text = 'clicked ' + this.clicks + ' times';
    item_0.tint = Kotlin.equals(item_0.tint, 16777215) ? 16711680 : 16777215;
  };
  TextTint.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TextTint',
    baseClasses: []
  };
  function TextWithPhysics() {
    Phaser.State.call(this);
  }
  function TextWithPhysics$create$ObjectLiteral() {
    this.font = '62px Arial Black';
    this.fill = '#c51b7d';
  }
  TextWithPhysics$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TextWithPhysics$create$ObjectLiteral_0() {
    this.font = '62px Arial Black';
    this.fill = '#c51b7d';
  }
  TextWithPhysics$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TextWithPhysics.prototype.create = function () {
    this.game.stage.backgroundColor = 12434877;
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.text1 = this.game.add.text(20, 50, 'Text Objects', new TextWithPhysics$create$ObjectLiteral());
    this.text1.stroke = '#de77ae';
    this.text1.strokeThickness = 16;
    this.text1.setShadow(2, 2, '#333333', 2, true, false);
    this.text2 = this.game.add.text(200, 300, 'with physics', new TextWithPhysics$create$ObjectLiteral_0());
    this.text2.stroke = '#de77ae';
    this.text2.strokeThickness = 16;
    this.text2.setShadow(2, 2, '#333333', 2, false, true);
    enable_4(this.game.physics.arcade, [this.text1, this.text2]);
    this.text1.body.velocity.setTo(200, 200);
    this.text1.body.collideWorldBounds = true;
    this.text1.body.bounce.set(1);
    this.text2.body.velocity.setTo(-100, -100);
    this.text2.body.collideWorldBounds = true;
    this.text2.body.bounce.set(1);
  };
  TextWithPhysics.prototype.update = function () {
    this.game.physics.arcade.collide(this.text1, this.text2);
  };
  TextWithPhysics.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TextWithPhysics',
    baseClasses: []
  };
  function UpdateText() {
    Phaser.State.call(this);
    this.count = 0;
  }
  UpdateText.prototype.create = function () {
    this.count = 0;
    this.text = this.game.add.text(this.game.world.centerX, this.game.world.centerY, '- You have clicked -\n0 times !', TextStyle('65px Arial', void 0, void 0, void 0, void 0, void 0, '#ff0044', 'center'));
    this.text.anchor.setTo(0.5, 0.5);
  };
  UpdateText.prototype.update = function () {
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'updateText'), this);
  };
  UpdateText.prototype.updateText = function () {
    this.count++;
    this.text.setText('- You have clicked -\n' + this.count + ' times !');
  };
  UpdateText.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'UpdateText',
    baseClasses: []
  };
  function WordWrap() {
    Phaser.State.call(this);
  }
  WordWrap.prototype.create = function () {
    this.game.stage.backgroundColor = '#0072bc';
    var style = TextStyle('bold 60pt Arial', void 0, void 0, void 0, void 0, void 0, 'white', 'left', void 0, void 0, void 0, void 0, true, 450);
    var text_0 = this.game.add.text(this.game.world.centerX, this.game.world.centerY, 'phaser with a sprinkle of pixi dust', style);
    text_0.anchor.set(0.5);
  };
  WordWrap.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'WordWrap',
    baseClasses: []
  };
  function CreateFromArray() {
    Phaser.State.call(this);
  }
  CreateFromArray.prototype.preload = function () {
    this.game.load.image('tiles', 'assets/tilemaps/tiles/sci-fi-tiles.png');
  };
  CreateFromArray.prototype.create = function () {
    var tmp$, tmp$_0;
    var data = '';
    tmp$ = 128 - 1;
    for (var y = 0; y <= tmp$; y++) {
      tmp$_0 = 128 - 1;
      for (var x = 0; x <= tmp$_0; x++) {
        data += this.game.rnd.between(0, 20).toString();
        if (x < 127) {
          data += ',';
        }
      }
      if (y < 127) {
        data += '\n';
      }
    }
    this.game.cache.addTilemap('dynamicMap', null, data, Phaser.Tilemap.CSV);
    var map = this.game.add.tilemap('dynamicMap', 16, 16);
    map.addTilesetImage('tiles', 'tiles', 16, 16);
    var layer = map.createLayer(0);
    layer.resizeWorld();
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  CreateFromArray.prototype.update = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7, tmp$_8, tmp$_9, tmp$_10;
    if (this.cursors.left.isDown) {
      tmp$ = this.game.camera;
      tmp$_0 = tmp$.x, tmp$_1 = tmp$_0, tmp$.x = tmp$_0 - 1, tmp$_1;
    }
     else if (this.cursors.right.isDown) {
      tmp$_2 = this.game.camera;
      tmp$_3 = tmp$_2.x, tmp$_4 = tmp$_3, tmp$_2.x = tmp$_3 + 1, tmp$_4;
    }
    if (this.cursors.up.isDown) {
      tmp$_5 = this.game.camera;
      tmp$_6 = tmp$_5.y, tmp$_7 = tmp$_6, tmp$_5.y = tmp$_6 - 1, tmp$_7;
    }
     else if (this.cursors.down.isDown) {
      tmp$_8 = this.game.camera;
      tmp$_9 = tmp$_8.y, tmp$_10 = tmp$_9, tmp$_8.y = tmp$_9 + 1, tmp$_10;
    }
  };
  CreateFromArray.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CreateFromArray',
    baseClasses: []
  };
  function CreateFromObjects() {
    Phaser.State.call(this);
  }
  CreateFromObjects.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/maps/features_test.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('ground_1x1', 'assets/tilemaps/tiles/ground_1x1.png');
    this.game.load.image('walls_1x2', 'assets/tilemaps/tiles/walls_1x2.png');
    this.game.load.image('tiles2', 'assets/tilemaps/tiles/tiles2.png');
    this.game.load.image('phaser', 'assets/sprites/arrow.png');
    this.game.load.spritesheet('coin', 'assets/sprites/coin.png', 32, 32);
  };
  CreateFromObjects.prototype.create = function () {
    this.map = this.game.add.tilemap('map');
    this.map.addTilesetImage('ground_1x1');
    this.map.addTilesetImage('walls_1x2');
    this.map.addTilesetImage('tiles2');
    this.map.setCollisionBetween(1, 12);
    this.layer = this.map.createLayer('Tile Layer 1');
    this.layer.resizeWorld();
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.coins = this.game.add.group();
    this.coins.enableBody = true;
    this.map.createFromObjects('Object Layer 1', 34, 'coin', 0, true, false, this.coins);
    this.coins.callAll('animations.add', 'animations', 'spin', [0, 1, 2, 3, 4, 5], 10, true);
    this.coins.callAll('animations.play', 'animations', 'spin');
    this.sprite = this.game.add.sprite(260, 100, 'phaser');
    this.sprite.anchor.set(0.5);
    enable(this.game.physics.arcade, this.sprite);
    this.sprite.body.setSize(32, 32, 0, 0);
    this.sprite.body.maxAngular = 500;
    this.sprite.body.angularDrag = 50;
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  CreateFromObjects.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite, this.layer);
    this.game.physics.arcade.overlap(this.sprite, this.coins, Kotlin.getBoundCallableRefForMemberFunction(this, 'collectCoin_ge0c0c$'), null, this);
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    this.sprite.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -300;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 300;
    }
    if (this.cursors.up.isDown) {
      this.game.physics.arcade.velocityFromAngle(this.sprite.angle, 300, this.sprite.body.velocity);
    }
  };
  CreateFromObjects.prototype.collectCoin_ge0c0c$ = function (player, coin) {
    coin.kill();
  };
  CreateFromObjects.prototype.render = function () {
    this.game.debug.body(this.sprite);
  };
  CreateFromObjects.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CreateFromObjects',
    baseClasses: []
  };
  function CsvMap() {
    Phaser.State.call(this);
  }
  CsvMap.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/csv/catastrophi_level2.csv', null, Phaser.Tilemap.CSV);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/catastrophi_tiles_16.png');
  };
  CsvMap.prototype.create = function () {
    this.map = this.game.add.tilemap('map', 16, 16);
    this.map.addTilesetImage('tiles');
    this.layer = this.map.createLayer(0);
    this.layer.resizeWorld();
    this.cursors = this.game.input.keyboard.createCursorKeys();
    var help = this.game.add.text(16, 16, 'Arrows to scroll', TextStyle('14px Arial', void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    help.fixedToCamera = true;
  };
  CsvMap.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.game.camera.x = this.game.camera.x - 4;
    }
     else if (this.cursors.right.isDown) {
      this.game.camera.x = this.game.camera.x + 4;
    }
    if (this.cursors.up.isDown) {
      this.game.camera.y = this.game.camera.y - 4;
    }
     else if (this.cursors.down.isDown) {
      this.game.camera.y = this.game.camera.y + 4;
    }
  };
  CsvMap.prototype.render = function () {
  };
  CsvMap.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CsvMap',
    baseClasses: []
  };
  function CsvMapCollide() {
    Phaser.State.call(this);
  }
  CsvMapCollide.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/csv/catastrophi_level2.csv', null, Phaser.Tilemap.CSV);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/catastrophi_tiles_16.png');
    this.game.load.spritesheet('player', 'assets/sprites/spaceman.png', 16, 16);
  };
  CsvMapCollide.prototype.create = function () {
    this.map = this.game.add.tilemap('map', 16, 16);
    this.map.addTilesetImage('tiles');
    this.layer = this.map.createLayer(0);
    this.layer.resizeWorld();
    this.map.setCollisionBetween(54, 83);
    this.player = this.game.add.sprite(48, 48, 'player', 1);
    this.player.animations.add('left', [8, 9], 10, true);
    this.player.animations.add('right', [1, 2], 10, true);
    this.player.animations.add('up', [11, 12, 13], 10, true);
    this.player.animations.add('down', [4, 5, 6], 10, true);
    this.game.physics.enable(this.player, Phaser.Physics.ARCADE);
    this.player.body.setSize(10, 14, 2, 1);
    this.game.camera.follow(this.player);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    var help = this.game.add.text(16, 16, 'Arrows to move', TextStyle('14px Arial', void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    help.fixedToCamera = true;
  };
  CsvMapCollide.prototype.update = function () {
    this.game.physics.arcade.collide(this.player, this.layer);
    this.player.body.velocity.set(0);
    if (this.cursors.left.isDown) {
      this.player.body.velocity.x = -100.0;
      this.player.play('left');
    }
     else if (this.cursors.right.isDown) {
      this.player.body.velocity.x = 100.0;
      this.player.play('right');
    }
     else if (this.cursors.up.isDown) {
      this.player.body.velocity.y = -100.0;
      this.player.play('up');
    }
     else if (this.cursors.down.isDown) {
      this.player.body.velocity.y = 100.0;
      this.player.play('down');
    }
     else {
      this.player.animations.stop();
    }
  };
  CsvMapCollide.prototype.render = function () {
  };
  CsvMapCollide.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CsvMapCollide',
    baseClasses: []
  };
  function CsvMapWithP2() {
    Phaser.State.call(this);
  }
  CsvMapWithP2.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/csv/catastrophi_level2.csv', null, Phaser.Tilemap.CSV);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/catastrophi_tiles_16.png');
    this.game.load.image('player', 'assets/sprites/tinycar.png');
  };
  CsvMapWithP2.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.P2JS);
    this.map = this.game.add.tilemap('map', 16, 16);
    this.map.addTilesetImage('tiles');
    this.layer = this.map.createLayer(0);
    this.layer.resizeWorld();
    this.map.setCollisionBetween(54, 83);
    this.game.physics.p2.convertTilemap(this.map, this.layer);
    this.player = this.game.add.sprite(48, 48, 'player');
    this.game.physics.p2.enable(this.player);
    this.game.physics.p2.setBoundsToWorld(true, true, true, true, false);
    this.game.camera.follow(this.player);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    var help = this.game.add.text(16, 16, 'Arrows to move', TextStyle('14px Arial', void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    help.fixedToCamera = true;
  };
  CsvMapWithP2.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.player.body.rotateLeft(100);
    }
     else if (this.cursors.right.isDown) {
      this.player.body.rotateRight(100);
    }
     else {
      this.player.body.setZeroRotation();
    }
    if (this.cursors.up.isDown) {
      this.player.body.thrust(400);
    }
     else if (this.cursors.down.isDown) {
      this.player.body.reverse(400);
    }
  };
  CsvMapWithP2.prototype.render = function () {
  };
  CsvMapWithP2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CsvMapWithP2',
    baseClasses: []
  };
  function DualView() {
    Phaser.State.call(this);
  }
  DualView.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/maps/dual_view.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('platforms', 'assets/tilemaps/tiles/kenny_platformer_64x64.png');
    this.game.load.image('ground', 'assets/tilemaps/tiles/kenny_ground_64x64.png');
    this.game.load.image('items', 'assets/tilemaps/tiles/kenny_items_64x64.png');
    this.game.load.image('arrow', 'assets/sprites/arrow.png');
  };
  DualView.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#01555f';
    this.map = this.game.add.tilemap('map');
    this.map.enableDebug = true;
    this.map.addTilesetImage('kenny_platformer_64x64', 'platforms');
    this.map.addTilesetImage('kenny_ground_64x64', 'ground');
    this.map.addTilesetImage('kenny_items_64x64', 'items');
    var layerLeft = this.map.createLayer('Left', 400, 600);
    var layerRight = this.map.createLayer('Left', 400, 600);
    layerRight.x = 404.0;
    this.game.world.setBounds(0, 0, 4000, 4000);
    this.sprite = this.game.add.sprite(260, 100, 'arrow');
    this.sprite.anchor.set(0.5);
    this.game.physics.enable(this.sprite);
    this.sprite.body.maxAngular = 500;
    this.sprite.body.angularDrag = 50;
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  DualView.prototype.update = function () {
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    this.sprite.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 200;
    }
    if (this.cursors.up.isDown) {
      this.game.physics.arcade.velocityFromAngle(this.sprite.angle, 400, this.sprite.body.velocity);
    }
  };
  DualView.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DualView',
    baseClasses: []
  };
  function FeaturesTest() {
    Phaser.State.call(this);
  }
  FeaturesTest.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/maps/features_test_rotated.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('ground_1x1', 'assets/tilemaps/tiles/ground_1x1.png');
    this.game.load.image('walls_1x2', 'assets/tilemaps/tiles/walls_1x2.png');
    this.game.load.image('tiles2', 'assets/tilemaps/tiles/tiles2.png');
    this.game.load.image('phaser', 'assets/sprites/arrow.png');
    this.game.load.spritesheet('coin', 'assets/sprites/coin.png', 32, 32);
    this.game.load.image('bunny', 'assets/sprites/bunny.png');
  };
  FeaturesTest.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.map = this.game.add.tilemap('map');
    this.map.addTilesetImage('ground_1x1');
    this.map.addTilesetImage('coin');
    this.map.addTilesetImage('walls_1x2');
    this.map.addTilesetImage('tiles2');
    this.map.setCollisionBetween(1, 12);
    this.map.setTileIndexCallback(26, Kotlin.getBoundCallableRefForMemberFunction(this, 'hitCoin_olg4gb$'), this);
    this.map.setTileLocationCallback(2, 0, 1, 1, Kotlin.getBoundCallableRefForMemberFunction(this, 'hitCoin_olg4gb$'), this);
    this.layer = this.map.createLayer('Tile Layer 1');
    this.layer.resizeWorld();
    this.layer.debugSettings.forceFullRedraw = true;
    var layer3 = this.map.createLayer('Tile Layer 3');
    this.sprite = this.game.add.sprite(260, 100, 'phaser');
    this.sprite.anchor.set(0.5);
    this.game.physics.enable(this.sprite);
    this.sprite.body.setSize(16, 16, 8, 8);
    this.sprite.body.maxAngular = 500;
    this.sprite.body.angularDrag = 50;
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  FeaturesTest.prototype.hitCoin_olg4gb$ = function (sprite, tile) {
    tile.alpha = 0.2;
    this.layer.dirty = true;
    return false;
  };
  FeaturesTest.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite, this.layer);
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    this.sprite.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 200;
    }
    if (this.cursors.up.isDown) {
      this.game.physics.arcade.velocityFromAngle(this.sprite.angle, 200, this.sprite.body.velocity);
    }
  };
  FeaturesTest.prototype.render = function () {
    this.game.debug.body(this.sprite);
  };
  FeaturesTest.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FeaturesTest',
    baseClasses: []
  };
  function FillTiles() {
    Phaser.State.call(this);
  }
  FillTiles.prototype.preload = function () {
    this.game.load.tilemap('desert', 'assets/tilemaps/maps/desert.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/tmw_desert_spacing.png');
    this.game.load.image('car', 'assets/sprites/car90.png');
  };
  FillTiles.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.map = this.game.add.tilemap('desert');
    this.map.addTilesetImage('Desert', 'tiles');
    this.layer = this.map.createLayer('Ground');
    this.layer.resizeWorld();
    this.sprite = this.game.add.sprite(450, 80, 'car');
    this.sprite.anchor.setTo(0.5, 0.5);
    this.game.physics.enable(this.sprite);
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'fillTiles'), this);
  };
  FillTiles.prototype.fillTiles = function () {
    this.map.fill(31, this.layer.getTileX(this.sprite.x), this.layer.getTileY(this.sprite.y), 8, 8);
  };
  FillTiles.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite, this.layer);
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    this.sprite.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 200;
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.velocity.copyFrom(this.game.physics.arcade.velocityFromAngle(this.sprite.angle, 300));
    }
  };
  FillTiles.prototype.render = function () {
    this.game.debug.text('Click to fill tiles', 32, 32, 'rgb(0,0,0)');
    this.game.debug.text('Tile X: ' + this.layer.getTileX(this.sprite.x), 32, 48, 'rgb(0,0,0)');
    this.game.debug.text('Tile Y: ' + this.layer.getTileY(this.sprite.y), 32, 64, 'rgb(0,0,0)');
  };
  FillTiles.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FillTiles',
    baseClasses: []
  };
  function FlippedTiles() {
    Phaser.State.call(this);
  }
  FlippedTiles.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/maps/flipped-tiles.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('items', 'assets/tilemaps/tiles/kenny_items_64x64.png');
    this.game.load.image('arrow', 'assets/sprites/arrow.png');
  };
  FlippedTiles.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#01555f';
    this.map = this.game.add.tilemap('map');
    this.map.addTilesetImage('kenny_items_64x64', 'items');
    var layer1 = this.map.createLayer('Tile Layer 1');
    layer1.resizeWorld();
    this.sprite = this.game.add.sprite(260, 100, 'arrow');
    this.sprite.anchor.set(0.5);
    this.game.physics.enable(this.sprite);
    this.sprite.body.maxAngular = 500;
    this.sprite.body.angularDrag = 50;
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'shake'), this);
  };
  FlippedTiles.prototype.shake = function () {
    this.game.camera.shake(0.05, 500);
  };
  FlippedTiles.prototype.update = function () {
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    this.sprite.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 200;
    }
    if (this.cursors.up.isDown) {
      this.game.physics.arcade.velocityFromAngle(this.sprite.angle, 400, this.sprite.body.velocity);
    }
  };
  FlippedTiles.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FlippedTiles',
    baseClasses: []
  };
  function MapBounce() {
    Phaser.State.call(this);
  }
  MapBounce.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/maps/collision_test.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('ground_1x1', 'assets/tilemaps/tiles/ground_1x1.png');
    this.game.load.image('phaser', 'assets/sprites/phaser-dude.png');
  };
  MapBounce.prototype.create = function () {
    this.map = this.game.add.tilemap('map');
    this.map.addTilesetImage('ground_1x1');
    this.layer = this.map.createLayer('Tile Layer 1');
    this.layer.resizeWorld();
    this.map.setCollisionBetween(1, 12);
    this.sprite = this.game.add.sprite(260, 70, 'phaser');
    this.game.physics.enable(this.sprite);
    this.sprite.body.bounce.set(0.6);
    this.sprite.body.tilePadding.set(32);
    this.game.camera.follow(this.sprite);
    this.game.physics.arcade.gravity.y = 200.0;
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  MapBounce.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite, this.layer);
    if (this.cursors.up.isDown) {
      this.sprite.body.velocity.y = -150.0;
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.velocity.y = 150.0;
    }
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -150.0;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 150.0;
    }
  };
  MapBounce.prototype.render = function () {
    this.game.debug.bodyInfo(this.sprite, 32, 32);
  };
  MapBounce.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MapBounce',
    baseClasses: []
  };
  function MapCollide() {
    Phaser.State.call(this);
  }
  MapCollide.prototype.preload = function () {
    this.game.load.tilemap('mario', 'assets/tilemaps/maps/super_mario.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/super_mario.png');
    this.game.load.image('player', 'assets/sprites/phaser-dude.png');
  };
  MapCollide.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#787878';
    this.map = this.game.add.tilemap('mario');
    this.map.addTilesetImage('SuperMarioBros-World1-1', 'tiles');
    this.map.setCollisionBetween(15, 16);
    this.map.setCollisionBetween(20, 25);
    this.map.setCollisionBetween(27, 29);
    this.map.setCollision(40);
    this.layer = this.map.createLayer('World1');
    this.layer.scale.set(0.5);
    this.layer.resizeWorld();
    this.p = this.game.add.sprite(32, 32, 'player');
    this.game.physics.enable(this.p);
    this.game.physics.arcade.gravity.y = 250.0;
    this.p.body.bounce.y = 0.2;
    this.p.body.collideWorldBounds = true;
    this.game.camera.follow(this.p);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  MapCollide.prototype.update = function () {
    this.game.physics.arcade.collide(this.p, this.layer);
    this.p.body.velocity.x = 0.0;
    if (this.cursors.up.isDown) {
      if (this.p.body.onFloor()) {
        this.p.body.velocity.y = -200.0;
      }
    }
    if (this.cursors.left.isDown) {
      this.p.body.velocity.x = -150.0;
    }
     else if (this.cursors.right.isDown) {
      this.p.body.velocity.x = 150.0;
    }
  };
  MapCollide.prototype.render = function () {
    this.game.debug.bodyInfo(this.p, 32, 320);
  };
  MapCollide.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MapCollide',
    baseClasses: []
  };
  function Mario() {
    Phaser.State.call(this);
  }
  Mario.prototype.preload = function () {
    this.game.load.tilemap('mario', 'assets/tilemaps/maps/super_mario.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/super_mario.png');
    this.game.load.image('player', 'assets/sprites/phaser-dude.png');
  };
  Mario.prototype.create = function () {
    this.game.stage.backgroundColor = '#787878';
    this.map = this.game.add.tilemap('mario');
    this.map.addTilesetImage('SuperMarioBros-World1-1', 'tiles');
    this.layer = this.map.createLayer('World1');
    this.layer.resizeWorld();
    this.layer.wrap = true;
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  Mario.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.game.camera.x = this.game.camera.x - 8;
    }
     else if (this.cursors.right.isDown) {
      this.game.camera.x = this.game.camera.x + 8;
    }
    if (this.cursors.up.isDown) {
      this.game.camera.y = this.game.camera.y - 8;
    }
     else if (this.cursors.down.isDown) {
      this.game.camera.y = this.game.camera.y + 8;
    }
  };
  Mario.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Mario',
    baseClasses: []
  };
  function MultiLayer() {
    Phaser.State.call(this);
  }
  MultiLayer.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/maps/multiple-layers.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('kenny_platformer', 'assets/tilemaps/tiles/kenny_platformer.png');
    this.game.load.image('arrow', 'assets/sprites/arrow.png');
  };
  MultiLayer.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#01555f';
    this.map = this.game.add.tilemap('map');
    this.map.addTilesetImage('kenny_platformer');
    var layer1 = this.map.createLayer('Tile Layer 1');
    layer1.resizeWorld();
    this.map.createLayer('Tile Layer 2');
    this.map.createLayer('Tile Layer 3');
    this.map.createLayer('Tile Layer 4');
    this.sprite = this.game.add.sprite(260, 100, 'arrow');
    this.sprite.anchor.set(0.5);
    this.game.physics.enable(this.sprite);
    this.sprite.body.maxAngular = 500;
    this.sprite.body.angularDrag = 50;
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  MultiLayer.prototype.update = function () {
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    this.sprite.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 200;
    }
    if (this.cursors.up.isDown) {
      this.game.physics.arcade.velocityFromAngle(this.sprite.angle, 400, this.sprite.body.velocity);
    }
  };
  MultiLayer.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MultiLayer',
    baseClasses: []
  };
  function MultiLayerMultiTileset() {
    Phaser.State.call(this);
  }
  MultiLayerMultiTileset.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/maps/multi-layer-multi-tileset.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('platforms', 'assets/tilemaps/tiles/kenny_platformer_64x64.png');
    this.game.load.image('ground', 'assets/tilemaps/tiles/kenny_ground_64x64.png');
    this.game.load.image('items', 'assets/tilemaps/tiles/kenny_items_64x64.png');
    this.game.load.image('arrow', 'assets/sprites/arrow.png');
  };
  MultiLayerMultiTileset.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#01555f';
    this.map = this.game.add.tilemap('map');
    this.map.addTilesetImage('kenny_platformer_64x64', 'platforms');
    this.map.addTilesetImage('kenny_ground_64x64', 'ground');
    this.map.addTilesetImage('kenny_items_64x64', 'items');
    var layer1 = this.map.createLayer('Tile Layer 1');
    var layer2 = this.map.createLayer('Tile Layer 2');
    var layer3 = this.map.createLayer('Tile Layer 3');
    layer1.resizeWorld();
    this.sprite = this.game.add.sprite(260, 100, 'arrow');
    this.sprite.anchor.set(0.5);
    this.game.physics.enable(this.sprite);
    this.sprite.body.maxAngular = 500;
    this.sprite.body.angularDrag = 50;
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  MultiLayerMultiTileset.prototype.update = function () {
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    this.sprite.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 200;
    }
    if (this.cursors.up.isDown) {
      this.game.physics.arcade.velocityFromAngle(this.sprite.angle, 400, this.sprite.body.velocity);
    }
  };
  MultiLayerMultiTileset.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MultiLayerMultiTileset',
    baseClasses: []
  };
  function MultiMapCollide() {
    Phaser.State.call(this);
  }
  MultiMapCollide.prototype.preload = function () {
    this.game.load.tilemap('mario', 'assets/tilemaps/maps/super_mario.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/super_mario.png');
    this.game.load.image('player', 'assets/sprites/phaser-dude.png');
  };
  MultiMapCollide.prototype.create = function () {
    this.game.stage.backgroundColor = '#787878';
    this.map = this.game.add.tilemap('mario');
    this.map.addTilesetImage('SuperMarioBros-World1-1', 'tiles');
    this.map.setCollisionBetween(15, 16);
    this.map.setCollisionBetween(20, 25);
    this.map.setCollisionBetween(27, 29);
    this.map.setCollision(40);
    this.layer = this.map.createLayer('World1', 600);
    this.layer.x = 132.0;
    this.layer.y = 48.0;
    this.layer2 = this.map.createLayer('World1', 600);
    this.layer2.x = 32.0;
    this.layer2.y = 316.0;
    this.game.world.setBounds(0, 0, this.layer.width * this.layer.scale.x, 600);
    this.p = this.game.add.sprite(128, 200, 'player');
    enable(this.game.physics.arcade, this.p);
    this.game.physics.arcade.gravity.y = 300.0;
    this.p.body.collideWorldBounds = true;
    this.game.camera.follow(this.p);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  MultiMapCollide.prototype.update = function () {
    this.game.physics.arcade.collide(this.p, this.layer);
    this.game.physics.arcade.collide(this.p, this.layer2);
    this.p.body.velocity.x = 0.0;
    if (this.cursors.up.isDown && this.p.body.onFloor()) {
      this.p.body.velocity.y = -300.0;
    }
    if (this.cursors.left.isDown) {
      this.p.body.velocity.x = -150.0;
    }
     else if (this.cursors.right.isDown) {
      this.p.body.velocity.x = 150.0;
    }
  };
  MultiMapCollide.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MultiMapCollide',
    baseClasses: []
  };
  function MultiTileset() {
    Phaser.State.call(this);
  }
  MultiTileset.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/maps/multi-tileset.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('platforms', 'assets/tilemaps/tiles/kenny_platformer_64x64.png');
    this.game.load.image('ground', 'assets/tilemaps/tiles/kenny_ground_64x64.png');
    this.game.load.image('items', 'assets/tilemaps/tiles/kenny_items_64x64.png');
    this.game.load.image('arrow', 'assets/sprites/arrow.png');
  };
  MultiTileset.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.stage.backgroundColor = '#01555f';
    this.map = this.game.add.tilemap('map');
    this.map.addTilesetImage('kenny_platformer_64x64', 'platforms');
    this.map.addTilesetImage('kenny_ground_64x64', 'ground');
    this.map.addTilesetImage('kenny_items_64x64', 'items');
    var layer1 = this.map.createLayer('Tile Layer 1');
    layer1.resizeWorld();
    this.sprite = this.game.add.sprite(260, 100, 'arrow');
    this.sprite.anchor.set(0.5);
    this.game.physics.enable(this.sprite);
    this.sprite.body.maxAngular = 500;
    this.sprite.body.angularDrag = 50;
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  MultiTileset.prototype.update = function () {
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    this.sprite.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 200;
    }
    if (this.cursors.up.isDown) {
      this.game.physics.arcade.velocityFromAngle(this.sprite.angle, 400, this.sprite.body.velocity);
    }
  };
  MultiTileset.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MultiTileset',
    baseClasses: []
  };
  function PaintTiles() {
    Phaser.State.call(this);
    this.currentTile = null;
  }
  PaintTiles.prototype.preload = function () {
    this.game.load.tilemap('desert', 'assets/tilemaps/maps/desert.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/tmw_desert_spacing.png');
  };
  PaintTiles.prototype.create = function () {
    this.map = this.game.add.tilemap('desert');
    this.map.addTilesetImage('Desert', 'tiles');
    this.currentTile = this.map.getTile(2, 3);
    this.layer = this.map.createLayer('Ground');
    this.layer.resizeWorld();
    this.marker = this.game.add.graphics();
    this.marker.lineStyle(2, 0, 1);
    this.marker.drawRect(0, 0, 32, 32);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  PaintTiles.prototype.update = function () {
    var tmp$;
    this.marker.x = this.layer.getTileX(this.game.input.activePointer.worldX) * 32.0;
    this.marker.y = this.layer.getTileY(this.game.input.activePointer.worldY) * 32.0;
    if (this.game.input.mousePointer.isDown) {
      if (this.game.input.keyboard.isDown(Phaser.Keyboard.SHIFT)) {
        this.currentTile = this.map.getTile(this.layer.getTileX(this.marker.x), this.layer.getTileY(this.marker.y));
      }
       else {
        if (!Kotlin.equals(this.map.getTile(this.layer.getTileX(this.marker.x), this.layer.getTileY(this.marker.y)), this.currentTile)) {
          this.map.putTile((tmp$ = this.currentTile) != null ? tmp$ : Kotlin.throwNPE(), this.layer.getTileX(this.marker.x), this.layer.getTileY(this.marker.y));
        }
      }
    }
    if (this.cursors.left.isDown) {
      this.game.camera.x = this.game.camera.x - 4;
    }
     else if (this.cursors.right.isDown) {
      this.game.camera.x = this.game.camera.x + 4;
    }
    if (this.cursors.up.isDown) {
      this.game.camera.y = this.game.camera.y - 4;
    }
     else if (this.cursors.down.isDown) {
      this.game.camera.y = this.game.camera.y + 4;
    }
  };
  PaintTiles.prototype.render = function () {
    this.game.debug.text('Left-click to paint. Shift + Left-click to select tile. Arrows to scroll.', 32, 32, '#efefef');
  };
  PaintTiles.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PaintTiles',
    baseClasses: []
  };
  function RandomiseTiles() {
    Phaser.State.call(this);
  }
  RandomiseTiles.prototype.preload = function () {
    this.game.load.tilemap('desert', 'assets/tilemaps/maps/desert.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/tmw_desert_spacing.png');
    this.game.load.image('car', 'assets/sprites/car90.png');
  };
  RandomiseTiles.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.map = this.game.add.tilemap('desert');
    this.map.addTilesetImage('Desert', 'tiles');
    this.layer = this.map.createLayer('Ground');
    this.layer.resizeWorld();
    this.marker = this.game.add.graphics();
    this.marker.lineStyle(2, 49139, 1);
    this.marker.drawRect(0, 0, 32 * 6, 32 * 6);
    this.sprite = this.game.add.sprite(450, 80, 'car');
    this.sprite.anchor.setTo(0.5, 0.5);
    this.game.physics.enable(this.sprite);
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'randomiseTiles'), this);
  };
  RandomiseTiles.prototype.randomiseTiles = function () {
    this.map.random(this.layer.getTileX(this.sprite.x), this.layer.getTileY(this.sprite.y), 6, 6);
  };
  RandomiseTiles.prototype.update = function () {
    this.marker.x = this.layer.getTileX(this.sprite.x) * 32.0;
    this.marker.y = this.layer.getTileY(this.sprite.y) * 32.0;
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    this.sprite.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 200;
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.velocity.copyFrom(this.game.physics.arcade.velocityFromAngle(this.sprite.angle, 300));
    }
  };
  RandomiseTiles.prototype.render = function () {
    this.game.debug.text('Click to randomise tiles', 32, 32, 'rgb(0,0,0)');
    this.game.debug.text('Tile X: ' + this.layer.getTileX(this.sprite.x), 32, 48, 'rgb(0,0,0)');
    this.game.debug.text('Tile Y: ' + this.layer.getTileY(this.sprite.y), 32, 64, 'rgb(0,0,0)');
  };
  RandomiseTiles.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RandomiseTiles',
    baseClasses: []
  };
  function ReplaceTiles() {
    Phaser.State.call(this);
  }
  ReplaceTiles.prototype.preload = function () {
    this.game.load.tilemap('desert', 'assets/tilemaps/maps/desert.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/tmw_desert_spacing.png');
    this.game.load.image('car', 'assets/sprites/car90.png');
  };
  ReplaceTiles.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.map = this.game.add.tilemap('desert');
    this.map.addTilesetImage('Desert', 'tiles');
    this.layer = this.map.createLayer('Ground');
    this.layer.resizeWorld();
    this.sprite = this.game.add.sprite(450, 80, 'car');
    this.sprite.anchor.setTo(0.5, 0.5);
    this.game.physics.enable(this.sprite);
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'replaceTiles'), this);
  };
  ReplaceTiles.prototype.replaceTiles = function () {
    this.map.replace(31, 46);
  };
  ReplaceTiles.prototype.update = function () {
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    this.sprite.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 200;
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.velocity.copyFrom(this.game.physics.arcade.velocityFromAngle(this.sprite.angle, 300));
    }
  };
  ReplaceTiles.prototype.render = function () {
    this.game.debug.text('Click to replace tiles', 32, 32, 'rgb(0,0,0)');
    this.game.debug.text('Tile X: ' + this.layer.getTileX(this.sprite.x), 32, 48, 'rgb(0,0,0)');
    this.game.debug.text('Tile Y: ' + this.layer.getTileY(this.sprite.y), 32, 64, 'rgb(0,0,0)');
  };
  ReplaceTiles.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ReplaceTiles',
    baseClasses: []
  };
  function ResizeMap() {
    Phaser.State.call(this);
  }
  ResizeMap.prototype.preload = function () {
    this.game.load.tilemap('level3', 'assets/tilemaps/maps/cybernoid.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/cybernoid.png', 16, 16);
  };
  ResizeMap.prototype.create = function () {
    this.map = this.game.add.tilemap('level3');
    this.map.addTilesetImage('CybernoidMap3BG_bank.png', 'tiles');
    this.layer = this.map.createLayer(0, 400, 200);
    this.layer.scale.set(2);
    this.layer.resizeWorld();
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'resize'), this);
  };
  ResizeMap.prototype.resize = function () {
    if (this.layer.width !== undefined) {
      var w = this.layer.width + 100;
      var h = this.layer.width + 100;
      this.layer.resize(w, h);
    }
     else {
      if (this.layer.width < 800) {
        var w_0 = this.layer.width + 100;
        var h_0 = this.layer.height + 100;
        this.layer.resize(w_0, h_0);
      }
    }
  };
  ResizeMap.prototype.update = function () {
    if (this.cursors.up.isDown) {
      this.game.camera.y = this.game.camera.y - 4;
    }
     else if (this.cursors.down.isDown) {
      this.game.camera.y = this.game.camera.y + 4;
    }
    if (this.cursors.left.isDown) {
      this.game.camera.x = this.game.camera.x - 4;
    }
     else if (this.cursors.right.isDown) {
      this.game.camera.x = this.game.camera.x + 4;
    }
  };
  ResizeMap.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ResizeMap',
    baseClasses: []
  };
  function SciFly() {
    Phaser.State.call(this);
  }
  SciFly.prototype.preload = function () {
    this.game.load.tilemap('level3', 'assets/tilemaps/maps/cybernoid.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/cybernoid.png', 16, 16);
    this.game.load.image('phaser', 'assets/sprites/phaser-ship.png');
    this.game.load.image('chunk', 'assets/sprites/chunk.png');
  };
  SciFly.prototype.create = function () {
    this.map = this.game.add.tilemap('level3');
    this.map.addTilesetImage('CybernoidMap3BG_bank.png', 'tiles');
    this.layer = this.map.createLayer(0);
    this.map.setCollisionByExclusion([7, 32, 35, 36, 47]);
    this.layer.resizeWorld();
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.emitter = this.game.add.emitter(0, 0, 200);
    this.emitter.makeParticles('chunk');
    this.emitter.minRotation = 0;
    this.emitter.maxRotation = 0;
    this.emitter.gravity = 150;
    this.emitter.bounce.setTo(0.5, 0.5);
    this.sprite = this.game.add.sprite(300, 90, 'phaser');
    this.sprite.anchor.set(0.5);
    this.game.physics.enable(this.sprite);
    this.sprite.body.tilePadding.set(32, 32);
    this.game.camera.follow(this.sprite);
  };
  SciFly.prototype.particleBurst = function () {
    this.emitter.x = this.sprite.x;
    this.emitter.y = this.sprite.y;
    this.emitter.start(true, 2000, null, 1);
  };
  SciFly.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite, this.layer);
    this.game.physics.arcade.collide(this.emitter, this.layer);
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    if (this.cursors.up.isDown) {
      this.sprite.body.velocity.y = -200.0;
      this.particleBurst();
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.velocity.y = 200.0;
      this.particleBurst();
    }
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200.0;
      this.sprite.scale.x = -1.0;
      this.particleBurst();
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200.0;
      this.sprite.scale.x = 1.0;
      this.particleBurst();
    }
  };
  SciFly.prototype.render = function () {
  };
  SciFly.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SciFly',
    baseClasses: []
  };
  function ShuffleTiles() {
    Phaser.State.call(this);
  }
  ShuffleTiles.prototype.preload = function () {
    this.game.load.tilemap('desert', 'assets/tilemaps/maps/desert.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/tmw_desert_spacing.png');
    this.game.load.image('car', 'assets/sprites/car90.png');
  };
  ShuffleTiles.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.map = this.game.add.tilemap('desert');
    this.map.addTilesetImage('Desert', 'tiles');
    this.layer = this.map.createLayer('Ground');
    this.layer.resizeWorld();
    this.marker = this.game.add.graphics();
    this.marker.lineStyle(2, 49139, 1);
    this.marker.drawRect(0, 0, 32 * 6, 32 * 6);
    this.sprite = this.game.add.sprite(450, 80, 'car');
    this.sprite.anchor.setTo(0.5, 0.5);
    this.game.physics.enable(this.sprite);
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'randomiseTiles'), this);
  };
  ShuffleTiles.prototype.randomiseTiles = function () {
    this.map.shuffle(this.layer.getTileX(this.sprite.x), this.layer.getTileY(this.sprite.y), 6, 6);
  };
  ShuffleTiles.prototype.update = function () {
    this.marker.x = this.layer.getTileX(this.sprite.x) * 32;
    this.marker.y = this.layer.getTileY(this.sprite.y) * 32;
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    this.sprite.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 200;
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.velocity.copyFrom(this.game.physics.arcade.velocityFromAngle(this.sprite.angle, 300));
    }
  };
  ShuffleTiles.prototype.render = function () {
    this.game.debug.text('Click to randomise tiles', 32, 32, 'rgb(0,0,0)');
    this.game.debug.text('Tile X: ' + this.layer.getTileX(this.sprite.x), 32, 48, 'rgb(0,0,0)');
    this.game.debug.text('Tile Y: ' + this.layer.getTileY(this.sprite.y), 32, 64, 'rgb(0,0,0)');
  };
  ShuffleTiles.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ShuffleTiles',
    baseClasses: []
  };
  function SwapTiles() {
    Phaser.State.call(this);
  }
  SwapTiles.prototype.preload = function () {
    this.game.load.tilemap('desert', 'assets/tilemaps/maps/desert.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/tmw_desert_spacing.png');
    this.game.load.image('car', 'assets/sprites/car90.png');
  };
  SwapTiles.prototype.create = function () {
    this.map = this.game.add.tilemap('desert');
    this.map.addTilesetImage('Desert', 'tiles');
    this.layer = this.map.createLayer('Ground');
    this.layer.resizeWorld();
    this.sprite = this.game.add.sprite(450, 80, 'car');
    this.sprite.anchor.setTo(0.5, 0.5);
    this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'swapTiles'), this);
  };
  SwapTiles.prototype.swapTiles = function () {
    this.map.swap(30, 31);
  };
  SwapTiles.prototype.update = function () {
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    this.sprite.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 200;
    }
    if (this.cursors.up.isDown) {
      this.sprite.body.velocity.copyFrom(this.game.physics.arcade.velocityFromAngle(this.sprite.angle, 300));
    }
  };
  SwapTiles.prototype.render = function () {
    this.game.debug.text('Click to swap tiles', 32, 32, 'rgb(0,0,0)');
    this.game.debug.text('Tile X: ' + this.layer.getTileX(this.sprite.x), 32, 48, 'rgb(0,0,0)');
    this.game.debug.text('Tile Y: ' + this.layer.getTileY(this.sprite.y), 32, 64, 'rgb(0,0,0)');
  };
  SwapTiles.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SwapTiles',
    baseClasses: []
  };
  function TileCallbacks() {
    Phaser.State.call(this);
  }
  TileCallbacks.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/maps/tile_collision_test.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('ground_1x1', 'assets/tilemaps/tiles/ground_1x1.png');
    this.game.load.image('phaser', 'assets/sprites/arrow.png');
    this.game.load.spritesheet('coin', 'assets/sprites/coin.png', 32, 32);
  };
  TileCallbacks.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.map = this.game.add.tilemap('map');
    this.map.addTilesetImage('ground_1x1');
    this.map.addTilesetImage('coin');
    this.map.setCollisionBetween(1, 12);
    this.map.setTileIndexCallback(26, Kotlin.getBoundCallableRefForMemberFunction(this, 'hitCoin_olg4gb$'), this);
    this.map.setTileLocationCallback(2, 0, 1, 1, Kotlin.getBoundCallableRefForMemberFunction(this, 'hitCoin_olg4gb$'), this);
    this.layer = this.map.createLayer('Tile Layer 1');
    this.layer.resizeWorld();
    this.sprite = this.game.add.sprite(260, 100, 'phaser');
    this.sprite.anchor.set(0.5);
    this.game.physics.enable(this.sprite);
    this.sprite.body.setSize(16, 16, 8, 8);
    this.sprite.body.maxAngular = 500;
    this.sprite.body.angularDrag = 50;
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  TileCallbacks.prototype.hitCoin_olg4gb$ = function (sprite, tile) {
    tile.alpha = 0.2;
    this.layer.dirty = true;
    return false;
  };
  TileCallbacks.prototype.update = function () {
    this.game.physics.arcade.collide(this.sprite, this.layer);
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    this.sprite.body.angularVelocity = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 200;
    }
    if (this.cursors.up.isDown) {
      this.game.physics.arcade.velocityFromAngle(this.sprite.angle, 200, this.sprite.body.velocity);
    }
  };
  TileCallbacks.prototype.render = function () {
    this.game.debug.body(this.sprite);
  };
  TileCallbacks.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TileCallbacks',
    baseClasses: []
  };
  function TilemapRayCast() {
    Phaser.State.call(this);
    this.tileHits = [];
    this.plotting = false;
  }
  TilemapRayCast.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/maps/collision_test.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('ground_1x1', 'assets/tilemaps/tiles/ground_1x1.png');
    this.game.load.image('phaser', 'assets/sprites/phaser-dude.png');
  };
  TilemapRayCast.prototype.create = function () {
    this.line = new Phaser.Line();
    this.map = this.game.add.tilemap('map');
    this.map.addTilesetImage('ground_1x1');
    this.layer = this.map.createLayer('Tile Layer 1');
    this.layer.resizeWorld();
    this.map.setCollisionBetween(1, 12);
    this.layer.debug = true;
    this.sprite = this.game.add.sprite(260, 70, 'phaser');
    this.game.physics.enable(this.sprite);
    this.game.camera.follow(this.sprite);
    this.cursors = this.game.input.keyboard.createCursorKeys();
    var help = this.game.add.text(10, 10, 'Arrows to move, click and drag to cast a ray', TextStyle('16px Arial', void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    help.fixedToCamera = true;
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'startLine_pal8wq$'), this);
    this.game.input.onUp.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'raycast_pal8wq$'), this);
  };
  TilemapRayCast.prototype.startLine_pal8wq$ = function (pointer) {
    var tmp$;
    if (this.tileHits.length > 0) {
      tmp$ = this.tileHits.length - 1;
      for (var i = 0; i <= tmp$; i++) {
        this.tileHits[i].debug = false;
      }
      this.layer.dirty = true;
    }
    this.line.start.set(pointer.worldX, pointer.worldY);
    this.plotting = true;
  };
  TilemapRayCast.prototype.raycast_pal8wq$ = function (pointer) {
    var tmp$;
    this.line.end.set(pointer.worldX, pointer.worldY);
    this.tileHits = this.layer.getRayCastTiles(this.line, 4, false, false);
    if (this.tileHits.length > 0) {
      tmp$ = this.tileHits.length - 1;
      for (var i = 0; i <= tmp$; i++) {
        this.tileHits[i].debug = true;
      }
      this.layer.dirty = true;
    }
    this.plotting = false;
  };
  TilemapRayCast.prototype.update = function () {
    if (this.plotting != null) {
      this.line.end.set(this.game.input.activePointer.worldX, this.game.input.activePointer.worldY);
    }
    this.game.physics.arcade.collide(this.sprite, this.layer);
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    if (this.cursors.up.isDown) {
      this.sprite.body.velocity.y = -200.0;
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.velocity.y = 200.0;
    }
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200.0;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200.0;
    }
  };
  TilemapRayCast.prototype.render = function () {
    this.game.debug.geom(this.line);
  };
  TilemapRayCast.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TilemapRayCast',
    baseClasses: []
  };
  function TileProperties() {
    Phaser.State.call(this);
  }
  TileProperties.prototype.preload = function () {
    this.game.load.tilemap('map', 'assets/tilemaps/maps/tile_properties.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/gridtiles.png');
  };
  TileProperties.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.map = this.game.add.tilemap('map');
    this.map.addTilesetImage('tiles');
    this.layer = this.map.createLayer('Tile Layer 1');
    this.layer.resizeWorld();
    this.marker = this.game.add.graphics();
    this.marker.lineStyle(2, 16777215, 1);
    this.marker.drawRect(0, 0, 32, 32);
    this.game.input.addMoveCallback(Kotlin.getBoundCallableRefForMemberFunction(this, 'updateMarker'), this);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'getTileProperties'), this);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  TileProperties.prototype.getTileProperties = function () {
    var tmp$;
    var x = this.layer.getTileX(this.game.input.activePointer.worldX);
    var y = this.layer.getTileY(this.game.input.activePointer.worldY);
    var tile = (tmp$ = this.map.getTile(x, y, this.layer)) != null ? tmp$ : Kotlin.throwNPE();
    tile.properties.wibble = true;
  };
  TileProperties.prototype.updateMarker = function () {
    this.marker.x = this.layer.getTileX(this.game.input.activePointer.worldX) * 32;
    this.marker.y = this.layer.getTileY(this.game.input.activePointer.worldY) * 32;
  };
  TileProperties.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.game.camera.x = this.game.camera.x - 4;
    }
     else if (this.cursors.right.isDown) {
      this.game.camera.x = this.game.camera.x + 4;
    }
    if (this.cursors.up.isDown) {
      this.game.camera.y = this.game.camera.y - 4;
    }
     else if (this.cursors.down.isDown) {
      this.game.camera.y = this.game.camera.y + 4;
    }
  };
  TileProperties.prototype.render = function () {
  };
  TileProperties.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TileProperties',
    baseClasses: []
  };
  function VerticalMap() {
    Phaser.State.call(this);
  }
  VerticalMap.prototype.preload = function () {
    this.game.load.tilemap('commando', 'assets/tilemaps/maps/commando.json', null, Phaser.Tilemap.TILED_JSON);
    this.game.load.image('tiles', 'assets/tilemaps/tiles/commando.png', 32, 32);
    this.game.load.image('phaser', 'assets/sprites/ship.png');
    this.game.load.image('chunk', 'assets/sprites/chunk.png');
  };
  VerticalMap.prototype.create = function () {
    this.map = this.game.add.tilemap('commando');
    this.map.addTilesetImage('CommandoMap1-1BG_bank.png', 'tiles');
    this.layer = this.map.createLayer(0);
    this.layer.resizeWorld();
    this.cursors = this.game.input.keyboard.createCursorKeys();
    this.emitter = this.game.add.emitter(0, 0, 200);
    this.emitter.makeParticles('chunk');
    this.emitter.minRotation = 0;
    this.emitter.maxRotation = 0;
    this.emitter.gravity = 150;
    this.emitter.bounce.setTo(0.5, 0.5);
    this.sprite = this.game.add.sprite(240, 0, 'phaser');
    this.sprite.anchor.set(0.5);
    this.game.physics.enable(this.sprite);
    this.sprite.body.collideWorldBounds = true;
    this.sprite.y = this.game.world.height - this.game.height - 360;
    this.game.camera.follow(this.sprite);
  };
  VerticalMap.prototype.particleBurst = function () {
    this.emitter.x = this.sprite.x;
    this.emitter.y = this.sprite.y;
    this.emitter.start(true, 2000, null, 1);
  };
  VerticalMap.prototype.update = function () {
    this.sprite.body.velocity.x = 0.0;
    this.sprite.body.velocity.y = 0.0;
    if (this.cursors.up.isDown) {
      this.sprite.body.velocity.y = -200.0;
      this.particleBurst();
    }
     else if (this.cursors.down.isDown) {
      this.sprite.body.velocity.y = 200.0;
      this.particleBurst();
    }
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200.0;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200.0;
    }
  };
  VerticalMap.prototype.render = function () {
  };
  VerticalMap.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'VerticalMap',
    baseClasses: []
  };
  function AnimatedTilingSprite() {
    Phaser.State.call(this);
    this.count = 0.0;
  }
  AnimatedTilingSprite.prototype.preload = function () {
    this.game.load.image('disk', 'assets/sprites/p2.jpeg');
  };
  AnimatedTilingSprite.prototype.create = function () {
    this.tilesprite = this.game.add.tileSprite(0, 0, 512, 512, 'disk');
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  AnimatedTilingSprite.prototype.update = function () {
    this.count += 0.005;
    this.tilesprite.tileScale.x = 2 + sin(Phaser.Math, this.count);
    this.tilesprite.tileScale.y = 2 + cos(Phaser.Math, this.count);
    this.tilesprite.tilePosition.x = this.tilesprite.tilePosition.x + 1;
    this.tilesprite.tilePosition.y = this.tilesprite.tilePosition.y + 1;
    if (this.cursors.left.isDown) {
      this.tilesprite.x = this.tilesprite.x - 4;
    }
     else if (this.cursors.right.isDown) {
      this.tilesprite.x = this.tilesprite.x + 4;
    }
    if (this.cursors.up.isDown) {
      this.tilesprite.y = this.tilesprite.y - 4;
    }
     else if (this.cursors.down.isDown) {
      this.tilesprite.y = this.tilesprite.y + 4;
    }
  };
  AnimatedTilingSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AnimatedTilingSprite',
    baseClasses: []
  };
  function CollidingWithTilingSprite() {
    Phaser.State.call(this);
  }
  CollidingWithTilingSprite.prototype.preload = function () {
    this.game.load.image('starfield', 'assets/misc/starfield.jpg');
    this.game.load.image('ball', 'assets/sprites/pangball.png');
  };
  CollidingWithTilingSprite.prototype.create = function () {
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.physics.arcade.gravity.y = 200.0;
    this.ball = this.game.add.sprite(400, 0, 'ball');
    this.tilesprite = this.game.add.tileSprite(300, 450, 200, 100, 'starfield');
    this.game.physics.enable([this.ball, this.tilesprite], Phaser.Physics.ARCADE);
    this.ball.body.collideWorldBounds = true;
    this.ball.body.bounce.set(1);
    this.tilesprite.body.collideWorldBounds = true;
    this.tilesprite.body.immovable = true;
    this.tilesprite.body.allowGravity = false;
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  CollidingWithTilingSprite.prototype.update = function () {
    this.game.physics.arcade.collide(this.ball, this.tilesprite);
    if (this.cursors.left.isDown) {
      this.tilesprite.body.x -= 8;
      this.tilesprite.tilePosition.x = this.tilesprite.tilePosition.x - 8;
    }
     else if (this.cursors.right.isDown) {
      this.tilesprite.body.x += 8;
      this.tilesprite.tilePosition.x = this.tilesprite.tilePosition.x + 8;
    }
    if (this.cursors.up.isDown) {
      this.tilesprite.tilePosition.y = this.tilesprite.tilePosition.y + 8;
    }
     else if (this.cursors.down.isDown) {
      this.tilesprite.tilePosition.y = this.tilesprite.tilePosition.y - 8;
    }
  };
  CollidingWithTilingSprite.prototype.render = function () {
  };
  CollidingWithTilingSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CollidingWithTilingSprite',
    baseClasses: []
  };
  function SpriteSheetTilingSprite() {
    Phaser.State.call(this);
    this.count = 0.0;
  }
  SpriteSheetTilingSprite.prototype.preload = function () {
    this.game.load.image('starfield', 'assets/misc/starfield.jpg');
    this.game.load.spritesheet('mummy', 'assets/sprites/metalslug_mummy37x45.png', 37, 45, 18);
    this.game.load.atlas('seacreatures', 'assets/sprites/seacreatures_json.png', 'assets/sprites/seacreatures_json.json');
  };
  SpriteSheetTilingSprite.prototype.create = function () {
    this.sprite = this.game.add.tileSprite(0, 0, 800, 600, 'mummy');
    this.sprite.animations.add('walk');
    this.sprite.animations.play('walk', 20, true);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  SpriteSheetTilingSprite.prototype.update = function () {
    this.count += 0.005;
    this.sprite.tileScale.x = 2 + sin(Phaser.Math, this.count);
    this.sprite.tileScale.y = 2 + cos(Phaser.Math, this.count);
    this.sprite.tilePosition.x = this.sprite.tilePosition.x + 1;
    this.sprite.tilePosition.y = this.sprite.tilePosition.y + 1;
    if (this.cursors.left.isDown) {
      this.sprite.tilePosition.x = this.sprite.tilePosition.x + 4;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.tilePosition.x = this.sprite.tilePosition.x - 4;
    }
    if (this.cursors.up.isDown) {
      this.sprite.tilePosition.y = this.sprite.tilePosition.y + 4;
    }
     else if (this.cursors.down.isDown) {
      this.sprite.tilePosition.y = this.sprite.tilePosition.y - 4;
    }
  };
  SpriteSheetTilingSprite.prototype.render = function () {
  };
  SpriteSheetTilingSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpriteSheetTilingSprite',
    baseClasses: []
  };
  function TileSpriteFromAnimatedSprite() {
    Phaser.State.call(this);
  }
  TileSpriteFromAnimatedSprite.prototype.preload = function () {
    this.game.load.spritesheet('waters', 'assets/sprites/waters.png', 32, 400, 32);
  };
  TileSpriteFromAnimatedSprite.prototype.create = function () {
    this.water = this.game.add.tileSprite(0, 24 * 16, 128 * 16, 24 * 16, 'waters');
    this.water.animations.add('waves0', [0, 1, 2, 3, 2, 1]);
    this.water.animations.add('waves1', [4, 5, 6, 7, 6, 5]);
    this.water.animations.add('waves2', [8, 9, 10, 11, 10, 9]);
    this.water.animations.add('waves3', [12, 13, 14, 15, 14, 13]);
    this.water.animations.add('waves4', [16, 17, 18, 19, 18, 17]);
    this.water.animations.add('waves5', [20, 21, 22, 23, 22, 21]);
    this.water.animations.add('waves6', [24, 25, 26, 27, 26, 25]);
    this.water.animations.add('waves7', [28, 29, 30, 31, 30, 29]);
    var n = 7;
    this.water.animations.play('waves' + n, 8, true);
  };
  TileSpriteFromAnimatedSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TileSpriteFromAnimatedSprite',
    baseClasses: []
  };
  function TilingAtlasTrim() {
    Phaser.State.call(this);
  }
  TilingAtlasTrim.prototype.preload = function () {
    this.game.load.atlas('test', 'assets/sprites/tstrim.png', 'assets/sprites/tstrim.json');
  };
  TilingAtlasTrim.prototype.create = function () {
    this.game.add.sprite(0, 0, 'test', 'ts-trim');
    this.game.add.tileSprite(100, 0, 500, 600, 'test', 'ts-trim');
  };
  TilingAtlasTrim.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TilingAtlasTrim',
    baseClasses: []
  };
  function TilingSprite() {
    Phaser.State.call(this);
  }
  TilingSprite.prototype.preload = function () {
    this.game.load.image('starfield', 'assets/misc/starfield.jpg');
  };
  TilingSprite.prototype.create = function () {
    this.tilesprite = this.game.add.tileSprite(0, 0, 800, 600, 'starfield');
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  TilingSprite.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.tilesprite.tilePosition.x = this.tilesprite.tilePosition.x + 8;
    }
     else if (this.cursors.right.isDown) {
      this.tilesprite.tilePosition.x = this.tilesprite.tilePosition.x - 8;
    }
    if (this.cursors.up.isDown) {
      this.tilesprite.tilePosition.y = this.tilesprite.tilePosition.y + 8;
    }
     else if (this.cursors.down.isDown) {
      this.tilesprite.tilePosition.y = this.tilesprite.tilePosition.y - 8;
    }
  };
  TilingSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TilingSprite',
    baseClasses: []
  };
  function TilingSpriteAtlas() {
    Phaser.State.call(this);
    this.count = 0.0;
  }
  TilingSpriteAtlas.prototype.preload = function () {
    this.game.load.atlas('seacreatures', 'assets/sprites/seacreatures_json.png', 'assets/sprites/seacreatures_json.json');
  };
  TilingSpriteAtlas.prototype.create = function () {
    this.game.stage.backgroundColor = '#0072bc';
    this.sprite = this.game.add.tileSprite(0, 0, 800, 600, 'seacreatures', 'octopus0002');
  };
  TilingSpriteAtlas.prototype.update = function () {
    this.count += 0.005;
    this.sprite.tileScale.x = 2 + sin(Phaser.Math, this.count);
    this.sprite.tileScale.y = 2 + cos(Phaser.Math, this.count);
    this.sprite.tilePosition.x = this.sprite.tilePosition.x + 1;
    this.sprite.tilePosition.y = this.sprite.tilePosition.y + 1;
  };
  TilingSpriteAtlas.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TilingSpriteAtlas',
    baseClasses: []
  };
  function TilingSpriteAtlas32x32() {
    Phaser.State.call(this);
    this.count = 0.0;
  }
  TilingSpriteAtlas32x32.prototype.preload = function () {
    this.game.load.atlas('pwr2', 'assets/sprites/pwr2.png', 'assets/sprites/pwr2.json');
  };
  TilingSpriteAtlas32x32.prototype.create = function () {
    this.sprite1 = this.game.add.tileSprite(0, 0, 800, 600, 'pwr2', 'mushroom2');
    this.sprite2 = this.game.add.tileSprite(0, 0, 800, 600, 'pwr2', 'hotdog');
  };
  TilingSpriteAtlas32x32.prototype.update = function () {
    this.count += 0.005;
    this.sprite1.tileScale.x = 2 + sin(Phaser.Math, this.count);
    this.sprite1.tileScale.y = 2 + cos(Phaser.Math, this.count);
    this.sprite2.tilePosition.x = this.sprite2.tilePosition.x - sin(Phaser.Math, this.count) * 4;
    this.sprite2.tilePosition.y = this.sprite2.tilePosition.y - cos(Phaser.Math, this.count) * 4;
  };
  TilingSpriteAtlas32x32.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TilingSpriteAtlas32x32',
    baseClasses: []
  };
  function BasicLoopedEvent() {
    Phaser.State.call(this);
    this.counter = 0;
  }
  BasicLoopedEvent.prototype.preload = function () {
    this.game.load.image('ball', 'assets/sprites/pangball.png');
  };
  function BasicLoopedEvent$create$ObjectLiteral() {
    this.font = '64px Arial';
    this.fill = '#ffffff';
    this.align = 'center';
  }
  BasicLoopedEvent$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  BasicLoopedEvent.prototype.create = function () {
    this.game.stage.backgroundColor = '#6688ee';
    this.text = this.game.add.text(this.game.world.centerX, this.game.world.centerY, 'Counter: 0', new BasicLoopedEvent$create$ObjectLiteral());
    this.text.anchor.setTo(0.5, 0.5);
    this.game.time.events.loop(Phaser.Timer.SECOND, Kotlin.getBoundCallableRefForMemberFunction(this, 'updateCounter'), this);
  };
  BasicLoopedEvent.prototype.updateCounter = function () {
    this.counter++;
    this.text.setText('Counter: ' + this.counter);
  };
  BasicLoopedEvent.prototype.render = function () {
    this.game.debug.text('Time until event: ' + this.game.time.events.duration, 32, 32);
    this.game.debug.text('Next tick: ' + this.game.time.events.next, 32, 64);
  };
  BasicLoopedEvent.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BasicLoopedEvent',
    baseClasses: []
  };
  function BasicRepeatEvent() {
    Phaser.State.call(this);
  }
  BasicRepeatEvent.prototype.preload = function () {
    this.game.load.image('ball', 'assets/sprites/pangball.png');
  };
  BasicRepeatEvent.prototype.create = function () {
    this.game.stage.backgroundColor = '#6688ee';
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.physics.arcade.gravity.y = 150.0;
    this.game.time.events.repeat(Phaser.Timer.SECOND * 2, 10, Kotlin.getBoundCallableRefForMemberFunction(this, 'createBall'), this);
  };
  BasicRepeatEvent.prototype.createBall = function () {
    var ball = this.game.add.sprite(this.game.world.randomX, 0, 'ball');
    this.game.physics.enable(ball, Phaser.Physics.ARCADE);
    ball.body.bounce.y = 0.9;
    ball.body.collideWorldBounds = true;
  };
  BasicRepeatEvent.prototype.render = function () {
    this.game.debug.text('Time until event: ' + this.game.time.events.duration, 32, 32);
    this.game.debug.text('Next tick: ' + this.game.time.events.next, 32, 64);
  };
  BasicRepeatEvent.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BasicRepeatEvent',
    baseClasses: []
  };
  function BasicTimedEvent() {
    Phaser.State.call(this);
  }
  BasicTimedEvent.prototype.preload = function () {
    this.game.load.image('bisley', 'assets/pics/alex-bisleys_horsy_5.png');
  };
  BasicTimedEvent.prototype.create = function () {
    this.game.stage.backgroundColor = '#6688ee';
    this.picture = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'bisley');
    this.picture.anchor.setTo(0.5, 0.5);
    this.game.time.events.add(Phaser.Timer.SECOND * 4, Kotlin.getBoundCallableRefForMemberFunction(this, 'fadePicture'), this);
  };
  function BasicTimedEvent$fadePicture$ObjectLiteral() {
    this.alpha = 0;
  }
  BasicTimedEvent$fadePicture$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  BasicTimedEvent.prototype.fadePicture = function () {
    this.game.add.tween(this.picture).to(new BasicTimedEvent$fadePicture$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
  };
  BasicTimedEvent.prototype.render = function () {
    this.game.debug.text('Time until event: ' + this.game.time.events.duration, 32, 32);
  };
  BasicTimedEvent.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BasicTimedEvent',
    baseClasses: []
  };
  function CustomTimer() {
    Phaser.State.call(this);
    this.total = 0;
  }
  CustomTimer.prototype.preload = function () {
    this.game.load.image('picture7', 'assets/pics/slayer-sorry_im_the_beast.png');
  };
  CustomTimer.prototype.create = function () {
    this.game.stage.backgroundColor = '#000';
    this.timer = this.game.time.create(false);
    this.timer.loop(2000, Kotlin.getBoundCallableRefForMemberFunction(this, 'updateCounter'), this);
    this.timer.start();
  };
  CustomTimer.prototype.updateCounter = function () {
    this.total++;
  };
  CustomTimer.prototype.render = function () {
    this.game.debug.text('Time until event: ' + this.timer.duration, 32, 32);
    this.game.debug.text('Loop Count: ' + this.total, 32, 64);
  };
  CustomTimer.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CustomTimer',
    baseClasses: []
  };
  function ElapsedSeconds() {
    Phaser.State.call(this);
  }
  ElapsedSeconds.prototype.preload = function () {
    this.game.load.image('picture7', 'assets/pics/slayer-sorry_im_the_beast.png');
  };
  ElapsedSeconds.prototype.create = function () {
  };
  ElapsedSeconds.prototype.updateCounter = function () {
  };
  ElapsedSeconds.prototype.render = function () {
    this.game.debug.text('Elapsed seconds: ' + this.game.time.totalElapsedSeconds(), 32, 32);
  };
  ElapsedSeconds.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ElapsedSeconds',
    baseClasses: []
  };
  function MultipleTimers() {
    Phaser.State.call(this);
  }
  MultipleTimers.prototype.preload = function () {
    this.game.load.image('picture1', 'assets/pics/cougar_sanity_train.png');
    this.game.load.image('picture2', 'assets/pics/cougar-face_of_nature.png');
    this.game.load.image('picture3', 'assets/pics/destop-rewarding.png');
    this.game.load.image('picture4', 'assets/pics/unknown-the_starwars_pic.png');
  };
  MultipleTimers.prototype.create = function () {
    var pic1 = this.game.add.sprite(0, 200, 'picture1');
    var pic2 = this.game.add.sprite(200, 200, 'picture2');
    var pic3 = this.game.add.sprite(400, 200, 'picture3');
    var pic4 = this.game.add.sprite(600, 200, 'picture4');
    var pics = mutableListOf([pic1, pic2, pic3, pic4]);
    var i = {v: 0};
    var tmp$;
    tmp$ = pics.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      element.scale.set(0.5);
      element.visible = false;
      this.game.time.events.add(1000 + i.v * 500, Kotlin.getBoundCallableRefForMemberFunction(this, 'showPicture_okw7gk$'), this, element);
      i.v++;
    }
  };
  MultipleTimers.prototype.update = function () {
  };
  MultipleTimers.prototype.showPicture_okw7gk$ = function (pic) {
    if (pic.y === 200.0) {
      pic.y = 400.0;
    }
     else {
      pic.y = 200.0;
    }
    pic.visible = true;
    this.game.time.events.add(2000, Kotlin.getBoundCallableRefForMemberFunction(this, 'removePicture_okw7gk$'), this, pic);
  };
  MultipleTimers.prototype.removePicture_okw7gk$ = function (pic) {
    pic.visible = false;
    this.game.time.events.add(2000, Kotlin.getBoundCallableRefForMemberFunction(this, 'showPicture_okw7gk$'), this, pic);
  };
  MultipleTimers.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MultipleTimers',
    baseClasses: []
  };
  function RemoveEvent() {
    Phaser.State.call(this);
    this.counters = mutableListOf([]);
    this.text = mutableListOf([]);
    this.timerEvents = mutableListOf([]);
    this.i = 9;
  }
  function RemoveEvent$create$ObjectLiteral() {
    this.font = '32px Arial';
    this.fill = '#ffffff';
    this.align = 'center';
  }
  RemoveEvent$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  RemoveEvent.prototype.create = function () {
    var tmp$;
    this.game.stage.backgroundColor = '#6688ee';
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.counters.add_za3rmp$(0);
      this.text.add_za3rmp$(this.game.add.text(this.game.world.centerX, 80 + 40 * i, 'Counter ' + i + ' = 0', new RemoveEvent$create$ObjectLiteral()));
      this.text.get_za3lpa$(i).anchor.setTo(0.5, 0);
      this.timerEvents.add_za3rmp$(this.game.time.events.loop(this.game.rnd.integerInRange(250, 1000), Kotlin.getBoundCallableRefForMemberFunction(this, 'updateCounter_za3lpa$'), this, i));
    }
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'removeCounter'), this);
  };
  RemoveEvent.prototype.updateCounter_za3lpa$ = function (idx) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$ = this.counters;
    tmp$_0 = tmp$.get_za3lpa$(idx), tmp$_1 = tmp$_0, tmp$.set_vux3hl$(idx, tmp$_0 + 1), tmp$_1;
    this.text.get_za3lpa$(idx).setText('Counter ' + idx + ' = ' + this.counters.get_za3lpa$(idx));
  };
  RemoveEvent.prototype.removeCounter = function () {
    if (this.i >= 0) {
      this.game.time.events.remove(this.timerEvents.get_za3lpa$(this.i));
      this.text.get_za3lpa$(this.i).style.fill = '#3344aa';
      this.text.get_za3lpa$(this.i).setText('Counter ' + this.i + ' removed');
      this.i--;
    }
  };
  RemoveEvent.prototype.render = function () {
    this.game.debug.text('Queued events: ' + this.game.time.events.length + ' - click to remove', 32, 32);
  };
  RemoveEvent.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'RemoveEvent',
    baseClasses: []
  };
  function TimedSlideshow() {
    Phaser.State.call(this);
    this.current = 3;
  }
  TimedSlideshow.prototype.preload = function () {
    this.game.load.image('picture1', 'assets/pics/cougar_sanity_train.png');
    this.game.load.image('picture2', 'assets/pics/cougar-face_of_nature.png');
    this.game.load.image('picture3', 'assets/pics/destop-rewarding.png');
    this.game.load.image('picture4', 'assets/pics/destop-unknown.png');
    this.game.load.image('picture5', 'assets/pics/questar.png');
    this.game.load.image('picture6', 'assets/pics/seven_seas_andromeda_fairfax.png');
    this.game.load.image('picture7', 'assets/pics/slayer-sorry_im_the_beast.png');
  };
  TimedSlideshow.prototype.create = function () {
    this.game.stage.backgroundColor = '#000';
    this.pictureA = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'picture1');
    this.pictureA.anchor.setTo(0.5, 0.5);
    this.pictureA.scale.setTo(2, 2);
    this.pictureB = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'picture2');
    this.pictureB.anchor.setTo(0.5, 0.5);
    this.pictureB.scale.setTo(2, 2);
    this.pictureB.alpha = 0.0;
    this.timer = this.game.time.create(false);
    this.timer.add(3000, Kotlin.getBoundCallableRefForMemberFunction(this, 'fadePictures'), this);
    this.timer.start();
  };
  function TimedSlideshow$fadePictures$ObjectLiteral() {
    this.alpha = 0;
  }
  TimedSlideshow$fadePictures$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TimedSlideshow$fadePictures$ObjectLiteral_0() {
    this.alpha = 1;
  }
  TimedSlideshow$fadePictures$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TimedSlideshow$fadePictures$ObjectLiteral_1() {
    this.alpha = 1;
  }
  TimedSlideshow$fadePictures$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TimedSlideshow$fadePictures$ObjectLiteral_2() {
    this.alpha = 0;
  }
  TimedSlideshow$fadePictures$ObjectLiteral_2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TimedSlideshow.prototype.fadePictures = function () {
    var tween;
    if (this.pictureA.alpha === 1.0) {
      tween = this.game.add.tween(this.pictureA).to(new TimedSlideshow$fadePictures$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
      this.game.add.tween(this.pictureB).to(new TimedSlideshow$fadePictures$ObjectLiteral_0(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
    }
     else {
      this.game.add.tween(this.pictureA).to(new TimedSlideshow$fadePictures$ObjectLiteral_1(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
      tween = this.game.add.tween(this.pictureB).to(new TimedSlideshow$fadePictures$ObjectLiteral_2(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
    }
    tween.onComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'changePicture'), this);
  };
  TimedSlideshow.prototype.changePicture = function () {
    if (this.pictureA.alpha === 0.0) {
      this.pictureA.loadTexture('picture' + this.current);
    }
     else {
      this.pictureB.loadTexture('picture' + this.current);
    }
    this.current++;
    if (this.current > 7) {
      this.current = 1;
    }
    this.timer.add(3000, Kotlin.getBoundCallableRefForMemberFunction(this, 'fadePictures'), this);
  };
  TimedSlideshow.prototype.render = function () {
    this.game.debug.text('Time until event: ' + this.timer.duration, 10, 20);
  };
  TimedSlideshow.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TimedSlideshow',
    baseClasses: []
  };
  function AlphaText() {
    Phaser.State.call(this);
  }
  AlphaText.prototype.preload = function () {
    this.game.load.image('space', 'assets/misc/starfield.png', 138, 15);
    this.game.load.image('logo', 'assets/sprites/phaser2.png');
  };
  function AlphaText$create$ObjectLiteral() {
    this.alpha = 1;
  }
  AlphaText$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  AlphaText.prototype.create = function () {
    var t = this.game.add.tileSprite(0, 0, 800, 600, 'logo');
    t.alpha = 0.1;
    var style = TextStyle('65px Arial', void 0, void 0, void 0, void 0, void 0, '#ff0044', 'center');
    var text_0 = this.game.add.text(this.game.world.centerX, this.game.world.centerY, '- phaser -\nwith a sprinkle of\npixi dust', style);
    text_0.anchor.set(0.5);
    text_0.alpha = 0.1;
    this.game.add.tween(text_0).to(new AlphaText$create$ObjectLiteral(), 2000, 'Linear', true);
  };
  AlphaText.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AlphaText',
    baseClasses: []
  };
  function Bounce_0() {
    Phaser.State.call(this);
  }
  Bounce_0.prototype.preload = function () {
    this.game.load.image('ball', 'assets/sprites/yellow_ball.png');
  };
  Bounce_0.prototype.create = function () {
    this.ball = this.game.add.sprite(300, 0, 'ball');
    this.startBounceTween();
  };
  function Bounce$startBounceTween$ObjectLiteral(this$Bounce) {
    this.y = this$Bounce.game.world.height - this$Bounce.ball.height;
  }
  Bounce$startBounceTween$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Bounce_0.prototype.startBounceTween = function () {
    this.ball.y = 0.0;
    var bounce = this.game.add.tween(this.ball);
    bounce.to(new Bounce$startBounceTween$ObjectLiteral(this), 1000 + random(Phaser.Math) * 3000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'In'));
    bounce.onComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'startBounceTween'), this);
    bounce.start();
  };
  Bounce_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Bounce',
    baseClasses: []
  };
  function Bubbles() {
    Phaser.State.call(this);
  }
  Bubbles.prototype.preload = function () {
    this.game.load.image('space', 'assets/pics/thalion-rain.png');
    this.game.load.image('ball', 'assets/particles/bubble256.png');
  };
  function Bubbles$create$ObjectLiteral() {
    this.y = -256;
  }
  Bubbles$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Bubbles.prototype.create = function () {
    var tmp$;
    this.bg = this.game.add.tileSprite(0, 0, 800, 600, 'space');
    var delay = 0;
    tmp$ = 40 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var sprite = this.game.add.sprite(-100 + this.game.world.randomX, 600, 'ball');
      sprite.scale.set(this.game.rnd.realInRange(0.1, 0.6));
      var speed = this.game.rnd.between(4000, 6000);
      this.game.add.tween(sprite).to(new Bubbles$create$ObjectLiteral(), speed, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Sinusoidal, 'InOut'), true, delay, 1000, false);
      delay += 200;
    }
  };
  Bubbles.prototype.update = function () {
    this.bg.tilePosition.y = this.bg.tilePosition.y + 0.4;
  };
  Bubbles.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Bubbles',
    baseClasses: []
  };
  function ChainedTweens() {
    Phaser.State.call(this);
  }
  ChainedTweens.prototype.preload = function () {
    this.game.load.image('kirito', 'assets/sprites/kirito_by_vali233.png');
    this.game.load.image('asuna', 'assets/sprites/asuna_by_vali233.png');
  };
  function ChainedTweens$create$ObjectLiteral() {
    this.font = '16px Arial';
    this.fill = '#ffffff';
  }
  ChainedTweens$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function ChainedTweens$create$ObjectLiteral_0() {
    this.font = '16px Arial';
    this.fill = '#ffffff';
  }
  ChainedTweens$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function ChainedTweens$create$ObjectLiteral_1() {
    this.x = 600;
  }
  ChainedTweens$create$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function ChainedTweens$create$ObjectLiteral_2() {
    this.x = 600;
  }
  ChainedTweens$create$ObjectLiteral_2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  ChainedTweens.prototype.create = function () {
    this.game.renderer.renderSession.roundPixels = true;
    this.game.stage.backgroundColor = '#124184';
    this.game.add.text(16, 16, 'Tween Chain Demo', new ChainedTweens$create$ObjectLiteral());
    this.text = this.game.add.text(680, 16, 'Click to Start', new ChainedTweens$create$ObjectLiteral_0());
    var spriteA = this.game.add.sprite(64, 100, 'kirito');
    var spriteB = this.game.add.sprite(64, 300, 'asuna');
    this.tweenA = this.game.add.tween(spriteA).to(new ChainedTweens$create$ObjectLiteral_1(), 2000, 'Quart.easeOut');
    this.tweenB = this.game.add.tween(spriteB).to(new ChainedTweens$create$ObjectLiteral_2(), 2000, 'Quart.easeOut');
    this.tweenA.chain(this.tweenB);
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'start'), this);
  };
  ChainedTweens.prototype.start = function () {
    this.tweenA.start();
    this.text.visible = false;
  };
  ChainedTweens.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ChainedTweens',
    baseClasses: []
  };
  function CombinedTweens() {
    Phaser.State.call(this);
  }
  CombinedTweens.prototype.preload = function () {
    this.game.load.spritesheet('pig', 'assets/sprites/invaderpig.png', 124, 104);
    this.game.load.image('starfield', 'assets/misc/starfield.jpg');
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
  };
  function CombinedTweens$create$ObjectLiteral() {
    this.x = 150;
  }
  CombinedTweens$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  CombinedTweens.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 800, 600, 'starfield');
    this.pig = this.game.add.sprite(-50, 200, 'pig', 1);
    this.pig.scale.setTo(0.5, 0.5);
    this.mushroom = this.game.add.sprite(380, 200, 'mushroom');
    this.mushroom.anchor.setTo(0.5, 0.5);
    this.pigArrives = this.game.add.tween(this.pig);
    this.pigArrives.to(new CombinedTweens$create$ObjectLiteral(), 1000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'));
    this.pigArrives.onComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'firstTween'), this);
    this.pigArrives.start();
  };
  function CombinedTweens$firstTween$ObjectLiteral() {
    this.x = 2;
    this.y = 2;
  }
  CombinedTweens$firstTween$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  CombinedTweens.prototype.firstTween = function () {
    this.s = this.game.add.tween(this.mushroom.scale);
    this.s.to(new CombinedTweens$firstTween$ObjectLiteral(), 1000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'));
    this.s.onComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'theEnd'), this);
    this.s.start();
  };
  function CombinedTweens$theEnd$ObjectLiteral() {
    this.x = -150;
  }
  CombinedTweens$theEnd$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  CombinedTweens.prototype.theEnd = function () {
    var e = this.game.add.tween(this.pig);
    e.to(new CombinedTweens$theEnd$ObjectLiteral(), 1000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'));
    e.start();
  };
  CombinedTweens.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'CombinedTweens',
    baseClasses: []
  };
  function Earthquake() {
    Phaser.State.call(this);
  }
  Earthquake.prototype.preload = function () {
    this.game.load.image('tile', 'assets/sprites/p2.jpeg');
    this.game.load.spritesheet('monster', 'assets/sprites/pixi_monsters.png', 154, 170);
  };
  Earthquake.prototype.create = function () {
    var margin = 50;
    var x = -margin;
    var y = -margin;
    var w = this.game.world.width + margin * 2;
    var h = this.game.world.height + margin * 2;
    this.game.world.setBounds(x, y, w, h);
    this.game.world.camera.position.set(0);
    this.game.add.tileSprite(x, y, w, h, 'tile');
    this.game.add.sprite(100, 100, 'monster', 0);
    this.game.add.sprite(500, 100, 'monster', 0);
    this.game.add.sprite(100, 400, 'monster', 0);
    this.game.add.sprite(500, 400, 'monster', 0);
    this.addQuake();
  };
  function Earthquake$addQuake$ObjectLiteral(this$Earthquake, closure$rumbleOffset) {
    this.x = this$Earthquake.game.camera.x - closure$rumbleOffset.v;
  }
  Earthquake$addQuake$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Earthquake.prototype.addQuake = function () {
    var rumbleOffset = {v: 10};
    var properties_1 = new Earthquake$addQuake$ObjectLiteral(this, rumbleOffset);
    var duration = 100;
    var repeat = 4;
    var ease = Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'InOut');
    var autoStart = false;
    var delay = 1000;
    var yoyo = true;
    var quake = this.game.add.tween(this.game.camera).to(properties_1, duration, ease, autoStart, delay, 4, yoyo);
    quake.onComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'addQuake'));
    quake.start();
  };
  Earthquake.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Earthquake',
    baseClasses: []
  };
  function Easing() {
    Phaser.State.call(this);
  }
  Easing.prototype.preload = function () {
    this.game.load.spritesheet('shadow', 'assets/tests/tween/shadow.png', 138, 15);
    this.game.load.spritesheet('phaser', 'assets/tests/tween/phaser.png', 70, 90);
  };
  function Easing$create$ObjectLiteral() {
    this.x = 1.0;
    this.y = 1.0;
  }
  Easing$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function Easing$create$ObjectLiteral_0() {
    this.y = 245;
  }
  Easing$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Easing.prototype.create = function () {
    var tmp$;
    var item;
    var shadow;
    var tween;
    this.game.stage.backgroundColor = '#ffffff';
    tmp$ = 6 - 1;
    for (var i = 0; i <= tmp$; i++) {
      shadow = this.game.add.sprite(190 + 69 * i, 284, 'shadow');
      shadow.scale.setTo(0.0, 0.0);
      shadow.anchor.setTo(0.5, 0.5);
      this.game.add.tween(shadow.scale).to(new Easing$create$ObjectLiteral(), 2400, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
      item = this.game.add.sprite(190 + 69 * i, -50, 'phaser', i);
      item.anchor.setTo(0.5, 0.5);
      tween = this.game.add.tween(item).to(new Easing$create$ObjectLiteral_0(), 2400, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
    }
  };
  Easing.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Easing',
    baseClasses: []
  };
  function EasingSpritesheets() {
    Phaser.State.call(this);
  }
  EasingSpritesheets.prototype.preload = function () {
    this.game.load.spritesheet('phaser', 'assets/tests/tween/phaser.png', 70, 90);
    this.game.load.image('starfield', 'assets/misc/starfield.jpg');
  };
  function EasingSpritesheets$create$ObjectLiteral() {
    this.y = 240;
  }
  EasingSpritesheets$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  EasingSpritesheets.prototype.create = function () {
    var tmp$;
    var item;
    this.game.add.tileSprite(0, 0, 800, 600, 'starfield');
    tmp$ = 6 - 1;
    for (var i = 0; i <= tmp$; i++) {
      item = this.game.add.sprite(190 + 69 * i, -90, 'phaser', i);
      this.game.add.tween(item).to(new EasingSpritesheets$create$ObjectLiteral(), 2400, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true, 1000 + 400 * i, 0);
    }
  };
  EasingSpritesheets.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'EasingSpritesheets',
    baseClasses: []
  };
  function FadingInASprite() {
    Phaser.State.call(this);
  }
  FadingInASprite.prototype.preload = function () {
    this.game.load.image('space', 'assets/misc/starfield.png', 138, 15);
    this.game.load.image('logo', 'assets/sprites/phaser2.png');
  };
  function FadingInASprite$create$ObjectLiteral() {
    this.alpha = 1;
  }
  FadingInASprite$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  FadingInASprite.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 800, 600, 'space');
    var sprite = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'logo');
    sprite.anchor.setTo(0.5, 0.5);
    sprite.alpha = 0.0;
    this.game.add.tween(sprite).to(new FadingInASprite$create$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true, 0, 1000, true);
  };
  FadingInASprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FadingInASprite',
    baseClasses: []
  };
  function GenerateData() {
    Phaser.State.call(this);
    this.index = 0;
    this.pos = mutableListOf([]);
  }
  GenerateData.prototype.preload = function () {
    this.game.load.image('wasp', 'assets/sprites/wasp.png');
    this.game.load.image('sky', 'assets/skies/cavern1.png');
  };
  function GenerateData$create$ObjectLiteral() {
    this.x = 0;
    this.y = 0;
  }
  GenerateData$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function GenerateData$create$ObjectLiteral_0() {
    this.x = 100;
    this.y = 400;
  }
  GenerateData$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  GenerateData.prototype.create = function () {
    var tmp$;
    this.game.add.image(0, 0, 'sky');
    var tweenData = new GenerateData$create$ObjectLiteral();
    var tween = this.game.make.tween(tweenData).to(new GenerateData$create$ObjectLiteral_0(), 2000, 'Sine.easeInOut');
    tween.yoyo(true);
    this.data = Array.isArray(tmp$ = tween.generateData(60)) ? tmp$ : Kotlin.throwCCE();
    this.bugs = this.game.add.group();
    this.pos.add_za3rmp$(new Phaser.Point(32, 0));
    this.pos.add_za3rmp$(new Phaser.Point(300, 100));
    this.pos.add_za3rmp$(new Phaser.Point(600, 70));
    this.bugs.create(this.pos.get_za3lpa$(0).x, this.pos.get_za3lpa$(0).y, 'wasp');
    this.bugs.create(this.pos.get_za3lpa$(1).x, this.pos.get_za3lpa$(1).y, 'wasp');
    this.bugs.create(this.pos.get_za3lpa$(2).x, this.pos.get_za3lpa$(2).y, 'wasp');
  };
  GenerateData.prototype.update = function () {
    this.bugs.getAt(0).x = this.pos.get_za3lpa$(0).x + this.data[this.index].x;
    this.bugs.getAt(0).y = this.pos.get_za3lpa$(0).y + this.data[this.index].y;
    this.bugs.getAt(1).x = this.pos.get_za3lpa$(1).x + this.data[this.index].x / 2;
    this.bugs.getAt(1).y = this.pos.get_za3lpa$(1).y + this.data[this.index].y;
    this.bugs.getAt(2).x = this.pos.get_za3lpa$(2).x - this.data[this.index].x;
    this.bugs.getAt(2).y = this.pos.get_za3lpa$(2).y + this.data[this.index].y;
    this.index++;
    if (this.index === this.data.length) {
      this.index = 0;
    }
  };
  GenerateData.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'GenerateData',
    baseClasses: []
  };
  function Interpolation() {
    Phaser.State.call(this);
    this.method = 0;
  }
  Interpolation.prototype.preload = function () {
    this.game.load.image('logo', 'assets/sprites/phaser2.png');
  };
  function Interpolation$create$ObjectLiteral(closure$w, closure$h) {
    this.x = [closure$w.v, closure$w.v, 0, 0];
    this.y = [0, closure$h.v, closure$h.v, 0];
  }
  Interpolation$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Interpolation.prototype.create = function () {
    this.logo = this.add.sprite(0, 0, 'logo');
    this.logo.scale.set(0.5);
    var style = TextStyle('48px Arial', void 0, void 0, void 0, void 0, void 0, '#ff0044', 'center');
    this.text = this.game.add.text(this.game.world.centerX, this.game.world.centerY, 'Linear Interpolation', style);
    this.text.anchor.set(0.5);
    var w = {v: this.game.width - this.logo.width};
    var h = {v: this.game.height - this.logo.height};
    this.tween = this.game.add.tween(this.logo).to(new Interpolation$create$ObjectLiteral(w, h), 4000, 'Sine.easeInOut', true, -1, 0);
    this.tween.onLoop.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'changeMethod'), this);
  };
  Interpolation.prototype.changeMethod = function () {
    this.method++;
    if (this.method === 1) {
      this.tween.interpolation(Kotlin.getBoundCallableRefForMemberFunction(Phaser.Math, 'bezierInterpolation'));
      this.text.text = 'Bezier Interpolation';
    }
     else if (this.method === 2) {
      this.tween.interpolation(Kotlin.getBoundCallableRefForMemberFunction(Phaser.Math, 'catmullRomInterpolation'));
      this.text.text = 'CatmullRom Interpolation';
    }
     else if (this.method === 3) {
      this.method = 0;
      this.tween.interpolation(Kotlin.getBoundCallableRefForMemberFunction(Phaser.Math, 'linearInterpolation'));
      this.text.text = 'Linear Interpolation';
    }
  };
  Interpolation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Interpolation',
    baseClasses: []
  };
  function PauseTween() {
    Phaser.State.call(this);
    this.flag = true;
  }
  PauseTween.prototype.preload = function () {
    this.game.load.image('diamond', 'assets/sprites/diamond.png');
    this.game.load.spritesheet('button', 'assets/buttons/button_sprite_sheet.png', 193, 71);
  };
  function PauseTween$create$ObjectLiteral() {
    this.x = 600;
  }
  PauseTween$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  PauseTween.prototype.create = function () {
    this.game.stage.backgroundColor = 2960685;
    this.p = this.game.add.sprite(100, 100, 'diamond');
    this.tween = this.game.add.tween(this.p).to(new PauseTween$create$ObjectLiteral(), 4000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true, 0, 1000, true);
    this.button = this.game.add.button(this.game.world.centerX, 400, 'button', Kotlin.getBoundCallableRefForMemberFunction(this, 'actionOnClick'), this, 2, 1, 0);
  };
  PauseTween.prototype.actionOnClick = function () {
    if (this.flag != null) {
      this.tween.pause();
    }
     else {
      this.tween.resume();
    }
    this.flag = !this.flag;
  };
  PauseTween.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PauseTween',
    baseClasses: []
  };
  function Repeat() {
    Phaser.State.call(this);
  }
  Repeat.prototype.preload = function () {
    this.game.load.image('space', 'assets/misc/starfield.png', 138, 15);
    this.game.load.image('logo', 'assets/sprites/phaser2.png');
  };
  function Repeat$create$ObjectLiteral() {
    this.alpha = 1;
  }
  Repeat$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Repeat.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 800, 600, 'space');
    var sprite = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'logo');
    sprite.anchor.setTo(0.5, 0.5);
    sprite.alpha = 0.0;
    var tween = this.game.add.tween(sprite).to(new Repeat$create$ObjectLiteral(), 2000, 'Linear', true);
    tween.repeat(10, 1000);
  };
  Repeat.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Repeat',
    baseClasses: []
  };
  function SingleTweenReuse() {
    Phaser.State.call(this);
  }
  SingleTweenReuse.prototype.preload = function () {
    this.game.load.image('bikkuriman', 'assets/sprites/bikkuriman.png');
  };
  function SingleTweenReuse$create$ObjectLiteral() {
    this.y = 500;
  }
  SingleTweenReuse$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SingleTweenReuse.prototype.create = function () {
    this.game.stage.backgroundColor = '#2384e7';
    this.sprite = this.game.add.sprite(400, 100, 'bikkuriman');
    this.tween = this.game.add.tween(this.sprite).to(new SingleTweenReuse$create$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
    this.tween.onComplete.addOnce(Kotlin.getBoundCallableRefForMemberFunction(this, 'tween2'), this);
  };
  function SingleTweenReuse$tween2$ObjectLiteral() {
    this.alpha = 0.5;
  }
  SingleTweenReuse$tween2$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SingleTweenReuse.prototype.tween2 = function () {
    this.tween.to(new SingleTweenReuse$tween2$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
    this.tween.onComplete.addOnce(Kotlin.getBoundCallableRefForMemberFunction(this, 'tween3'), this);
  };
  function SingleTweenReuse$tween3$ObjectLiteral() {
    this.x = 2;
    this.y = 2;
  }
  SingleTweenReuse$tween3$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SingleTweenReuse.prototype.tween3 = function () {
    this.tween.to(new SingleTweenReuse$tween3$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
    this.tween.onComplete.addOnce(Kotlin.getBoundCallableRefForMemberFunction(this, 'tween4'), this);
  };
  function SingleTweenReuse$tween4$ObjectLiteral() {
    this.y = 500;
    this.alpha = 1;
  }
  SingleTweenReuse$tween4$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SingleTweenReuse.prototype.tween4 = function () {
    this.tween.to(new SingleTweenReuse$tween4$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
    this.tween.onComplete.addOnce(Kotlin.getBoundCallableRefForMemberFunction(this, 'tween5'), this);
  };
  function SingleTweenReuse$tween5$ObjectLiteral() {
    this.x = 400;
    this.y = 100;
    this.alpha = 1;
  }
  SingleTweenReuse$tween5$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SingleTweenReuse.prototype.tween5 = function () {
    this.tween.to(new SingleTweenReuse$tween5$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
    this.tween.onComplete.addOnce(Kotlin.getBoundCallableRefForMemberFunction(this, 'tween2'), this);
  };
  SingleTweenReuse.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SingleTweenReuse',
    baseClasses: []
  };
  function TweenArray() {
    Phaser.State.call(this);
  }
  TweenArray.prototype.preload = function () {
    this.game.load.image('ball', 'assets/sprites/pangball.png');
  };
  function TweenArray$create$ObjectLiteral() {
    this.x = [500, 500, 100, 100];
    this.y = [250, 150, 150, 250];
  }
  TweenArray$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenArray.prototype.create = function () {
    this.game.stage.backgroundColor = '#2384e7';
    this.sprite = this.game.add.sprite(100, 250, 'ball');
    this.tween = this.game.add.tween(this.sprite);
    this.tween.to(new TweenArray$create$ObjectLiteral(), 3000, 'Linear');
    this.tween.start();
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'again'), this);
  };
  TweenArray.prototype.again = function () {
    if (!this.tween.isRunning) {
      this.sprite.position.setTo(100, 250);
      this.tween.start();
    }
  };
  TweenArray.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TweenArray',
    baseClasses: []
  };
  function TweenDelay() {
    Phaser.State.call(this);
  }
  TweenDelay.prototype.preload = function () {
    this.game.load.image('pic', 'assets/pics/TheBrightestLightComesFromTheDarkestPlace_by_Slayer_Ghostown.png');
  };
  function TweenDelay$create$ObjectLiteral() {
    this.font = '32px Arial';
    this.fill = '#ff0044';
    this.align = 'center';
  }
  TweenDelay$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TweenDelay$create$ObjectLiteral_0() {
    this.alpha = 1;
  }
  TweenDelay$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenDelay.prototype.create = function () {
    var pic = this.game.add.image(this.game.world.centerX, this.game.world.centerY, 'pic');
    pic.anchor.set(0.5);
    pic.alpha = 0.1;
    this.text = this.game.add.text(this.game.world.centerX, 100, '2000ms delay', new TweenDelay$create$ObjectLiteral());
    this.text.anchor.set(0.5);
    var tween = this.game.add.tween(pic).to(new TweenDelay$create$ObjectLiteral_0(), 2000, 'Linear', true, 2000);
    tween.onStart.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'started'), this);
    tween.onComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'completed'), this);
  };
  TweenDelay.prototype.started = function () {
    this.text.text = 'tween started';
  };
  TweenDelay.prototype.completed = function () {
    this.text.text = 'tween complete';
  };
  TweenDelay.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TweenDelay',
    baseClasses: []
  };
  function TweenFrom() {
    Phaser.State.call(this);
  }
  TweenFrom.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser1.png');
  };
  function TweenFrom$create$ObjectLiteral() {
    this.y = -200;
  }
  TweenFrom$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenFrom.prototype.create = function () {
    this.game.stage.backgroundColor = '#2384e7';
    this.sprite = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'phaser');
    this.sprite.anchor.set(0.5);
    this.game.add.tween(this.sprite).from(new TweenFrom$create$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
  };
  TweenFrom.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TweenFrom',
    baseClasses: []
  };
  function TweenLoopEvent() {
    Phaser.State.call(this);
    this.bounces = 10;
  }
  TweenLoopEvent.prototype.preload = function () {
    this.game.load.spritesheet('balls', 'assets/sprites/balls.png', 17, 17);
  };
  function TweenLoopEvent$create$ObjectLiteral(this$TweenLoopEvent) {
    this.y = this$TweenLoopEvent.game.world.height - this$TweenLoopEvent.ball.height;
  }
  TweenLoopEvent$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenLoopEvent.prototype.create = function () {
    this.ball = this.game.add.sprite(400, 0, 'balls', 0);
    this.tween = this.game.add.tween(this.ball).to(new TweenLoopEvent$create$ObjectLiteral(this), 1500, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true, 2500, this.bounces);
    this.tween.onStart.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onStart'), this);
    this.tween.onRepeat.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onLoop'), this);
    this.tween.onComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'onComplete'), this);
  };
  TweenLoopEvent.prototype.onStart = function () {
    this.tween.delay(0);
  };
  TweenLoopEvent.prototype.onLoop = function () {
    var tmp$, tmp$_0, tmp$_1;
    this.bounces--;
    if (this.ball.frame === 5) {
      this.ball.frame = 0;
    }
     else {
      tmp$ = this.ball;
      tmp$_0 = tmp$.frame, tmp$_1 = tmp$_0, tmp$.frame = tmp$_0 + 1, tmp$_1;
    }
  };
  function TweenLoopEvent$onComplete$ObjectLiteral(this$TweenLoopEvent) {
    this.x = 800 - this$TweenLoopEvent.ball.width;
  }
  TweenLoopEvent$onComplete$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenLoopEvent.prototype.onComplete = function () {
    this.tween = this.game.add.tween(this.ball).to(new TweenLoopEvent$onComplete$ObjectLiteral(this), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Exponential, 'Out'), true);
  };
  TweenLoopEvent.prototype.render = function () {
    this.game.debug.text('Bounces: ' + this.bounces, 32, 32);
  };
  TweenLoopEvent.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TweenLoopEvent',
    baseClasses: []
  };
  function TweenRelative() {
    Phaser.State.call(this);
  }
  TweenRelative.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser1.png');
    this.game.load.spritesheet('arrows', 'assets/sprites/arrows.png', 23, 31);
  };
  TweenRelative.prototype.create = function () {
    this.game.stage.backgroundColor = '#2384e7';
    this.arrowStart = this.game.add.sprite(100, 100, 'arrows', 0);
    this.arrowEnd = this.game.add.sprite(400, 100, 'arrows', 1);
    this.sprite = this.game.add.sprite(100, 164, 'phaser');
    this.sprite.inputEnabled = true;
    this.sprite.events.onInputDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'move'), this);
  };
  function TweenRelative$move$ObjectLiteral() {
    this.x = '+300';
  }
  TweenRelative$move$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TweenRelative$move$ObjectLiteral_0() {
    this.x = '-300';
  }
  TweenRelative$move$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenRelative.prototype.move = function () {
    if (this.sprite.x === 100.0) {
      this.game.add.tween(this.sprite).to(new TweenRelative$move$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
    }
     else if (this.sprite.x === 400.0) {
      this.game.add.tween(this.sprite).to(new TweenRelative$move$ObjectLiteral_0(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Linear, 'None'), true);
    }
  };
  TweenRelative.prototype.render = function () {
    if (this.sprite.x === 100.0 || this.sprite.x === 400.0) {
      this.game.debug.text('Click sprite to tween', 32, 32);
    }
    this.game.debug.text('x: ' + this.arrowStart.x, this.arrowStart.x, this.arrowStart.y - 4);
    this.game.debug.text('x: ' + this.arrowEnd.x, this.arrowEnd.x, this.arrowEnd.y - 4);
  };
  TweenRelative.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TweenRelative',
    baseClasses: []
  };
  function TweenReuse() {
    Phaser.State.call(this);
  }
  TweenReuse.prototype.preload = function () {
    this.game.load.image('beball', 'assets/sprites/beball1.png');
    this.game.load.image('bikkuriman', 'assets/sprites/bikkuriman.png');
    this.game.load.image('darkwing_crazy', 'assets/sprites/darkwing_crazy.png');
  };
  function TweenReuse$create$ObjectLiteral() {
    this.y = 500;
  }
  TweenReuse$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenReuse.prototype.create = function () {
    this.game.stage.backgroundColor = '#2384e7';
    this.sprites = this.game.add.group();
    this.sprites.create(100, 100, 'beball');
    this.sprites.create(200, 100, 'bikkuriman');
    this.sprites.create(300, 100, 'darkwing_crazy');
    this.sprites.create(400, 100, 'beball');
    this.sprites.create(500, 100, 'bikkuriman');
    this.sprites.create(600, 100, 'darkwing_crazy');
    this.tween = this.game.add.tween(this.sprites.cursor).to(new TweenReuse$create$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
    this.tween.onComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'tween2'), this);
  };
  function TweenReuse$tween2$ObjectLiteral() {
    this.alpha = 0;
  }
  TweenReuse$tween2$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenReuse.prototype.tween2 = function () {
    this.sprites.next();
    this.tween = this.game.add.tween(this.sprites.cursor).to(new TweenReuse$tween2$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
    this.tween.onComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'tween3'), this);
  };
  function TweenReuse$tween3$ObjectLiteral() {
    this.x = 2;
    this.y = 2;
  }
  TweenReuse$tween3$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenReuse.prototype.tween3 = function () {
    this.sprites.next();
    this.tween = this.game.add.tween(this.sprites.cursor.scale).to(new TweenReuse$tween3$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
    this.tween.onComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'tween4'), this);
  };
  function TweenReuse$tween4$ObjectLiteral() {
    this.y = 500;
    this.alpha = 0.2;
  }
  TweenReuse$tween4$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenReuse.prototype.tween4 = function () {
    this.sprites.next();
    this.tween = this.game.add.tween(this.sprites.cursor).to(new TweenReuse$tween4$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
    this.tween.onComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'tween5'), this);
  };
  function TweenReuse$tween5$ObjectLiteral() {
    this.x = 100;
  }
  TweenReuse$tween5$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenReuse.prototype.tween5 = function () {
    this.sprites.next();
    this.tween = this.game.add.tween(this.sprites.cursor).to(new TweenReuse$tween5$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
    this.tween.onComplete.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'tween6'), this);
  };
  function TweenReuse$tween6$ObjectLiteral() {
    this.x = 300;
    this.y = 400;
  }
  TweenReuse$tween6$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenReuse.prototype.tween6 = function () {
    this.sprites.next();
    this.tween = this.game.add.tween(this.sprites.cursor).to(new TweenReuse$tween6$ObjectLiteral(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
  };
  TweenReuse.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TweenReuse',
    baseClasses: []
  };
  function TweenRotation() {
    Phaser.State.call(this);
  }
  TweenRotation.prototype.preload = function () {
    this.game.load.image('arrow', 'assets/sprites/longarrow-white.png');
    this.game.load.image('lemming', 'assets/sprites/lemming.png');
  };
  TweenRotation.prototype.create = function () {
    this.game.stage.backgroundColor = '#00aeef';
    this.arrow2 = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'arrow');
    this.arrow2.anchor.set(0, 0.5);
    this.arrow2.tint = 68;
    this.arrow2.alpha = 0.5;
    this.arrow = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'arrow');
    this.arrow.anchor.set(0, 0.5);
    this.lemming = this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'lemming');
    this.lemming.anchor.set(0.5);
    this.setNewLocation();
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'setNewLocation'), this);
  };
  function TweenRotation$setNewLocation$ObjectLiteral(closure$newAngle) {
    this.angle = closure$newAngle.v;
  }
  TweenRotation$setNewLocation$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenRotation.prototype.setNewLocation = function () {
    this.arrow2.angle = this.arrow.angle;
    this.lemming.x = this.game.world.randomX;
    this.lemming.y = this.game.world.randomY;
    var angleTo = Phaser.Math.radToDeg(this.arrow.position.angle(this.lemming.position));
    var shortestAngle = Phaser.Math.getShortestAngle(angleTo, this.arrow.angle);
    var newAngle = {v: this.arrow.angle - shortestAngle};
    var time = abs(Phaser.Math, shortestAngle) * 10;
    this.game.add.tween(this.arrow).to(new TweenRotation$setNewLocation$ObjectLiteral(newAngle), time, 'Linear', true);
  };
  TweenRotation.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TweenRotation',
    baseClasses: []
  };
  function TweenSeveralProperties() {
    Phaser.State.call(this);
  }
  TweenSeveralProperties.prototype.preload = function () {
    this.game.load.image('sky', 'assets/skies/sky4.png');
    this.game.load.spritesheet('phaser', 'assets/tests/tween/phaser.png', 70, 90);
  };
  function TweenSeveralProperties$create$ObjectLiteral() {
    this.y = 240;
  }
  TweenSeveralProperties$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function TweenSeveralProperties$create$ObjectLiteral_0() {
    this.angle = 360;
  }
  TweenSeveralProperties$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenSeveralProperties.prototype.create = function () {
    var tmp$;
    this.game.add.sprite(0, 0, 'sky');
    var item;
    tmp$ = 6 - 1;
    for (var i = 0; i <= tmp$; i++) {
      item = this.game.add.sprite(190 + 69 * i, -100, 'phaser', i);
      item.anchor.setTo(0.5, 0.5);
      this.game.add.tween(item).to(new TweenSeveralProperties$create$ObjectLiteral(), 2400, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true, 1000 + 400 * i, 0);
      this.game.add.tween(item).to(new TweenSeveralProperties$create$ObjectLiteral_0(), 2400, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Cubic, 'In'), true, 1000 + 400 * i, 0);
    }
  };
  TweenSeveralProperties.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TweenSeveralProperties',
    baseClasses: []
  };
  function TweenTo() {
    Phaser.State.call(this);
  }
  TweenTo.prototype.preload = function () {
    this.game.load.image('phaser', 'assets/sprites/phaser1.png');
  };
  function TweenTo$create$ObjectLiteral(this$TweenTo) {
    this.y = this$TweenTo.game.world.centerY;
  }
  TweenTo$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  TweenTo.prototype.create = function () {
    this.game.stage.backgroundColor = '#2384e7';
    this.sprite = this.game.add.sprite(this.game.world.centerX, -200, 'phaser');
    this.sprite.anchor.set(0.5);
    this.game.add.tween(this.sprite).to(new TweenTo$create$ObjectLiteral(this), 4000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Bounce, 'Out'), true);
  };
  TweenTo.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TweenTo',
    baseClasses: []
  };
  function Yoyo() {
    Phaser.State.call(this);
  }
  Yoyo.prototype.preload = function () {
    this.game.load.image('space', 'assets/misc/starfield.png', 138, 15);
    this.game.load.image('logo', 'assets/sprites/phaser2.png');
  };
  function Yoyo$create$ObjectLiteral() {
    this.alpha = 1;
  }
  Yoyo$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  Yoyo.prototype.create = function () {
    this.game.add.tileSprite(0, 0, 800, 600, 'space');
    var sprite = this.game.add.sprite(this.game.world.centerX, this.game.world.centerY, 'logo');
    sprite.anchor.setTo(0.5, 0.5);
    sprite.alpha = 0.0;
    var tween = this.game.add.tween(sprite).to(new Yoyo$create$ObjectLiteral(), 2000, 'Linear', true, 0, -1);
    tween.yoyo(true, 3000);
  };
  Yoyo.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Yoyo',
    baseClasses: []
  };
  function AlphaWebm() {
    Phaser.State.call(this);
  }
  AlphaWebm.prototype.preload = function () {
    this.game.load.image('pic', 'assets/pics/thalion-rain.png');
    this.game.load.video('space', 'assets/video/alpha-webm.webm');
    this.game.load.bitmapFont('desyrel', 'assets/fonts/bitmapFonts/desyrel.png', 'assets/fonts/bitmapFonts/desyrel.xml');
  };
  AlphaWebm.prototype.create = function () {
    var pic = this.game.add.image(400, 300, 'pic');
    pic.anchor.set(0.5);
    pic.scale.set(4);
    pic.smoothed = false;
    this.text = this.game.add.bitmapText(400, 300, 'desyrel', 'Phaser\nAlpha Videos', 64);
    this.text.anchor.set(0.5);
    this.text.align = 'center';
    this.video = this.game.add.video('space');
    this.video.play(true);
    this.video.addToWorld(400, 300, 0.5, 0.5);
  };
  AlphaWebm.prototype.update = function () {
    this.text.text = 'Phaser kicking\nAlpha Video Channels\n' + round(Phaser.Math, this.video.progress * 100) + '%';
  };
  AlphaWebm.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AlphaWebm',
    baseClasses: []
  };
  function ChangeSource() {
    Phaser.State.call(this);
  }
  ChangeSource.prototype.preload = function () {
    this.game.load.video('liquid', 'assets/video/liquid2.mp4');
  };
  ChangeSource.prototype.create = function () {
    this.video = this.game.add.video('liquid');
    this.video.onPlay.addOnce(Kotlin.getBoundCallableRefForMemberFunction(this, 'start'), this);
    this.sprite = this.video.addToWorld(400, 300, 0.5, 0.5);
    this.video.play();
  };
  ChangeSource.prototype.start = function () {
    this.game.time.events.add(5000, Kotlin.getBoundCallableRefForMemberFunction(this, 'changeSource'), this);
  };
  ChangeSource.prototype.changeSource = function () {
    this.video.changeSource('assets/video/skull.mp4');
  };
  ChangeSource.prototype.render = function () {
    this.game.debug.text('Video width: ' + this.video.video.videoWidth, 600, 32);
    this.game.debug.text('Video height: ' + this.video.video.videoHeight, 600, 64);
    this.game.debug.text('Video Time: ' + this.video.currentTime, 32, 32);
    this.game.debug.text('Video Duration: ' + this.video.duration, 32, 64);
  };
  ChangeSource.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'ChangeSource',
    baseClasses: []
  };
  function DolbyDigitalPlus() {
    Phaser.State.call(this);
  }
  function DolbyDigitalPlus$preload$ObjectLiteral() {
    this.font = '65px Arial';
    this.fill = '#ff0044';
  }
  DolbyDigitalPlus$preload$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  DolbyDigitalPlus.prototype.preload = function () {
    this.game.add.text(100, 100, 'Loading videos ...', new DolbyDigitalPlus$preload$ObjectLiteral());
    this.game.load.video('dolby', 'assets/video/MP4_HPL40_30fps_channel_id_51.mp4');
  };
  DolbyDigitalPlus.prototype.create = function () {
    this.video = this.game.add.video('dolby');
    this.video.play(true);
    this.video.addToWorld(400, 300, 0.5, 0.5, 0.5, 0.5);
  };
  DolbyDigitalPlus.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'DolbyDigitalPlus',
    baseClasses: []
  };
  function LoadAsBlob() {
    Phaser.State.call(this);
  }
  function LoadAsBlob$preload$ObjectLiteral() {
    this.font = '65px Arial';
    this.fill = '#ff0044';
  }
  LoadAsBlob$preload$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  LoadAsBlob.prototype.preload = function () {
    this.game.add.text(100, 100, 'Loading videos ...', new LoadAsBlob$preload$ObjectLiteral());
    this.game.load.video('space', 'assets/video/wormhole.mp4', 'canplaythrough', true);
  };
  LoadAsBlob.prototype.create = function () {
    this.video = this.game.add.video('space');
    this.video.play(true);
    this.video.addToWorld();
  };
  LoadAsBlob.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'LoadAsBlob',
    baseClasses: []
  };
  function MultipleVideos() {
    Phaser.State.call(this);
  }
  function MultipleVideos$preload$ObjectLiteral() {
    this.font = '65px Arial';
    this.fill = '#ff0044';
  }
  MultipleVideos$preload$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  MultipleVideos.prototype.preload = function () {
    this.game.add.text(100, 100, 'Loading videos ...', new MultipleVideos$preload$ObjectLiteral());
    this.game.load.video('liquid', 'assets/video/skull.mp4');
    this.game.load.video('space', 'assets/video/wormhole.mp4');
  };
  MultipleVideos.prototype.create = function () {
    this.video1 = this.game.add.video('space');
    this.video2 = this.game.add.video('liquid');
    this.video1.play(true);
    this.video2.play(true);
    this.video1.addToWorld(400, 300, 0.5, 0.5);
    this.video2.addToWorld(780, 580, 1, 1, 0.5, 0.5);
  };
  MultipleVideos.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MultipleVideos',
    baseClasses: []
  };
  function PlayVideo() {
    Phaser.State.call(this);
  }
  function PlayVideo$preload$ObjectLiteral() {
    this.font = '65px Arial';
    this.fill = '#ff0044';
  }
  PlayVideo$preload$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  PlayVideo.prototype.preload = function () {
    this.game.add.text(100, 100, 'Loading videos ...', new PlayVideo$preload$ObjectLiteral());
    this.game.load.video('space', 'assets/video/wormhole.mp4');
  };
  PlayVideo.prototype.create = function () {
    this.video = this.game.add.video('space');
    this.video.play(true);
    this.video.addToWorld();
  };
  PlayVideo.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'PlayVideo',
    baseClasses: []
  };
  function SnapshotBlendMode() {
    Phaser.State.call(this);
    this.alpha = new SnapshotBlendMode$alpha$ObjectLiteral();
  }
  SnapshotBlendMode.prototype.preload = function () {
    this.game.load.image('swirl', 'assets/pics/swirl1.jpg');
  };
  SnapshotBlendMode.prototype.create = function () {
    this.video = this.game.add.video();
    this.video.onAccess.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'camAllowed'), this);
    this.video.onError.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'camBlocked_g0bt2f$'), this);
    this.video.startMediaStream();
  };
  function SnapshotBlendMode$camAllowed$ObjectLiteral() {
    this.alpha = 0.5;
  }
  SnapshotBlendMode$camAllowed$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SnapshotBlendMode.prototype.camAllowed = function () {
    this.bmd = this.game.add.bitmapData(this.video.width, this.video.height);
    this.bmd.addToWorld(this.game.world.centerX, this.game.world.centerY, 0.5, 0.5);
    this.game.time.events.loop(50, Kotlin.getBoundCallableRefForMemberFunction(this, 'takeSnapshot'), this);
    this.game.add.tween(this.alpha).to(new SnapshotBlendMode$camAllowed$ObjectLiteral(), 1000, 'Cubic.easeInOut', true, 0, -1, true);
  };
  SnapshotBlendMode.prototype.camBlocked_g0bt2f$ = function (video, error) {
    console.log('Camera was blocked', video, error);
  };
  SnapshotBlendMode.prototype.takeSnapshot = function () {
    if (this.bmd.width !== this.video.width || this.bmd.height !== this.video.height) {
      this.bmd.resize(this.video.width, this.video.height);
    }
    this.video.grab(true, this.alpha.alpha);
    this.bmd.draw(this.video.snapshot);
    this.bmd.draw('swirl', 0, 0, this.video.width, this.video.height, 'color');
  };
  function SnapshotBlendMode$alpha$ObjectLiteral() {
    this.alpha = 0.2;
  }
  SnapshotBlendMode$alpha$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SnapshotBlendMode.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SnapshotBlendMode',
    baseClasses: []
  };
  function SpritesSharingVideo() {
    Phaser.State.call(this);
  }
  SpritesSharingVideo.prototype.preload = function () {
    this.game.load.video('liquid', 'assets/video/liquid512x512.mp4');
  };
  function SpritesSharingVideo$create$ObjectLiteral() {
    this.angle = 360;
  }
  SpritesSharingVideo$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  SpritesSharingVideo.prototype.create = function () {
    var tmp$;
    this.group = this.game.add.group();
    this.video = this.game.add.video('liquid');
    tmp$ = 10 - 1;
    for (var i = 0; i <= tmp$; i++) {
      var sprite = this.group.create(this.game.world.randomX, this.game.world.randomY, this.video);
      sprite.anchor.set(0.5);
      sprite.scale.set(this.game.rnd.realInRange(0.2, 0.5));
      this.game.add.tween(sprite).to(new SpritesSharingVideo$create$ObjectLiteral(), this.game.rnd.between(4000, 8000), 'Sine.easeInOut', true, 0, -1, true);
    }
    this.video.play(true);
  };
  SpritesSharingVideo.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SpritesSharingVideo',
    baseClasses: []
  };
  function TakeSnapshotFromStream() {
    Phaser.State.call(this);
  }
  TakeSnapshotFromStream.prototype.create = function () {
    this.video = this.game.add.video();
    this.video.onAccess.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'camAllowed'), this);
    this.video.onError.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'camBlocked_g0bt2f$'), this);
    this.video.onPlay.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'takeSnapshot'), this);
    this.video.startMediaStream();
  };
  TakeSnapshotFromStream.prototype.camAllowed = function () {
    var cam = this.video.addToWorld();
    cam.scale.set(0.5);
    var grab = this.video.snapshot.addToWorld(this.game.width, this.game.height);
    grab.anchor.set(1);
    this.game.add.text(400, 32, 'Click to grab', TextStyle('bold 26px Arial', void 0, void 0, void 0, void 0, void 0, '#ffffff'));
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'takeSnapshot'), this);
  };
  TakeSnapshotFromStream.prototype.camBlocked_g0bt2f$ = function (video, error) {
    console.log('Camera was blocked', video, error);
  };
  TakeSnapshotFromStream.prototype.takeSnapshot = function () {
    this.video.grab();
  };
  TakeSnapshotFromStream.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'TakeSnapshotFromStream',
    baseClasses: []
  };
  function VideoStream() {
    Phaser.State.call(this);
  }
  VideoStream.prototype.create = function () {
    this.video = this.game.add.video();
    this.video.onAccess.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'camAllowed_5c03j0$'), this);
    this.video.onError.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'camBlocked_g0bt2f$'), this);
    this.video.startMediaStream();
  };
  VideoStream.prototype.camAllowed_5c03j0$ = function (video) {
    console.log('--> camera was allowed', video);
    this.sprite = video.addToWorld();
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'stopCam'), this);
  };
  VideoStream.prototype.camBlocked_g0bt2f$ = function (video, error) {
    console.log('camera was blocked', video, error);
  };
  VideoStream.prototype.stopCam = function () {
    console.log('camera stopped');
    this.video.stop();
  };
  VideoStream.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'VideoStream',
    baseClasses: []
  };
  function Asteroids() {
    Phaser.State.call(this);
  }
  Asteroids.prototype.preload = function () {
    this.game.load.image('bullet', 'assets/sprites/shmup-bullet.png');
    this.game.load.image('ship', 'assets/sprites/thrust_ship.png');
  };
  Asteroids.prototype.create = function () {
    this.weapon = this.game.add.weapon(30, 'bullet');
    this.weapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;
    this.weapon.bulletSpeed = 600;
    this.weapon.fireRate = 100;
    this.sprite = this.add.sprite(400, 300, 'ship');
    this.sprite.anchor.set(0.5);
    enable(this.game.physics.arcade, this.sprite);
    this.sprite.body.drag.set(70);
    this.sprite.body.maxVelocity.set(200);
    this.weapon.trackSprite(this.sprite, 0, 0, true);
    this.cursors = this.input.keyboard.createCursorKeys();
    this.fireButton = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);
  };
  Asteroids.prototype.update = function () {
    if (this.cursors.up.isDown) {
      this.game.physics.arcade.accelerationFromRotation(this.sprite.rotation, 300, this.sprite.body.acceleration);
    }
     else {
      this.sprite.body.acceleration.set(0);
    }
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -300;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 300;
    }
     else {
      this.sprite.body.angularVelocity = 0;
    }
    if (this.fireButton.isDown) {
      this.weapon.fire();
    }
    this.game.world.wrap(this.sprite, 16);
  };
  Asteroids.prototype.render = function () {
    this.weapon.debug();
  };
  Asteroids.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Asteroids',
    baseClasses: []
  };
  function AsteroidsBulletWrap() {
    Phaser.State.call(this);
  }
  AsteroidsBulletWrap.prototype.preload = function () {
    this.game.load.image('bullet', 'assets/sprites/shmup-bullet.png');
    this.game.load.image('ship', 'assets/sprites/thrust_ship.png');
  };
  AsteroidsBulletWrap.prototype.create = function () {
    this.weapon = this.game.add.weapon(30, 'bullet');
    this.weapon.bulletKillType = Phaser.Weapon.KILL_LIFESPAN;
    this.weapon.bulletLifespan = 2000;
    this.weapon.bulletSpeed = 600;
    this.weapon.fireRate = 100;
    this.weapon.bulletWorldWrap = true;
    this.sprite = this.add.sprite(400, 300, 'ship');
    this.sprite.anchor.set(0.5);
    enable(this.game.physics.arcade, this.sprite);
    this.sprite.body.drag.set(70);
    this.sprite.body.maxVelocity.set(200);
    this.weapon.trackSprite(this.sprite, 0, 0, true);
    this.cursors = this.input.keyboard.createCursorKeys();
    this.fireButton = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);
  };
  AsteroidsBulletWrap.prototype.update = function () {
    if (this.cursors.up.isDown) {
      this.game.physics.arcade.accelerationFromRotation(this.sprite.rotation, 300, this.sprite.body.acceleration);
    }
     else {
      this.sprite.body.acceleration.set(0);
    }
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -300;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 300;
    }
     else {
      this.sprite.body.angularVelocity = 0;
    }
    if (this.fireButton.isDown) {
      this.weapon.fire();
    }
    this.game.world.wrap(this.sprite, 16);
  };
  AsteroidsBulletWrap.prototype.render = function () {
    this.weapon.debug();
  };
  AsteroidsBulletWrap.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'AsteroidsBulletWrap',
    baseClasses: []
  };
  function Autofire() {
    Phaser.State.call(this);
  }
  Autofire.prototype.preload = function () {
    this.game.load.image('ship', 'assets/sprites/thrust_ship.png');
    this.game.load.spritesheet('bullet', 'assets/sprites/rgblaser.png', 4, 4);
  };
  Autofire.prototype.create = function () {
    this.weapon = this.game.add.weapon(40, 'bullet');
    this.weapon.setBulletFrames(0, 80, true);
    this.weapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;
    this.weapon.bulletSpeed = 400;
    this.weapon.fireRate = 100;
    this.weapon.autofire = true;
    this.sprite = this.add.sprite(400, 300, 'ship');
    this.sprite.anchor.set(0.5);
    enable(this.game.physics.arcade, this.sprite);
    this.sprite.body.drag.set(70);
    this.sprite.body.maxVelocity.set(200);
    this.weapon.trackSprite(this.sprite, 0, 0, true);
    this.cursors = this.input.keyboard.createCursorKeys();
  };
  Autofire.prototype.update = function () {
    if (this.cursors.up.isDown) {
      this.weapon.autofire = true;
    }
     else if (this.cursors.down.isDown) {
      this.weapon.autofire = false;
    }
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -300;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 300;
    }
     else {
      this.sprite.body.angularVelocity = 0;
    }
    this.game.world.wrap(this.sprite, 16);
  };
  Autofire.prototype.render = function () {
    this.weapon.debug();
  };
  Autofire.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'Autofire',
    baseClasses: []
  };
  function BulletAngleVariance() {
    Phaser.State.call(this);
  }
  BulletAngleVariance.prototype.preload = function () {
    this.game.load.image('bullet', 'assets/sprites/bullet.png');
    this.game.load.image('ship', 'assets/sprites/shmup-ship.png');
  };
  BulletAngleVariance.prototype.create = function () {
    this.weapon = this.game.add.weapon(30, 'bullet');
    this.weapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;
    this.weapon.bulletAngleOffset = 90;
    this.weapon.bulletSpeed = 400;
    this.weapon.fireRate = 60;
    this.weapon.bulletAngleVariance = 10;
    this.sprite = this.add.sprite(320, 500, 'ship');
    enable(this.game.physics.arcade, this.sprite);
    this.weapon.trackSprite(this.sprite, 14, 0);
    this.cursors = this.input.keyboard.createCursorKeys();
    this.fireButton = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);
  };
  BulletAngleVariance.prototype.update = function () {
    this.sprite.body.velocity.x = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200;
    }
    if (this.fireButton.isDown) {
      this.weapon.fire();
    }
  };
  BulletAngleVariance.prototype.render = function () {
    this.weapon.debug();
  };
  BulletAngleVariance.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BulletAngleVariance',
    baseClasses: []
  };
  function BulletFrameCycle() {
    Phaser.State.call(this);
  }
  BulletFrameCycle.prototype.preload = function () {
    this.game.load.image('ship', 'assets/sprites/thrust_ship.png');
    this.game.load.spritesheet('bullet', 'assets/sprites/rgblaser.png', 4, 4);
  };
  BulletFrameCycle.prototype.create = function () {
    this.weapon = this.game.add.weapon(40, 'bullet');
    this.weapon.setBulletFrames(0, 80, true);
    this.weapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;
    this.weapon.bulletSpeed = 400;
    this.weapon.fireRate = 50;
    this.sprite = this.add.sprite(400, 300, 'ship');
    this.sprite.anchor.set(0.5);
    enable(this.game.physics.arcade, this.sprite);
    this.sprite.body.drag.set(70);
    this.sprite.body.maxVelocity.set(200);
    this.weapon.trackSprite(this.sprite, 0, 0, true);
    this.cursors = this.input.keyboard.createCursorKeys();
    this.fireButton = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);
  };
  BulletFrameCycle.prototype.update = function () {
    if (this.cursors.up.isDown) {
      this.game.physics.arcade.accelerationFromRotation(this.sprite.rotation, 300, this.sprite.body.acceleration);
    }
     else {
      this.sprite.body.acceleration.set(0);
    }
    if (this.cursors.left.isDown) {
      this.sprite.body.angularVelocity = -300;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.angularVelocity = 300;
    }
     else {
      this.sprite.body.angularVelocity = 0;
    }
    if (this.fireButton.isDown) {
      this.weapon.fire();
    }
    this.game.world.wrap(this.sprite, 16);
  };
  BulletFrameCycle.prototype.render = function () {
    this.weapon.debug();
  };
  BulletFrameCycle.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BulletFrameCycle',
    baseClasses: []
  };
  function BulletSpeedVariance() {
    Phaser.State.call(this);
  }
  BulletSpeedVariance.prototype.preload = function () {
    this.game.load.image('bullet', 'assets/sprites/bullet.png');
    this.game.load.image('ship', 'assets/sprites/shmup-ship.png');
  };
  BulletSpeedVariance.prototype.create = function () {
    this.weapon = this.game.add.weapon(30, 'bullet');
    this.weapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;
    this.weapon.bulletAngleOffset = 90;
    this.weapon.bulletSpeed = 400;
    this.weapon.fireRate = 60;
    this.weapon.bulletSpeedVariance = 200;
    this.sprite = this.add.sprite(320, 500, 'ship');
    enable(this.game.physics.arcade, this.sprite);
    this.weapon.trackSprite(this.sprite, 14, 0);
    this.cursors = this.input.keyboard.createCursorKeys();
    this.fireButton = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);
  };
  BulletSpeedVariance.prototype.update = function () {
    this.sprite.body.velocity.x = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200;
    }
    if (this.fireButton.isDown) {
      this.weapon.fire();
    }
  };
  BulletSpeedVariance.prototype.render = function () {
    this.weapon.debug();
  };
  BulletSpeedVariance.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'BulletSpeedVariance',
    baseClasses: []
  };
  function FireMany() {
    Phaser.State.call(this);
  }
  FireMany.prototype.preload = function () {
    this.game.load.image('bullet', 'assets/bullets/bullet22.png');
  };
  function FireMany$create$ObjectLiteral() {
    this.x = 100;
    this.y = 600;
  }
  FireMany$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireMany$create$ObjectLiteral_0() {
    this.x = 200;
    this.y = 550;
  }
  FireMany$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireMany$create$ObjectLiteral_1() {
    this.x = 300;
    this.y = 500;
  }
  FireMany$create$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireMany$create$ObjectLiteral_2() {
    this.x = 400;
    this.y = 450;
  }
  FireMany$create$ObjectLiteral_2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireMany$create$ObjectLiteral_3() {
    this.x = 500;
    this.y = 500;
  }
  FireMany$create$ObjectLiteral_3.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireMany$create$ObjectLiteral_4() {
    this.x = 600;
    this.y = 550;
  }
  FireMany$create$ObjectLiteral_4.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireMany$create$ObjectLiteral_5() {
    this.x = 700;
    this.y = 600;
  }
  FireMany$create$ObjectLiteral_5.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  FireMany.prototype.create = function () {
    this.weapon = this.game.add.weapon(6 * 8, 'bullet');
    this.weapon.bulletKillType = Phaser.Weapon.KILL_LIFESPAN;
    this.weapon.bulletLifespan = 2000;
    this.weapon.bulletAngleOffset = 90;
    this.weapon.bulletSpeed = 400;
    this.weapon.fireRate = 250;
    this.bulletPositions = [new FireMany$create$ObjectLiteral(), new FireMany$create$ObjectLiteral_0(), new FireMany$create$ObjectLiteral_1(), new FireMany$create$ObjectLiteral_2(), new FireMany$create$ObjectLiteral_3(), new FireMany$create$ObjectLiteral_4(), new FireMany$create$ObjectLiteral_5()];
    this.game.input.onDown.add(Kotlin.getBoundCallableRefForMemberFunction(this, 'fire'), this);
  };
  FireMany.prototype.fire = function () {
    this.weapon.fireMany(this.bulletPositions);
  };
  FireMany.prototype.render = function () {
    this.weapon.debug();
    this.game.debug.text('Click to fire', 600, 32);
  };
  FireMany.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FireMany',
    baseClasses: []
  };
  function FireManyFromTrackedSprite() {
    Phaser.State.call(this);
  }
  FireManyFromTrackedSprite.prototype.preload = function () {
    this.game.load.image('bullet', 'assets/bullets/bullet198.png');
    this.game.load.image('ship', 'assets/sprites/shmup-ship.png');
  };
  function FireManyFromTrackedSprite$create$ObjectLiteral() {
    this.x = 0;
    this.y = -32;
  }
  FireManyFromTrackedSprite$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireManyFromTrackedSprite$create$ObjectLiteral_0() {
    this.x = -16;
    this.y = -16;
  }
  FireManyFromTrackedSprite$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireManyFromTrackedSprite$create$ObjectLiteral_1() {
    this.x = 16;
    this.y = -16;
  }
  FireManyFromTrackedSprite$create$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireManyFromTrackedSprite$create$ObjectLiteral_2() {
    this.x = -32;
    this.y = 0;
  }
  FireManyFromTrackedSprite$create$ObjectLiteral_2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireManyFromTrackedSprite$create$ObjectLiteral_3() {
    this.x = 0;
    this.y = 0;
  }
  FireManyFromTrackedSprite$create$ObjectLiteral_3.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireManyFromTrackedSprite$create$ObjectLiteral_4() {
    this.x = 32;
    this.y = 0;
  }
  FireManyFromTrackedSprite$create$ObjectLiteral_4.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  FireManyFromTrackedSprite.prototype.create = function () {
    this.weapon = this.game.add.weapon(6 * 8, 'bullet');
    this.weapon.bulletKillType = Phaser.Weapon.KILL_LIFESPAN;
    this.weapon.bulletLifespan = 2000;
    this.weapon.bulletAngleOffset = 90;
    this.weapon.bulletSpeed = 400;
    this.sprite = this.add.sprite(320, 500, 'ship');
    enable(this.game.physics.arcade, this.sprite);
    this.weapon.trackSprite(this.sprite, 14, 0);
    this.weapon.fireRate = 250;
    this.weapon.multiFire = true;
    this.cursors = this.input.keyboard.createCursorKeys();
    this.fireButton = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);
    this.bulletPositions = [new FireManyFromTrackedSprite$create$ObjectLiteral(), new FireManyFromTrackedSprite$create$ObjectLiteral_0(), new FireManyFromTrackedSprite$create$ObjectLiteral_1(), new FireManyFromTrackedSprite$create$ObjectLiteral_2(), new FireManyFromTrackedSprite$create$ObjectLiteral_3(), new FireManyFromTrackedSprite$create$ObjectLiteral_4()];
  };
  FireManyFromTrackedSprite.prototype.update = function () {
    this.sprite.body.velocity.x = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200;
    }
    if (this.fireButton.isDown) {
      this.weapon.fireMany(this.bulletPositions);
    }
  };
  FireManyFromTrackedSprite.prototype.render = function () {
    this.weapon.debug();
  };
  FireManyFromTrackedSprite.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FireManyFromTrackedSprite',
    baseClasses: []
  };
  function FireManyWithVariance() {
    Phaser.State.call(this);
  }
  FireManyWithVariance.prototype.preload = function () {
    this.game.load.image('bullet', 'assets/bullets/bullet198.png');
    this.game.load.image('ship', 'assets/sprites/shmup-ship.png');
  };
  function FireManyWithVariance$create$ObjectLiteral() {
    this.x = 0;
    this.y = -32;
  }
  FireManyWithVariance$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireManyWithVariance$create$ObjectLiteral_0() {
    this.x = -16;
    this.y = -16;
  }
  FireManyWithVariance$create$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireManyWithVariance$create$ObjectLiteral_1() {
    this.x = 16;
    this.y = -16;
  }
  FireManyWithVariance$create$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireManyWithVariance$create$ObjectLiteral_2() {
    this.x = -32;
    this.y = 0;
  }
  FireManyWithVariance$create$ObjectLiteral_2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireManyWithVariance$create$ObjectLiteral_3() {
    this.x = 0;
    this.y = 0;
  }
  FireManyWithVariance$create$ObjectLiteral_3.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FireManyWithVariance$create$ObjectLiteral_4() {
    this.x = 32;
    this.y = 0;
  }
  FireManyWithVariance$create$ObjectLiteral_4.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  FireManyWithVariance.prototype.create = function () {
    this.weapon = this.game.add.weapon(6 * 8, 'bullet');
    this.weapon.bulletKillType = Phaser.Weapon.KILL_LIFESPAN;
    this.weapon.bulletLifespan = 2000;
    this.weapon.bulletAngleOffset = 90;
    this.weapon.bulletSpeed = 400;
    this.weapon.bulletAngleVariance = 20;
    this.sprite = this.add.sprite(320, 500, 'ship');
    enable(this.game.physics.arcade, this.sprite);
    this.weapon.trackSprite(this.sprite, 14, 0);
    this.weapon.fireRate = 250;
    this.weapon.multiFire = true;
    this.cursors = this.input.keyboard.createCursorKeys();
    this.fireButton = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);
    this.bulletPositions = [new FireManyWithVariance$create$ObjectLiteral(), new FireManyWithVariance$create$ObjectLiteral_0(), new FireManyWithVariance$create$ObjectLiteral_1(), new FireManyWithVariance$create$ObjectLiteral_2(), new FireManyWithVariance$create$ObjectLiteral_3(), new FireManyWithVariance$create$ObjectLiteral_4()];
  };
  FireManyWithVariance.prototype.update = function () {
    this.sprite.body.velocity.x = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200;
    }
    if (this.fireButton.isDown) {
      this.weapon.fireMany(this.bulletPositions);
    }
  };
  FireManyWithVariance.prototype.render = function () {
    this.weapon.debug();
  };
  FireManyWithVariance.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FireManyWithVariance',
    baseClasses: []
  };
  function FireOffsetPosition() {
    Phaser.State.call(this);
  }
  FireOffsetPosition.prototype.preload = function () {
    this.game.load.image('bullet', 'assets/sprites/bullet.png');
    this.game.load.image('ship', 'assets/sprites/shmup-ship.png');
  };
  FireOffsetPosition.prototype.create = function () {
    this.weapon = this.game.add.weapon(6 * 8, 'bullet');
    this.weapon.bulletKillType = Phaser.Weapon.KILL_LIFESPAN;
    this.weapon.bulletLifespan = 2000;
    this.weapon.bulletAngleOffset = 90;
    this.weapon.bulletSpeed = 400;
    this.sprite = this.add.sprite(320, 500, 'ship');
    enable(this.game.physics.arcade, this.sprite);
    this.weapon.trackSprite(this.sprite, 14, 0);
    this.weapon.fireRate = 250;
    this.weapon.multiFire = true;
    this.cursors = this.input.keyboard.createCursorKeys();
    this.fireButton = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);
  };
  FireOffsetPosition.prototype.update = function () {
    this.sprite.body.velocity.x = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200;
    }
    if (this.fireButton.isDown) {
      this.weapon.fireOffset(0, -32);
      this.weapon.fireOffset(-16, -16);
      this.weapon.fireOffset(16, -16);
      this.weapon.fireOffset(-32, 0);
      this.weapon.fireOffset(0, 0);
      this.weapon.fireOffset(32, 0);
    }
  };
  FireOffsetPosition.prototype.render = function () {
    this.weapon.debug();
  };
  FireOffsetPosition.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FireOffsetPosition',
    baseClasses: []
  };
  function FireRate() {
    Phaser.State.call(this);
  }
  FireRate.prototype.preload = function () {
    this.game.load.image('bullet', 'assets/sprites/bullet.png');
    this.game.load.image('ship', 'assets/sprites/shmup-ship.png');
  };
  FireRate.prototype.create = function () {
    this.weapon = this.game.add.weapon(30, 'bullet');
    this.weapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;
    this.weapon.bulletAngleOffset = 90;
    this.weapon.bulletSpeed = 400;
    this.weapon.fireRate = 60;
    this.sprite = this.add.sprite(320, 500, 'ship');
    enable(this.game.physics.arcade, this.sprite);
    this.weapon.trackSprite(this.sprite, 14, 0);
    this.cursors = this.input.keyboard.createCursorKeys();
    this.fireButton = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);
  };
  FireRate.prototype.update = function () {
    this.sprite.body.velocity.x = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200;
    }
    if (this.fireButton.isDown) {
      this.weapon.fire();
    }
  };
  FireRate.prototype.render = function () {
    this.weapon.debug();
  };
  FireRate.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FireRate',
    baseClasses: []
  };
  function MultipleBullets() {
    Phaser.State.call(this);
  }
  MultipleBullets.prototype.preload = function () {
    this.game.load.image('bullet', 'assets/sprites/bullet.png');
    this.game.load.image('ship', 'assets/sprites/shmup-ship.png');
  };
  MultipleBullets.prototype.create = function () {
    this.weapon = this.game.add.weapon(40, 'bullet');
    this.weapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;
    this.weapon.bulletAngleOffset = 90;
    this.weapon.bulletSpeed = 400;
    this.sprite = this.add.sprite(320, 500, 'ship');
    enable(this.game.physics.arcade, this.sprite);
    this.cursors = this.input.keyboard.createCursorKeys();
    this.fireButton = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);
  };
  function MultipleBullets$update$ObjectLiteral(closure$x, closure$y) {
    this.x = closure$x.v;
    this.y = closure$y.v;
  }
  MultipleBullets$update$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function MultipleBullets$update$ObjectLiteral_0(closure$x, closure$y) {
    this.x = closure$x.v + 10;
    this.y = closure$y.v;
  }
  MultipleBullets$update$ObjectLiteral_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function MultipleBullets$update$ObjectLiteral_1(closure$x, closure$y) {
    this.x = closure$x.v + 20;
    this.y = closure$y.v;
  }
  MultipleBullets$update$ObjectLiteral_1.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function MultipleBullets$update$ObjectLiteral_2(closure$x, closure$y) {
    this.x = closure$x.v + 30;
    this.y = closure$y.v;
  }
  MultipleBullets$update$ObjectLiteral_2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  MultipleBullets.prototype.update = function () {
    this.sprite.body.velocity.x = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200;
    }
    var x = {v: this.sprite.x};
    var y = {v: this.sprite.y};
    if (this.fireButton.isDown) {
      this.weapon.fireRate = 0;
      this.weapon.fire(new MultipleBullets$update$ObjectLiteral(x, y));
      this.weapon.fire(new MultipleBullets$update$ObjectLiteral_0(x, y));
      this.weapon.fire(new MultipleBullets$update$ObjectLiteral_1(x, y));
      this.weapon.fire(new MultipleBullets$update$ObjectLiteral_2(x, y));
    }
    this.weapon.fireRate = 200;
  };
  MultipleBullets.prototype.render = function () {
    this.weapon.debug();
  };
  MultipleBullets.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MultipleBullets',
    baseClasses: []
  };
  function SingleBullet() {
    Phaser.State.call(this);
  }
  SingleBullet.prototype.preload = function () {
    this.game.load.image('bullet', 'assets/sprites/bullet.png');
    this.game.load.image('ship', 'assets/sprites/shmup-ship.png');
  };
  SingleBullet.prototype.create = function () {
    this.weapon = this.game.add.weapon(1, 'bullet');
    this.weapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;
    this.weapon.bulletAngleOffset = 90;
    this.weapon.bulletSpeed = 400;
    this.sprite = this.add.sprite(320, 500, 'ship');
    enable(this.game.physics.arcade, this.sprite);
    this.weapon.trackSprite(this.sprite, 14, 0);
    this.cursors = this.input.keyboard.createCursorKeys();
    this.fireButton = this.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);
  };
  SingleBullet.prototype.update = function () {
    this.sprite.body.velocity.x = 0;
    if (this.cursors.left.isDown) {
      this.sprite.body.velocity.x = -200;
    }
     else if (this.cursors.right.isDown) {
      this.sprite.body.velocity.x = 200;
    }
    if (this.fireButton.isDown) {
      this.weapon.fire();
    }
  };
  SingleBullet.prototype.render = function () {
    this.weapon.debug();
  };
  SingleBullet.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'SingleBullet',
    baseClasses: []
  };
  function FixedToCamera_0() {
    Phaser.State.call(this);
  }
  FixedToCamera_0.prototype.preload = function () {
    this.game.stage.backgroundColor = '#007236';
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
    this.game.load.image('sonic', 'assets/sprites/sonic_havok_sanity.png');
    this.game.load.image('phaser', 'assets/sprites/phaser1.png');
  };
  function FixedToCamera$create$ObjectLiteral_2() {
    this.font = '32px Arial';
    this.fill = '#f26c4f';
    this.align = 'center';
  }
  FixedToCamera$create$ObjectLiteral_2.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FixedToCamera$create$ObjectLiteral_3() {
    this.font = '32px Arial';
    this.fill = '#ffffff';
    this.align = 'center';
  }
  FixedToCamera$create$ObjectLiteral_3.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  function FixedToCamera$create$ObjectLiteral_4() {
    this.y = 400;
  }
  FixedToCamera$create$ObjectLiteral_4.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  FixedToCamera_0.prototype.create = function () {
    var tmp$;
    this.game.world.setBounds(-1000, -1000, 2000, 2000);
    tmp$ = 200 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'mushroom');
    }
    this.game.add.text(0, 0, 'this text scrolls\nwith the background', new FixedToCamera$create$ObjectLiteral_2());
    this.logo1 = this.game.add.sprite(0, 0, 'phaser');
    this.logo1.fixedToCamera = true;
    this.logo1.cameraOffset.setTo(100, 100);
    this.logo2 = this.game.add.sprite(0, 0, 'phaser');
    this.logo2.fixedToCamera = true;
    this.logo2.cameraOffset.setTo(500, 100);
    var t = this.game.add.text(0, 0, 'this text is fixed to the camera', new FixedToCamera$create$ObjectLiteral_3());
    t.fixedToCamera = true;
    t.cameraOffset.setTo(200, 500);
    this.game.add.tween(this.logo2.cameraOffset).to(new FixedToCamera$create$ObjectLiteral_4(), 2000, Kotlin.getBoundCallableRefForMemberFunction(Phaser.Easing.Back, 'InOut'), true, 0, 2000, true);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  FixedToCamera_0.prototype.update = function () {
    if (this.cursors.up.isDown) {
      this.game.camera.y = this.game.camera.y - 4;
    }
     else if (this.cursors.down.isDown) {
      this.game.camera.y = this.game.camera.y + 4;
    }
    if (this.cursors.left.isDown) {
      this.game.camera.x = this.game.camera.x - 4;
    }
     else if (this.cursors.right.isDown) {
      this.game.camera.x = this.game.camera.x + 4;
    }
  };
  FixedToCamera_0.prototype.render = function () {
    this.game.debug.cameraInfo(this.game.camera, 32, 32);
  };
  FixedToCamera_0.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'FixedToCamera',
    baseClasses: []
  };
  function MoveAroundWorld() {
    Phaser.State.call(this);
  }
  MoveAroundWorld.prototype.preload = function () {
    this.game.stage.backgroundColor = '#007236';
    this.game.load.image('mushroom', 'assets/sprites/mushroom2.png');
    this.game.load.image('phaser', 'assets/sprites/sonic_havok_sanity.png');
  };
  function MoveAroundWorld$create$ObjectLiteral() {
    this.font = '32px Arial';
    this.fill = '#330088';
    this.align = 'center';
  }
  MoveAroundWorld$create$ObjectLiteral.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    baseClasses: []
  };
  MoveAroundWorld.prototype.create = function () {
    var tmp$;
    this.game.world.resize(3000, 600);
    tmp$ = 100 - 1;
    for (var i = 0; i <= tmp$; i++) {
      this.game.add.sprite(this.game.world.randomX, this.game.world.randomY, 'mushroom');
    }
    this.game.add.text(600, 800, '- phaser -', new MoveAroundWorld$create$ObjectLiteral());
    var g = this.game.add.group();
    g.x = 500.0;
    this.d = g.create(100, 300, 'phaser');
    this.d.anchor.setTo(0.5, 0.5);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  MoveAroundWorld.prototype.update = function () {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    this.d.angle = this.d.angle + 1;
    if (this.cursors.up.isDown) {
      if (this.cursors.up.shiftKey) {
        tmp$ = this.d;
        tmp$_0 = tmp$.angle, tmp$_1 = tmp$_0, tmp$.angle = tmp$_0 + 1, tmp$_1;
      }
       else {
        this.game.camera.y = this.game.camera.y - 4;
      }
    }
     else if (this.cursors.down.isDown) {
      if (this.cursors.down.shiftKey) {
        tmp$_2 = this.d;
        tmp$_3 = tmp$_2.angle, tmp$_4 = tmp$_3, tmp$_2.angle = tmp$_3 - 1, tmp$_4;
      }
       else {
        this.game.camera.y = this.game.camera.y + 4;
      }
    }
    if (this.cursors.left.isDown) {
      if (this.cursors.left.shiftKey) {
        this.game.world.rotation = this.game.world.rotation - 0.05;
      }
       else {
        this.game.camera.x = this.game.camera.x - 4;
      }
    }
     else if (this.cursors.right.isDown) {
      if (this.cursors.right.shiftKey) {
        this.game.world.rotation = this.game.world.rotation + 0.05;
      }
       else {
        this.game.camera.x = this.game.camera.x + 4;
      }
    }
  };
  MoveAroundWorld.prototype.render = function () {
    this.game.debug.cameraInfo(this.game.camera, 32, 32);
  };
  MoveAroundWorld.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'MoveAroundWorld',
    baseClasses: []
  };
  function WorldWrap() {
    Phaser.State.call(this);
  }
  WorldWrap.prototype.preload = function () {
    this.game.load.image('backdrop', 'assets/pics/remember-me.jpg');
    this.game.load.image('card', 'assets/sprites/mana_card.png');
  };
  WorldWrap.prototype.create = function () {
    this.game.world.setBounds(0, 0, 1920, 1200);
    this.game.add.sprite(0, 0, 'backdrop');
    this.card = this.game.add.sprite(200, 200, 'card');
    this.game.camera.follow(this.card);
    this.cursors = this.game.input.keyboard.createCursorKeys();
  };
  WorldWrap.prototype.update = function () {
    if (this.cursors.left.isDown) {
      this.card.x = this.card.x - 4;
    }
     else if (this.cursors.right.isDown) {
      this.card.x = this.card.x + 4;
    }
    if (this.cursors.up.isDown) {
      this.card.y = this.card.y - 4;
    }
     else if (this.cursors.down.isDown) {
      this.card.y = this.card.y + 4;
    }
    this.game.world.wrap(this.card, 0, true);
  };
  WorldWrap.prototype.render = function () {
    this.game.debug.cameraInfo(this.game.camera, 500, 32);
    this.game.debug.spriteCoords(this.card, 32, 32);
  };
  WorldWrap.$metadata$ = {
    type: Kotlin.TYPE.CLASS,
    classIndex: Kotlin.newClassIndex(),
    simpleName: 'WorldWrap',
    baseClasses: []
  };
  Object.defineProperty(_, 'Math', {
    get: function () {
      return Math_0;
    }
  });
  _.main_kand9s$ = main;
  _.gameMain = gameMain;
  Object.defineProperty(_, 'gameProperties', {
    get: gameProperties_getInstance
  });
  Object.defineProperty(_, 'Assets', {
    get: Assets_getInstance
  });
  _.Panda = Panda;
  _.MainState = MainState;
  _.OtherState = OtherState;
  Object.defineProperty(_, 'exampleProperties', {
    get: exampleProperties_getInstance
  });
  _.runExample_5dgibq$ = runExample;
  var package$Koala = _.Koala || (_.Koala = {});
  Object.defineProperty(package$Koala, 'phaserGame', {
    get: get_phaserGame,
    set: set_phaserGame
  });
  package$Koala.Sprite = Sprite;
  package$Koala.initKoala_lcgo3e$ = initKoala;
  var package$Phaser = _.Phaser || (_.Phaser = {});
  package$Phaser.T$2 = T$2;
  package$Phaser.RGBColor = RGBColor;
  package$Phaser.ColorComponents = ColorComponents;
  package$Phaser.CursorKeys = CursorKeys;
  package$Phaser.SinCosGenerator = SinCosGenerator;
  package$Phaser.WheelEventProxy = WheelEventProxy;
  package$Phaser.T$9 = T$9;
  package$Phaser.T$10 = T$10;
  package$Phaser.T$11 = T$11;
  package$Phaser.T$12 = T$12;
  package$Phaser.PhaserTextStyle = PhaserTextStyle;
  package$Phaser.T$13 = T$13;
  package$Phaser.T$14 = T$14;
  package$Phaser.T$15 = T$15;
  Object.defineProperty(package$Phaser, 'kPI2', {
    get: function () {
      return kPI2;
    }
  });
  Object.defineProperty(package$Phaser, 'kPI', {
    get: function () {
      return kPI;
    }
  });
  package$Phaser.sin_m4iyer$ = sin;
  package$Phaser.cos_m4iyer$ = cos;
  package$Phaser.get_PI2_akwgk1$ = get_PI2;
  package$Phaser.get_PI_akwgk1$ = get_PI;
  package$Phaser.round_hax2yj$ = round;
  package$Phaser.floor_hax2yj$ = floor;
  package$Phaser.atan2_g73mox$ = atan2;
  package$Phaser.sqrt_m4iyer$ = sqrt;
  package$Phaser.abs_m4iyer$ = abs;
  package$Phaser.random_akwgk1$ = random;
  package$Phaser.crop_p8qxvh$ = crop;
  package$Phaser.destroy_2ajn2y$ = destroy;
  package$Phaser.reviveKt = revive;
  package$Phaser.resetKt = reset;
  package$Phaser.setScaleMinMaxKt = setScaleMinMax;
  package$Phaser.setTextureKt = setTexture;
  package$Phaser.setTextureKt2 = setTexture_0;
  package$Phaser.setTextureKt3 = setTexture_1;
  package$Phaser.setTextureKt4 = setTexture_2;
  package$Phaser.getBoundsKt = getBounds;
  package$Phaser.getBoundsKt1 = getBounds_0;
  package$Phaser.getBoundsKt2 = getBounds_1;
  package$Phaser.alignKt = alignTo;
  package$Phaser.enableKt = enable;
  package$Phaser.enableKt2 = enable_0;
  package$Phaser.enableKt3 = enable_1;
  package$Phaser.enableKt4 = enable_2;
  package$Phaser.enableKt5 = enable_3;
  package$Phaser.enableKt6 = enable_4;
  package$Phaser.enableKt7 = enable_5;
  package$Phaser.enableKt8 = enable_6;
  package$Phaser.enableKt9 = enable_7;
  package$Phaser.enableKt10 = enable_8;
  package$Phaser.Asset = Asset;
  package$Phaser.start_6a57ie$ = start;
  package$Phaser.GameStateType_61zpoe$ = GameStateType;
  package$Phaser.GameState = GameState;
  package$Phaser.TextStyle_gqcoa5$ = TextStyle;
  package$Phaser.GameConfig_g1t93r$ = GameConfig;
  package$Phaser.IGameConfig = IGameConfig;
  package$Phaser.ContactMaterialOptions_20gh5a$ = ContactMaterialOptions;
  package$Phaser.IContactMaterialOptions = IContactMaterialOptions;
  package$Phaser.image_ci216l$ = image;
  package$Phaser.images_wf56vb$ = images;
  package$Phaser.images_dslnxl$ = images_0;
  package$Phaser.sound_ci216l$ = sound;
  package$Phaser.sounds_wf56vb$ = sounds;
  package$Phaser.sounds_dslnxl$ = sounds_0;
  package$Phaser.DirectionObj = DirectionObj;
  var package$web = _.web || (_.web = {});
  package$web.ExamplesConfig = ExamplesConfig;
  package$web.getExampleState_za3lpa$ = getExampleState;
  package$web.getExampleRenderer_za3lpa$ = getExampleRenderer;
  Object.defineProperty(ExamplesWeb, 'exampleDivProperties', {
    get: ExamplesWeb$exampleDivProperties_getInstance
  });
  ExamplesWeb.ExampleInfo = ExamplesWeb$ExampleInfo;
  ExamplesWeb.TopBar = ExamplesWeb$TopBar;
  package$web.ExamplesWeb = ExamplesWeb;
  var package$examples = _.examples || (_.examples = {});
  var package$animation = package$examples.animation || (package$examples.animation = {});
  package$animation.AnimationEvents = AnimationEvents;
  package$animation.ChangeFrame = ChangeFrame;
  package$animation.ChangeTextureOnClick = ChangeTextureOnClick;
  package$animation.DestroyAnimation = DestroyAnimation;
  package$animation.DynamicAnimation = DynamicAnimation;
  package$animation.FrameUpdate = FrameUpdate;
  package$animation.GroupCreation = GroupCreation;
  package$animation.LoadTexture = LoadTexture;
  package$animation.LocalJsonObject = LocalJsonObject;
  package$animation.LoopedAnimation = LoopedAnimation;
  package$animation.MultipleAnims = MultipleAnims;
  package$animation.SpriteSheet = SpriteSheet;
  package$animation.StarlingAtlas = StarlingAtlas;
  package$animation.StopAnimation = StopAnimation;
  package$animation.TwoFrameTest = TwoFrameTest;
  var package$arcadephysics = package$examples.arcadephysics || (package$examples.arcadephysics = {});
  package$arcadephysics.AccelerateToPointer = AccelerateToPointer;
  package$arcadephysics.AngleBetween = AngleBetween;
  package$arcadephysics.AngleToPointer = AngleToPointer;
  package$arcadephysics.AngularAcceleration = AngularAcceleration;
  package$arcadephysics.AngularVelocity = AngularVelocity;
  package$arcadephysics.AsteroidsMovement = AsteroidsMovement;
  package$arcadephysics.BodyDebug = BodyDebug;
  package$arcadephysics.BodyEnable = BodyEnable;
  package$arcadephysics.BodyScale = BodyScale;
  package$arcadephysics.Bounce = Bounce;
  package$arcadephysics.BounceAccelerator = BounceAccelerator;
  package$arcadephysics.BounceKnock = BounceKnock;
  package$arcadephysics.BounceWithGravity = BounceWithGravity;
  package$arcadephysics.BoundingBox = BoundingBox;
  package$arcadephysics.CircleBody = CircleBody;
  package$arcadephysics.DirectBodyMovement = DirectBodyMovement;
  package$arcadephysics.DistanceToPointer = DistanceToPointer;
  package$arcadephysics.GlobalPause = GlobalPause;
  package$arcadephysics.Gravity = Gravity;
  package$arcadephysics.GravityAndDrag = GravityAndDrag;
  package$arcadephysics.GroupVsGroup = GroupVsGroup;
  package$arcadephysics.GroupVsSelf = GroupVsSelf;
  package$arcadephysics.LargerBoundingBox = LargerBoundingBox;
  package$arcadephysics.Launcher = Launcher;
  package$arcadephysics.LauncherFollow = LauncherFollow;
  package$arcadephysics.LauncherFollowWorld = LauncherFollowWorld;
  package$arcadephysics.MassVelocityTest = MassVelocityTest;
  package$arcadephysics.MoveOverDistance = MoveOverDistance;
  package$arcadephysics.MoveToPointer = MoveToPointer;
  package$arcadephysics.MoveTowardsObject = MoveTowardsObject;
  package$arcadephysics.MultiAngleToPointer = MultiAngleToPointer;
  package$arcadephysics.Multiball = Multiball;
  package$arcadephysics.NestedGroup = NestedGroup;
  package$arcadephysics.OffsetBoundingBox = OffsetBoundingBox;
  package$arcadephysics.OnCollideEvent = OnCollideEvent;
  package$arcadephysics.OneWayCollision = OneWayCollision;
  package$arcadephysics.PlatformerBasics = PlatformerBasics;
  package$arcadephysics.PlatformerTight = PlatformerTight;
  package$arcadephysics.ProcessCallback = ProcessCallback;
  package$arcadephysics.QuadtreeCollisionInfos = QuadtreeCollisionInfos;
  package$arcadephysics.RotateToSprite = RotateToSprite;
  package$arcadephysics.ShipTrail = ShipTrail;
  package$arcadephysics.ShootThePointer = ShootThePointer;
  package$arcadephysics.Snake = Snake;
  package$arcadephysics.SortDirection = SortDirection;
  package$arcadephysics.SortDirectionVertical = SortDirectionVertical;
  package$arcadephysics.SpriteVsGroup = SpriteVsGroup;
  package$arcadephysics.SpriteVsSprite = SpriteVsSprite;
  package$arcadephysics.VerticalCollision = VerticalCollision;
  package$arcadephysics.WorldBoundsEvent = WorldBoundsEvent;
  var package$audio = package$examples.audio || (package$examples.audio = {});
  package$audio.AudioSpriteDuration = AudioSpriteDuration;
  package$audio.AudioSpriteExample = AudioSpriteExample;
  package$audio.AudioSpriteJson = AudioSpriteJson;
  package$audio.FadeIn = FadeIn;
  package$audio.Ios = Ios;
  package$audio.Loop = Loop;
  package$audio.PauseAndResume = PauseAndResume;
  package$audio.PauseAndResumeMarker = PauseAndResumeMarker;
  package$audio.PlayMusic = PlayMusic;
  package$audio.RemoveSound = RemoveSound;
  package$audio.RestartSound = RestartSound;
  package$audio.SoundComplete = SoundComplete;
  var package$basics = package$examples.basics || (package$examples.basics = {});
  package$basics.E01LoadAnImage = E01LoadAnImage;
  package$basics.E02ClickOnAnImage = E02ClickOnAnImage;
  package$basics.E03MoveAnImage = E03MoveAnImage;
  package$basics.E04ImageFollowInput = E04ImageFollowInput;
  package$basics.E05LoadAnAnimation = E05LoadAnAnimation;
  package$basics.E06RenderText = E06RenderText;
  package$basics.E07TweenAnImage = E07TweenAnImage;
  package$basics.E08SpriteRotation = E08SpriteRotation;
  var package$bitmapdata = package$examples.bitmapdata || (package$examples.bitmapdata = {});
  package$bitmapdata.AlphaMask = AlphaMask;
  package$bitmapdata.Atlas = Atlas;
  package$bitmapdata.CopyBitmapdata = CopyBitmapdata;
  package$bitmapdata.CopyPixels = CopyPixels;
  package$bitmapdata.DrawAtlasFrame = DrawAtlasFrame;
  package$bitmapdata.DrawGroup = DrawGroup;
  package$bitmapdata.DrawSprite = DrawSprite;
  package$bitmapdata.GetPixel = GetPixel;
  package$bitmapdata.ReplaceColor = ReplaceColor;
  package$bitmapdata.SetHsl = SetHsl;
  package$bitmapdata.SpriteTexture = SpriteTexture;
  package$bitmapdata.TextExample = TextExample;
  package$bitmapdata.Tint = Tint;
  var package$buttons = package$examples.buttons || (package$examples.buttons = {});
  package$buttons.ActionOnClick = ActionOnClick;
  package$buttons.ButtonInAGroup = ButtonInAGroup;
  package$buttons.ButtonScale = ButtonScale;
  package$buttons.ButtonUsingTextureAtlas = ButtonUsingTextureAtlas;
  package$buttons.CancelButton = CancelButton;
  package$buttons.ChangingTheFrames = ChangingTheFrames;
  package$buttons.DisableButtonOnClick = DisableButtonOnClick;
  package$buttons.RotatedButtons = RotatedButtons;
  var package$camera = package$examples.camera || (package$examples.camera = {});
  package$camera.BasicFollow = BasicFollow;
  package$camera.CameraCull = CameraCull;
  package$camera.CameraFade = CameraFade;
  package$camera.CameraFlash = CameraFlash;
  package$camera.CameraLerp = CameraLerp;
  package$camera.CameraShake = CameraShake;
  package$camera.CameraView = CameraView;
  package$camera.Deadzone = Deadzone;
  package$camera.FixedToCamera = FixedToCamera;
  package$camera.FollowStyles = FollowStyles;
  package$camera.MassCameraCull = MassCameraCull;
  package$camera.MovingTheCamera = MovingTheCamera;
  package$camera.SmoothFollow = SmoothFollow;
  package$camera.WorldSprite = WorldSprite;
  package$camera.ZoomingTheCamera = ZoomingTheCamera;
  var package$create = package$examples.create || (package$examples.create = {});
  package$create.GenerateSprite = GenerateSprite;
  package$create.MoreSprites = MoreSprites;
  package$create.RatAttack = RatAttack;
  var package$debug = package$examples.debug || (package$examples.debug = {});
  package$debug.DebugCamera = DebugCamera;
  package$debug.DebugDisplay = DebugDisplay;
  package$debug.DebugDraw = DebugDraw;
  package$debug.DebugInput = DebugInput;
  package$debug.DebugPhysics = DebugPhysics;
  package$debug.DebugSprite = DebugSprite;
  var package$demoscene = package$examples.demoscene || (package$examples.demoscene = {});
  package$demoscene.AtariIntro = AtariIntro;
  package$demoscene.FontFromBitmapdata = FontFromBitmapdata;
  package$demoscene.RasterCarpet = RasterCarpet;
  package$demoscene.RasterFont = RasterFont;
  package$demoscene.Springy = Springy;
  package$demoscene.Starfield = Starfield;
  package$demoscene.UnlimitedBobs = UnlimitedBobs;
  var package$display = package$examples.display || (package$examples.display = {});
  package$display.Arc = Arc;
  package$display.ArcadePhysicsGraphicsShape = ArcadePhysicsGraphicsShape;
  package$display.ArcDetails = ArcDetails;
  package$display.CircleExample = CircleExample;
  package$display.Ellipse = Ellipse;
  package$display.ExtractMask = ExtractMask;
  package$display.Fullscreen = Fullscreen;
  package$display.FullscreenButtons = FullscreenButtons;
  package$display.GameBackgroundColor = GameBackgroundColor;
  package$display.GenerateTextureFromGraphics = GenerateTextureFromGraphics;
  package$display.Gradient = Gradient;
  package$display.Graphics2 = Graphics2;
  package$display.GraphicsChild = GraphicsChild;
  package$display.GraphicsExample = GraphicsExample;
  package$display.GraphicsInputEvents = GraphicsInputEvents;
  package$display.GraphicsPerf = GraphicsPerf;
  package$display.HsvColorWheel = HsvColorWheel;
  package$display.PixiRenderTexture = PixiRenderTexture;
  package$display.RenderCrisp = RenderCrisp;
  package$display.RenderTextureImage = RenderTextureImage;
  package$display.RenderTextureMirror = RenderTextureMirror;
  package$display.RenderTextureRotation = RenderTextureRotation;
  package$display.RenderTextureTilemap = RenderTextureTilemap;
  package$display.RenderTextureToTilesprite = RenderTextureToTilesprite;
  package$display.RenderTextureTrail = RenderTextureTrail;
  package$display.RoundPixels = RoundPixels;
  package$display.SpriteShadow = SpriteShadow;
  package$display.SpritesheetFromGraphics = SpritesheetFromGraphics;
  package$display.TintSprite = TintSprite;
  package$display.TintSpriteFrame = TintSpriteFrame;
  package$display.Viewport = Viewport;
  var package$filters = package$examples.filters || (package$examples.filters = {});
  package$filters.Bacteria = Bacteria;
  package$filters.Basic = Basic;
  package$filters.BlueDots = BlueDots;
  package$filters.Blur = Blur;
  package$filters.CheckerWave = CheckerWave;
  package$filters.Dalek = Dalek;
  package$filters.Dotwave = Dotwave;
  package$filters.Dotwave2 = Dotwave2;
  package$filters.Fire = Fire;
  package$filters.Fireball = Fireball;
  package$filters.Gray = Gray;
  package$filters.Kaleidoscope = Kaleidoscope;
  package$filters.Lightbeams = Lightbeams;
  package$filters.Lightwave = Lightwave;
  package$filters.Marble = Marble;
  package$filters.MouseRay = MouseRay;
  package$filters.MouseWave = MouseWave;
  package$filters.MultipleShaders = MultipleShaders;
  package$filters.Pixelate = Pixelate;
  package$filters.PixiFilter = PixiFilter;
  package$filters.PlaneDeformation = PlaneDeformation;
  package$filters.Plasma = Plasma;
  package$filters.RainbowBars = RainbowBars;
  package$filters.RetroPlasma = RetroPlasma;
  package$filters.Rotozoomer = Rotozoomer;
  package$filters.Seascape = Seascape;
  package$filters.Sinewave = Sinewave;
  package$filters.SinewaveFixedBase = SinewaveFixedBase;
  package$filters.SphereTracer = SphereTracer;
  package$filters.SpiralGalaxy = SpiralGalaxy;
  package$filters.StarfieldFilterExample = StarfieldFilterExample;
  package$filters.Starlight = Starlight;
  package$filters.Tunnel = Tunnel;
  package$filters.Undersea = Undersea;
  package$filters.VduNoise = VduNoise;
  package$filters.VerticalBars = VerticalBars;
  package$filters.Vortex = Vortex;
  package$filters.WorldFilter = WorldFilter;
  var package$games = package$examples.games || (package$examples.games = {});
  package$games.Breakout = Breakout;
  package$games.Defender = Defender;
  package$games.Gemmatch = Gemmatch;
  package$games.Invaders = Invaders;
  package$games.MatchingPairs = MatchingPairs;
  package$games.Simon = Simon;
  package$games.SlidingPuzzle = SlidingPuzzle;
  package$games.Starstruck = Starstruck;
  Tanks.EnemyTank = Tanks$EnemyTank;
  package$games.Tanks = Tanks;
  Yahtzee.Die = Yahtzee$Die;
  Yahtzee$Cup.DieData = Yahtzee$Cup$DieData;
  Yahtzee.Cup = Yahtzee$Cup;
  Yahtzee.ComboSingle = Yahtzee$ComboSingle;
  Yahtzee.ComboChance = Yahtzee$ComboChance;
  Yahtzee.ComboStraight = Yahtzee$ComboStraight;
  Yahtzee.ComboFullHouse = Yahtzee$ComboFullHouse;
  Yahtzee.ComboXOfAKind = Yahtzee$ComboXOfAKind;
  package$games.Yahtzee = Yahtzee;
  var package$geometry = package$examples.geometry || (package$examples.geometry = {});
  package$geometry.CenterLine = CenterLine;
  package$geometry.Centroid = Centroid;
  package$geometry.CircleExample = CircleExample_0;
  package$geometry.CircleRandomPoint = CircleRandomPoint;
  package$geometry.EllipseRandomPoint = EllipseRandomPoint;
  package$geometry.LineBounds = LineBounds;
  package$geometry.LineExample = LineExample;
  package$geometry.LineIntersection = LineIntersection;
  package$geometry.LineMidpoint = LineMidpoint;
  package$geometry.LineRandomPoint = LineRandomPoint;
  package$geometry.LineReflection = LineReflection;
  package$geometry.PlayingWithPoints = PlayingWithPoints;
  package$geometry.PolygonContains = PolygonContains;
  package$geometry.PolygonExample = PolygonExample;
  package$geometry.QuadtreeExample = QuadtreeExample;
  package$geometry.RectangleExample = RectangleExample;
  package$geometry.RectangleGetPoint = RectangleGetPoint;
  package$geometry.RectangleIntersects = RectangleIntersects;
  package$geometry.RectangleRandomPoint = RectangleRandomPoint;
  package$geometry.RotateLine = RotateLine;
  package$geometry.RotatePoint = RotatePoint;
  var package$groups = package$examples.groups || (package$examples.groups = {});
  package$groups.AddASpriteToGroup = AddASpriteToGroup;
  package$groups.AlignFramesToGrid = AlignFramesToGrid;
  package$groups.AlignSpritesToGrid = AlignSpritesToGrid;
  package$groups.BringAGroupToTop = BringAGroupToTop;
  package$groups.CallAll = CallAll;
  package$groups.CallAllAnimations = CallAllAnimations;
  package$groups.CallAllInput = CallAllInput;
  package$groups.CreateGroup = CreateGroup;
  package$groups.CreateIfNull = CreateIfNull;
  package$groups.CreateSpriteInAGroup = CreateSpriteInAGroup;
  package$groups.CreateThumbnail = CreateThumbnail;
  package$groups.DepthSort = DepthSort;
  package$groups.DisplayOrder = DisplayOrder;
  package$groups.FilterByProperty = FilterByProperty;
  package$groups.ForEach = ForEach;
  package$groups.GetFirst = GetFirst;
  package$groups.GetFirstDead = GetFirstDead;
  package$groups.GroupAsLayer = GroupAsLayer;
  package$groups.GroupBounds = GroupBounds;
  package$groups.GroupScale = GroupScale;
  package$groups.GroupTransform = GroupTransform;
  package$groups.GroupTransformRotate = GroupTransformRotate;
  package$groups.GroupTransformTween = GroupTransformTween;
  package$groups.HasProperty = HasProperty;
  package$groups.MoveToAnotherGroup = MoveToAnotherGroup;
  package$groups.NestedGroups = NestedGroups;
  package$groups.Recycling = Recycling;
  package$groups.Remove = Remove;
  package$groups.RemoveBetween = RemoveBetween;
  package$groups.RemoveCheck = RemoveCheck;
  package$groups.Replace = Replace;
  package$groups.SetAll = SetAll;
  package$groups.Sort = Sort;
  package$groups.SubGroupsGroupLength = SubGroupsGroupLength;
  package$groups.SwapChildrenInAGroup = SwapChildrenInAGroup;
  var package$input = package$examples.input || (package$examples.input = {});
  package$input.BoundsRect = BoundsRect;
  package$input.BoundsSprite = BoundsSprite;
  package$input.BringAChildToTop = BringAChildToTop;
  package$input.ButtonDestroy = ButtonDestroy;
  package$input.ButtonOpenPopup = ButtonOpenPopup;
  package$input.CursorKeyMovement = CursorKeyMovement;
  package$input.DownDuration = DownDuration;
  package$input.Drag = Drag;
  package$input.DragEventParameters = DragEventParameters;
  package$input.DragScaledGroup = DragScaledGroup;
  package$input.DragSeveralSprites = DragSeveralSprites;
  package$input.DragUpdate = DragUpdate;
  package$input.DragUpdateMultiple = DragUpdateMultiple;
  package$input.DropLimitation = DropLimitation;
  package$input.FollowMouse = FollowMouse;
  package$input.Gamepad = Gamepad;
  package$input.GamepadAnalogButton = GamepadAnalogButton;
  package$input.GamepadButtons = GamepadButtons;
  package$input.GamepadMultiplePads = GamepadMultiplePads;
  package$input.GameScale = GameScale;
  package$input.GroupInputEvents = GroupInputEvents;
  package$input.IgnoreChildInput = IgnoreChildInput;
  package$input.InputChildPriority = InputChildPriority;
  package$input.InputEnableGroup = InputEnableGroup;
  package$input.InputOrder = InputOrder;
  package$input.InputPriority = InputPriority;
  package$input.Keyboard = Keyboard;
  package$input.KeyboardHotkeys = KeyboardHotkeys;
  package$input.KeyboardJustpressed = KeyboardJustpressed;
  package$input.KeyExample = KeyExample;
  package$input.MotionLockHorizontal = MotionLockHorizontal;
  package$input.MotionLockVertical = MotionLockVertical;
  package$input.MouseButtons = MouseButtons;
  package$input.MultiTouch = MultiTouch;
  package$input.OnTap = OnTap;
  package$input.OutOfGame = OutOfGame;
  package$input.OutOfGameMouseUp = OutOfGameMouseUp;
  package$input.OverrideDefaultControls = OverrideDefaultControls;
  package$input.PixelPerfectClickDetection = PixelPerfectClickDetection;
  package$input.PixelpickAtlas = PixelpickAtlas;
  package$input.PixelpickAtlasScaled = PixelpickAtlasScaled;
  package$input.PixelpickScrollingEffect = PixelpickScrollingEffect;
  package$input.PixelpickSpritesheet = PixelpickSpritesheet;
  package$input.PointerOver = PointerOver;
  package$input.SnapOnDrag = SnapOnDrag;
  package$input.TouchEvents = TouchEvents;
  package$input.WordInput = WordInput;
  var package$loader = package$examples.loader || (package$examples.loader = {});
  package$loader.AssetPack = AssetPack;
  package$loader.CheckCache = CheckCache;
  package$loader.LoadAudio = LoadAudio;
  package$loader.LoadBitmapFont = LoadBitmapFont;
  package$loader.LoadImage = LoadImage;
  package$loader.LoadJsonFile = LoadJsonFile;
  package$loader.LoadSpritesheet = LoadSpritesheet;
  package$loader.LoadStarlingAtlas = LoadStarlingAtlas;
  package$loader.LoadTextFile = LoadTextFile;
  package$loader.LoadTextureAtlas = LoadTextureAtlas;
  package$loader.LoadTilemapJson = LoadTilemapJson;
  package$loader.LoadVideo = LoadVideo;
  package$loader.LoadXmlFile = LoadXmlFile;
  package$loader.PickImagesFromCache = PickImagesFromCache;
  var package$misc = package$examples.misc || (package$examples.misc = {});
  package$misc.AntialiasGame = AntialiasGame;
  package$misc.Device = Device;
  package$misc.GameConfig = GameConfig_0;
  package$misc.Net = Net;
  package$misc.PauseMenu = PauseMenu;
  package$misc.RandomGenerators = RandomGenerators;
  package$misc.RepeatableRandomNumbers = RepeatableRandomNumbers;
  package$misc.Template = Template;
  package$misc.WeightedPick = WeightedPick;
  var package$p2physics = package$examples.p2physics || (package$examples.p2physics = {});
  package$p2physics.Aabb = Aabb;
  package$p2physics.AccelerateToObject = AccelerateToObject;
  package$p2physics.BasicMovement = BasicMovement;
  package$p2physics.BodyClick = BodyClick;
  package$p2physics.BodyDebug = BodyDebug_0;
  package$p2physics.CollideWorldBounds = CollideWorldBounds;
  package$p2physics.CollisionGroups = CollisionGroups;
  package$p2physics.ContactEvents = ContactEvents;
  package$p2physics.ContactMaterial = ContactMaterial;
  package$p2physics.DistanceConstraint = DistanceConstraint;
  package$p2physics.GearConstraint = GearConstraint;
  package$p2physics.Gravity = Gravity_0;
  package$p2physics.GravityScale = GravityScale;
  package$p2physics.ImpactEvents = ImpactEvents;
  package$p2physics.KillAndRevive = KillAndRevive;
  package$p2physics.KinematicBody = KinematicBody;
  package$p2physics.LoadPolygon1 = LoadPolygon1;
  package$p2physics.LoadPolygon2 = LoadPolygon2;
  package$p2physics.LoadPolygon3 = LoadPolygon3;
  package$p2physics.LockConstraint = LockConstraint;
  package$p2physics.MouseSpring = MouseSpring;
  package$p2physics.MovementConstraint = MovementConstraint;
  package$p2physics.PhysicsGroup = PhysicsGroup;
  package$p2physics.PickUpObject = PickUpObject;
  package$p2physics.PlatformerMaterial = PlatformerMaterial;
  package$p2physics.PostbroadphaseCallback = PostbroadphaseCallback;
  package$p2physics.PrismaticConstraint = PrismaticConstraint;
  package$p2physics.RemoveSpring = RemoveSpring;
  package$p2physics.RevoluteConstraintExample = RevoluteConstraintExample;
  package$p2physics.Springs = Springs;
  package$p2physics.StaticBody = StaticBody;
  package$p2physics.Thrust = Thrust;
  package$p2physics.ThrustLeftRight = ThrustLeftRight;
  package$p2physics.TilemapExample = TilemapExample;
  package$p2physics.TilemapGravity = TilemapGravity;
  package$p2physics.TilespriteExample = TilespriteExample;
  package$p2physics.WorldBoundary = WorldBoundary;
  package$p2physics.WorldMove = WorldMove;
  var package$particles = package$examples.particles || (package$examples.particles = {});
  package$particles.AutoScale = AutoScale;
  package$particles.ClickBurst = ClickBurst;
  package$particles.Collision = Collision;
  package$particles.DestroyEmitter = DestroyEmitter;
  package$particles.DiamondBurst = DiamondBurst;
  package$particles.EmitterWidth = EmitterWidth;
  package$particles.Firestarter = Firestarter;
  package$particles.Flow = Flow;
  package$particles.Glass = Glass;
  package$particles.NoRotation = NoRotation;
  package$particles.ParticleAlpha = ParticleAlpha;
  package$particles.ParticleScale = ParticleScale;
  package$particles.ParticlesVsPlatforms = ParticlesVsPlatforms;
  package$particles.Rain = Rain;
  package$particles.RandomSprite = RandomSprite;
  package$particles.SmokeTrail = SmokeTrail;
  package$particles.Snow = Snow;
  package$particles.TweenedEmitter = TweenedEmitter;
  package$particles.WhenParticlesCollide = WhenParticlesCollide;
  package$particles.WorldParticles = WorldParticles;
  package$particles.ZeroGravity = ZeroGravity;
  var package$sprites = package$examples.sprites || (package$examples.sprites = {});
  package$sprites.AddAnImage = AddAnImage;
  package$sprites.AddASprite = AddASprite;
  package$sprites.AddSeveralSprites = AddSeveralSprites;
  package$sprites.AlignInRectangle = AlignInRectangle;
  package$sprites.AlignMultipleSprites = AlignMultipleSprites;
  package$sprites.AlignTextToSprite = AlignTextToSprite;
  package$sprites.AlignToRectangle = AlignToRectangle;
  package$sprites.AlignToSprite = AlignToSprite;
  package$sprites.AlignWithinSprite = AlignWithinSprite;
  package$sprites.Anchor = Anchor;
  package$sprites.ChildSprites = ChildSprites;
  package$sprites.CollideWorldBounds = CollideWorldBounds_0;
  package$sprites.Destroy = Destroy;
  package$sprites.DestroyTexture = DestroyTexture;
  package$sprites.DynamicCrop = DynamicCrop;
  package$sprites.FixedScale = FixedScale;
  package$sprites.HorizontalCrop = HorizontalCrop;
  package$sprites.Mask = Mask;
  package$sprites.MoveASprite = MoveASprite;
  package$sprites.MovementMask = MovementMask;
  package$sprites.OutOfBounds = OutOfBounds;
  package$sprites.OverlapTweenWithoutPhysics = OverlapTweenWithoutPhysics;
  package$sprites.OverlapWithoutPhysics = OverlapWithoutPhysics;
  package$sprites.Pivot = Pivot;
  package$sprites.Rope = Rope;
  package$sprites.RotateAndScale = RotateAndScale;
  package$sprites.RotatedAtlasFrameSupport = RotatedAtlasFrameSupport;
  package$sprites.RotateSpriteAroundPoint = RotateSpriteAroundPoint;
  package$sprites.ScaleASprite = ScaleASprite;
  package$sprites.SharedSpriteTextures = SharedSpriteTextures;
  package$sprites.SpriteBounds = SpriteBounds;
  package$sprites.SpriteDimensions = SpriteDimensions;
  package$sprites.SpriteFromBitmapdata = SpriteFromBitmapdata;
  package$sprites.SpriteGroupMask = SpriteGroupMask;
  package$sprites.SpriteRotation = SpriteRotation;
  package$sprites.Spritesheet = Spritesheet;
  package$sprites.SpriteTint = SpriteTint;
  package$sprites.VerticalCrop = VerticalCrop;
  var package$text = package$examples.text || (package$examples.text = {});
  package$text.BitmapFontCacheAsBitmap = BitmapFontCacheAsBitmap;
  package$text.BitmapfontDrag = BitmapfontDrag;
  package$text.BitmapFontFromTextureAtlas = BitmapFontFromTextureAtlas;
  package$text.BitmapFonts = BitmapFonts;
  package$text.BitmaptextAnchorX = BitmaptextAnchorX;
  package$text.BitmaptextAnchorY = BitmaptextAnchorY;
  package$text.BitmaptextMaxWidth = BitmaptextMaxWidth;
  package$text.BitmaptextPurgeGlyphs = BitmaptextPurgeGlyphs;
  package$text.BitmaptextWithPhysics = BitmaptextWithPhysics;
  package$text.BitmaptextWithPhysicsUpdating = BitmaptextWithPhysicsUpdating;
  package$text.CenterText = CenterText;
  package$text.CenterTextOnSprite = CenterTextOnSprite;
  package$text.CleanText = CleanText;
  package$text.ColoredCharacters = ColoredCharacters;
  package$text.DisplayTextWordByWord = DisplayTextWordByWord;
  package$text.DynamicTextShadow = DynamicTextShadow;
  package$text.HelloArial = HelloArial;
  package$text.KernOfDuty = KernOfDuty;
  package$text.Littera = Littera;
  package$text.RemoveText = RemoveText;
  package$text.RetroFont1 = RetroFont1;
  package$text.RetroFont2 = RetroFont2;
  package$text.SetPropertiesAfterCreation = SetPropertiesAfterCreation;
  package$text.TextBounds = TextBounds;
  package$text.TextEvents = TextEvents;
  package$text.TextGradient = TextGradient;
  package$text.TextLineSpacing = TextLineSpacing;
  package$text.TextReflect = TextReflect;
  package$text.TextShadowStroke = TextShadowStroke;
  package$text.TextStroke = TextStroke;
  package$text.TextStrokeWithColor = TextStrokeWithColor;
  package$text.TextTabs = TextTabs;
  package$text.TextTabsFromArray = TextTabsFromArray;
  package$text.TextTint = TextTint;
  package$text.TextWithPhysics = TextWithPhysics;
  package$text.UpdateText = UpdateText;
  package$text.WordWrap = WordWrap;
  var package$tilemaps = package$examples.tilemaps || (package$examples.tilemaps = {});
  package$tilemaps.CreateFromArray = CreateFromArray;
  package$tilemaps.CreateFromObjects = CreateFromObjects;
  package$tilemaps.CsvMap = CsvMap;
  package$tilemaps.CsvMapCollide = CsvMapCollide;
  package$tilemaps.CsvMapWithP2 = CsvMapWithP2;
  package$tilemaps.DualView = DualView;
  package$tilemaps.FeaturesTest = FeaturesTest;
  package$tilemaps.FillTiles = FillTiles;
  package$tilemaps.FlippedTiles = FlippedTiles;
  package$tilemaps.MapBounce = MapBounce;
  package$tilemaps.MapCollide = MapCollide;
  package$tilemaps.Mario = Mario;
  package$tilemaps.MultiLayer = MultiLayer;
  package$tilemaps.MultiLayerMultiTileset = MultiLayerMultiTileset;
  package$tilemaps.MultiMapCollide = MultiMapCollide;
  package$tilemaps.MultiTileset = MultiTileset;
  package$tilemaps.PaintTiles = PaintTiles;
  package$tilemaps.RandomiseTiles = RandomiseTiles;
  package$tilemaps.ReplaceTiles = ReplaceTiles;
  package$tilemaps.ResizeMap = ResizeMap;
  package$tilemaps.SciFly = SciFly;
  package$tilemaps.ShuffleTiles = ShuffleTiles;
  package$tilemaps.SwapTiles = SwapTiles;
  package$tilemaps.TileCallbacks = TileCallbacks;
  package$tilemaps.TilemapRayCast = TilemapRayCast;
  package$tilemaps.TileProperties = TileProperties;
  package$tilemaps.VerticalMap = VerticalMap;
  var package$tilesprites = package$examples.tilesprites || (package$examples.tilesprites = {});
  package$tilesprites.AnimatedTilingSprite = AnimatedTilingSprite;
  package$tilesprites.CollidingWithTilingSprite = CollidingWithTilingSprite;
  package$tilesprites.SpriteSheetTilingSprite = SpriteSheetTilingSprite;
  package$tilesprites.TileSpriteFromAnimatedSprite = TileSpriteFromAnimatedSprite;
  package$tilesprites.TilingAtlasTrim = TilingAtlasTrim;
  package$tilesprites.TilingSprite = TilingSprite;
  package$tilesprites.TilingSpriteAtlas = TilingSpriteAtlas;
  package$tilesprites.TilingSpriteAtlas32x32 = TilingSpriteAtlas32x32;
  var package$time = package$examples.time || (package$examples.time = {});
  package$time.BasicLoopedEvent = BasicLoopedEvent;
  package$time.BasicRepeatEvent = BasicRepeatEvent;
  package$time.BasicTimedEvent = BasicTimedEvent;
  package$time.CustomTimer = CustomTimer;
  package$time.ElapsedSeconds = ElapsedSeconds;
  package$time.MultipleTimers = MultipleTimers;
  package$time.RemoveEvent = RemoveEvent;
  package$time.TimedSlideshow = TimedSlideshow;
  var package$tweens = package$examples.tweens || (package$examples.tweens = {});
  package$tweens.AlphaText = AlphaText;
  package$tweens.Bounce = Bounce_0;
  package$tweens.Bubbles = Bubbles;
  package$tweens.ChainedTweens = ChainedTweens;
  package$tweens.CombinedTweens = CombinedTweens;
  package$tweens.Earthquake = Earthquake;
  package$tweens.Easing = Easing;
  package$tweens.EasingSpritesheets = EasingSpritesheets;
  package$tweens.FadingInASprite = FadingInASprite;
  package$tweens.GenerateData = GenerateData;
  package$tweens.Interpolation = Interpolation;
  package$tweens.PauseTween = PauseTween;
  package$tweens.Repeat = Repeat;
  package$tweens.SingleTweenReuse = SingleTweenReuse;
  package$tweens.TweenArray = TweenArray;
  package$tweens.TweenDelay = TweenDelay;
  package$tweens.TweenFrom = TweenFrom;
  package$tweens.TweenLoopEvent = TweenLoopEvent;
  package$tweens.TweenRelative = TweenRelative;
  package$tweens.TweenReuse = TweenReuse;
  package$tweens.TweenRotation = TweenRotation;
  package$tweens.TweenSeveralProperties = TweenSeveralProperties;
  package$tweens.TweenTo = TweenTo;
  package$tweens.Yoyo = Yoyo;
  var package$video = package$examples.video || (package$examples.video = {});
  package$video.AlphaWebm = AlphaWebm;
  package$video.ChangeSource = ChangeSource;
  package$video.DolbyDigitalPlus = DolbyDigitalPlus;
  package$video.LoadAsBlob = LoadAsBlob;
  package$video.MultipleVideos = MultipleVideos;
  package$video.PlayVideo = PlayVideo;
  package$video.SnapshotBlendMode = SnapshotBlendMode;
  package$video.SpritesSharingVideo = SpritesSharingVideo;
  package$video.TakeSnapshotFromStream = TakeSnapshotFromStream;
  package$video.VideoStream = VideoStream;
  var package$weapon = package$examples.weapon || (package$examples.weapon = {});
  package$weapon.Asteroids = Asteroids;
  package$weapon.AsteroidsBulletWrap = AsteroidsBulletWrap;
  package$weapon.Autofire = Autofire;
  package$weapon.BulletAngleVariance = BulletAngleVariance;
  package$weapon.BulletFrameCycle = BulletFrameCycle;
  package$weapon.BulletSpeedVariance = BulletSpeedVariance;
  package$weapon.FireMany = FireMany;
  package$weapon.FireManyFromTrackedSprite = FireManyFromTrackedSprite;
  package$weapon.FireManyWithVariance = FireManyWithVariance;
  package$weapon.FireOffsetPosition = FireOffsetPosition;
  package$weapon.FireRate = FireRate;
  package$weapon.MultipleBullets = MultipleBullets;
  package$weapon.SingleBullet = SingleBullet;
  var package$world = package$examples.world || (package$examples.world = {});
  package$world.FixedToCamera = FixedToCamera_0;
  package$world.MoveAroundWorld = MoveAroundWorld;
  package$world.WorldWrap = WorldWrap;
  Math_0 = Math;
  phaserGame = properties_0.Delegates.notNull();
  kPI2 = Math.PI * 2;
  kPI = Math.PI;
  Kotlin.defineModule('example1', _);
  main([]);
  return _;
}(typeof example1 === 'undefined' ? {} : example1, kotlin);
